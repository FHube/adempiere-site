"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[58333],{65837:(e,n,a)=>{a.r(n),a.d(n,{default:()=>t});var s=a(34086);const r=(0,s._)("p",null,"计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。",-1),l=(0,s._)("p",null,[(0,s.Uk)("比如，输入用户年龄，根据年龄打印不同的内容，在 Python 程序中，用 "),(0,s._)("code",null,"if"),(0,s.Uk)(" 语句实现:")],-1),i=(0,s.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age = 20\nif age &gt;= 18:\n    print(&#39;your age is&#39;, age)\n    print(&#39;adult&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>根据 Python 的缩进规则，如果 <code>if</code> 语句判断是 <code>True</code>，就把缩进的两行 <code>print</code> 语句执行了，否则，什么也不做。</p><p>也可以给 <code>if</code> 添加一个 <code>else</code> 语句，意思是，如果 <code>if</code> 判断是 <code>False</code>，不要执行 <code>if</code> 的内容，去把 <code>else</code> 执行了:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age = 3\nif age &gt;= 18:\n    print(&#39;your age is&#39;, age)\n    print(&#39;adult&#39;)\nelse:\n    print(&#39;your age is&#39;, age)\n    print(&#39;teenager&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意不要少写了冒号 <code>:</code>。</p><p>当然上面的判断是很粗略的，完全可以用 <code>elif</code> 做更细致的判断:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age = 3\nif age &gt;= 18:\n    print(&#39;adult&#39;)\nelif age &gt;= 6:\n    print(&#39;teenager&#39;)\nelse:\n    print(&#39;kid&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>elif</code> 是 <code>else if</code> 的缩写，完全可以有多个 <code>elif</code>，所以 <code>if</code> 语句的完整形式就是:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>if &lt;条件判断1&gt;:\n    &lt;执行1&gt;\nelif &lt;条件判断2&gt;:\n    &lt;执行2&gt;\nelif &lt;条件判断3&gt;:\n    &lt;执行3&gt;\nelse:\n    &lt;执行4&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>if</code> 语句执行有个特点，它是从上往下判断，如果在某个判断上是 <code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的 <code>elif</code> 和 <code>else</code>，所以，请测试并解释为什么下面的程序打印的是 <code>teenager</code>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age = 20\nif age &gt;= 6:\n    print(&#39;teenager&#39;)\nelif age &gt;= 18:\n    print(&#39;adult&#39;)\nelse:\n    print(&#39;kid&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>if</code> 判断条件还可以简写，比如写:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>if x:\n    print(&#39;True&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>只要 <code>x</code> 是非零数值、非空字符串、非空 list 等，就判断为 <code>True</code>，否则为 <code>False</code>。</p><h2 id="再议-input" tabindex="-1"><a class="header-anchor" href="#再议-input" aria-hidden="true">#</a> 再议 input</h2><p>最后看一个有问题的条件判断。很多同学会用 <code>input()</code> 读取用户的输入，这样可以自己输入，程序运行得更有意思:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>birth = input(&#39;birth: &#39;)\nif birth &lt; 2000:\n    print(&#39;00前&#39;)\nelse:\n    print(&#39;00后&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输入 1982，结果报错:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Traceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unorderable types: str() &gt; int()\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这是因为 <code>input()</code> 返回的数据类型是 <code>str</code>，<code>str</code> 不能直接和整数比较，必须先把 <code>str</code> 转换成整数。Python 提供了 <code>int()</code> 函数来完成这件事情:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s = input(&#39;birth: &#39;)\nbirth = int(s)\nif birth &lt; 2000:\n    print(&#39;00前&#39;)\nelse:\n    print(&#39;00后&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>再次运行，就可以得到正确地结果。但是，如果输入 <code>abc</code> 呢? 又会得到一个错误信息:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Traceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: &#39;abc&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>原来 <code>int()</code> 函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p><p>如何检查并捕获程序运行期的错误呢? 后面的错误和调试会讲到。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>条件判断可以让计算机自己做选择，Python 的 <code>if...elif...else</code> 很灵活。</p><p>条件判断从上向下匹配，当满足条件时执行对应的块内语句，后续的 <code>elif</code> 和 <code>else</code> 都不再执行。</p>',28),p={},t=(0,a(82831).Z)(p,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,l,(0,s.kq)(" more "),i],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},2089:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-83da8d94",path:"/code/language/python/guide/condition.html",title:"条件判断",lang:"zh-CN",frontmatter:{title:"条件判断",icon:"condition",author:"廖雪峰",date:"2020-05-24T00:00:00.000Z",category:["Python"],summary:"计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。\n比如，输入用户年龄，根据年龄打印不同的内容，在 Python 程序中，用 if 语句实现:\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/guide/condition.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"条件判断"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-24T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n<p>比如，输入用户年龄，根据年龄打印不同的内容，在 Python 程序中，用 <code v-pre>if</code> 语句实现:</p>\n",headers:[{level:2,title:"再议 input",slug:"再议-input",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.43,words:730},filePathRelative:"code/language/python/guide/condition.md"}}}]);