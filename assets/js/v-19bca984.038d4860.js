"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[35399],{31852:(n,e,s)=>{s.r(e),s.d(e,{default:()=>bn});var a=s(34086);const r=(0,a.Uk)("GitHub 地址: "),l={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("https://github.com/axios/axios"),t=(0,a._)("p",null,"axois 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js",-1),o=(0,a.uE)('<h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><ul><li>从浏览器发出 XMLHttpRequests</li><li>从 Node.js 发出 HTTP 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>JSON 数据的自动转换</li><li>客户端防止 XSRF 支持</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install axois\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yarn add axios\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="custom-container info"><p class="custom-container-title">CommonJS 用法</p><p>为了在将 CommonJS 导入与 <code>require()</code> 一起使用时获得 TypeScript 类型(用于智能感知/自动完成)，请使用以下方法:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const axios = require(&quot;axios&quot;).default;\n\n// axios.&lt;method&gt; will now provide autocomplete and parameter typings\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><p>进行 GET 请求:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const axios = require(&quot;axios&quot;);\n\n// Make a request for a user with a given ID\naxios\n  .get(&quot;/user?ID=12345&quot;)\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios\n  .get(&quot;/user&quot;, {\n    params: {\n      ID: 12345,\n    },\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get(&quot;/user?ID=12345&quot;);\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>async</code> / <code>await</code> is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.</p></div><p>进行 POST 请求:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios\n  .post(&quot;/user&quot;, {\n    firstName: &quot;Fred&quot;,\n    lastName: &quot;Flintstone&quot;,\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行多个并发请求:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function getUserAccount() {\n  return axios.get(&quot;/user/12345&quot;);\n}\n\nfunction getUserPermissions() {\n  return axios.get(&quot;/user/12345/permissions&quot;);\n}\n\naxios.all([getUserAccount(), getUserPermissions()]).then(\n  axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  })\n);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><p>可以通过将相关配置传递给 <code>axios</code> 来发出请求。</p><h3 id="axios-config" tabindex="-1"><a class="header-anchor" href="#axios-config" aria-hidden="true">#</a> axios(config)</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// Send a POST request\naxios({\n  method: &quot;post&quot;,\n  url: &quot;/user/12345&quot;,\n  data: {\n    firstName: &quot;Fred&quot;,\n    lastName: &quot;Flintstone&quot;,\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// GET request for remote image\naxios({\n  method: &quot;get&quot;,\n  url: &quot;http://bit.ly/2mTM3nY&quot;,\n  responseType: &quot;stream&quot;,\n}).then(function (response) {\n  response.data.pipe(fs.createWriteStream(&quot;ada_lovelace.jpg&quot;));\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="axios-url-config" tabindex="-1"><a class="header-anchor" href="#axios-url-config" aria-hidden="true">#</a> axios(url[, config])</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// Send a GET request (default method)\naxios(&quot;/user/12345&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="请求别名" tabindex="-1"><a class="header-anchor" href="#请求别名" aria-hidden="true">#</a> 请求别名</h3><p>为了方便起见，已为所有受支持的请求方法提供了别名。</p><ul><li><code>axios.request(config)</code></li><li><code>axios.get(url[, config])</code></li><li><code>axios.delete(url[, config])</code></li><li><code>axios.head(url[, config])</code></li><li><code>axios.options(url[, config])</code></li><li><code>axios.post(url[, data[, config]])</code></li><li><code>axios.put(url[, data[, config]])</code></li><li><code>axios.patch(url[, data[, config]])</code></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>当使用别名时，<code>url</code>, <code>method</code> 和 <code>data</code> 属性不需要再配置中指定。</p></div><h3 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h3><p>一些用于处理并发请求的有用函数:</p><ul><li><p><code>axios.all(iterable)</code></p></li><li><p><code>axios.spread(callback)</code></p></li></ul><h3 id="创建实例" tabindex="-1"><a class="header-anchor" href="#创建实例" aria-hidden="true">#</a> 创建实例</h3><p>您可以使用自定义配置创建 axios 的新实例。</p><ul><li><code>axios.create([config])</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const instance = axios.create({\n  baseURL: &quot;https://some-domain.com/api/&quot;,\n  timeout: 1000,\n  headers: { &quot;X-Custom-Header&quot;: &quot;foobar&quot; },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h3><p>可用的实例方法在下面列出。指定的配置将与实例配置合并。</p><ul><li><code>axios#request(config)</code></li><li><code>axios#get(url[, config])</code></li><li><code>axios#delete(url[, config])</code></li><li><code>axios#head(url[, config])</code></li><li><code>axios#options(url[, config])</code></li><li><code>axios#post(url[, data[, config]])</code></li><li><code>axios#put(url[, data[, config]])</code></li><li><code>axios#patch(url[, data[, config]])</code></li><li><code>axios#getUri([config])</code></li></ul><h2 id="请求配置" tabindex="-1"><a class="header-anchor" href="#请求配置" aria-hidden="true">#</a> 请求配置</h2><p>These are the available config options for making requests. Only the <code>url</code> is required. Requests will default to <code>GET</code> if <code>method</code> is not specified.</p><p>这些是发出请求的可用配置选项。只有 <code>url</code> 是必填的。如果未指定 <code>method</code>，则请求将默认为 <code>GET</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  // `url` is the server URL that will be used for the request\n  url: &#39;/user&#39;,\n  // `method` is the request method to be used when making the request\n  method: &#39;get&#39;, // default\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: &#39;https://some-domain.com/api/&#39;,\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;PATCH&#39; and &#39;DELETE&#39;\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n    return data;\n  }],\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n    return data;\n  }],\n  // `headers` are custom headers to be sent\n  headers: {&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;},\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: &#39;brackets&#39;})\n  },\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, and &#39;PATCH&#39;\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: &#39;Fred&#39;\n  },\n\n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: &#39;Country=Brasil&amp;City=Belo Horizonte&#39;,\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: &#39;janedoe&#39;,\n    password: &#39;s00pers3cret&#39;\n  },\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: &#39;arraybuffer&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;\n  //   browser only: &#39;blob&#39;\n  responseType: &#39;json&#39;, // default\n  // `responseEncoding` indicates encoding to use for decoding responses\n  // Note: Ignored for `responseType` of &#39;stream&#39; or client-side requests\n  responseEncoding: &#39;utf8&#39;, // default\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: &#39;XSRF-TOKEN&#39;, // default\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, // default\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n  // `maxContentLength` defines the max size of the http response content in bytes allowed\n  maxContentLength: 2000,\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status &gt;= 200 &amp;&amp; status &lt; 300; // default\n  },\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. &#39;/var/run/docker.sock&#39; to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n  // `proxy` defines the hostname and port of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  proxy: {\n    host: &#39;127.0.0.1&#39;,\n    port: 9000,\n    auth: {\n      username: &#39;mikeymike&#39;,\n      password: &#39;rapunz3l&#39;\n    }\n  },\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the &#39;content-encoding&#39; header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br></div></div><h2 id="相应模式" tabindex="-1"><a class="header-anchor" href="#相应模式" aria-hidden="true">#</a> 相应模式</h2><p>请求的响应包含以下信息。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  // `data` is the response that was provided by the server\n  data: {},\n  // `status` is the HTTP status code from the server response\n  status: 200,\n  // `statusText` is the HTTP status message from the server response\n  statusText: &#39;OK&#39;,\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lower cased and can be accessed using the bracket notation.\n  // Example: `response.headers[&#39;content-type&#39;]`\n  headers: {},\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in Node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>使用 <code>then</code> 时，您将收到如下响应:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios.get(&quot;/user/12345&quot;).then(function (response) {\n  console.log(response.data);\n  console.log(response.status);\n  console.log(response.statusText);\n  console.log(response.headers);\n  console.log(response.config);\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',45),p=(0,a.Uk)("当使用 "),c=(0,a._)("code",null,"catch",-1),u=(0,a.Uk)(" 或传递 "),b={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("拒绝回调"),m=(0,a.Uk)(" 作为 "),h=(0,a._)("code",null,"then",-1),g=(0,a.Uk)(" 的第二个参数时， 如 "),f=(0,a._)("a",{href:"#%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF"},"处理错误",-1),v=(0,a.Uk)("部分中所述，响应将通过 "),x=(0,a._)("code",null,"error",-1),q=(0,a.Uk)(" 对象提供。"),w=(0,a.uE)('<h2 id="配置默认值" tabindex="-1"><a class="header-anchor" href="#配置默认值" aria-hidden="true">#</a> 配置默认值</h2><p>您可以指定将应用于每个请求的配置默认值。</p><h3 id="全局-axios-默认值" tabindex="-1"><a class="header-anchor" href="#全局-axios-默认值" aria-hidden="true">#</a> 全局 axios 默认值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios.defaults.baseURL = &quot;https://api.example.com&quot;;\naxios.defaults.headers.common[&quot;Authorization&quot;] = AUTH_TOKEN;\naxios.defaults.headers.post[&quot;Content-Type&quot;] =\n  &quot;application/x-www-form-urlencoded&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="自定义实例默认值" tabindex="-1"><a class="header-anchor" href="#自定义实例默认值" aria-hidden="true">#</a> 自定义实例默认值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: &quot;https://api.example.com&quot;,\n});\n// Alter defaults after instance has been created\ninstance.defaults.headers.common[&quot;Authorization&quot;] = AUTH_TOKEN;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="配置优先顺序" tabindex="-1"><a class="header-anchor" href="#配置优先顺序" aria-hidden="true">#</a> 配置优先顺序</h3>',7),j=(0,a.Uk)("Config 将以优先顺序合并。顺序是在 "),y={href:"https://github.com/axios/axios/blob/master/lib/defaults.js#L28",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("lib/defaults.js"),T=(0,a.Uk)(" 中找到的库默认值，然后是实例的 "),U=(0,a._)("code",null,"defaults",-1),_=(0,a.Uk)(" 属性，以及 最后是请求的 "),P=(0,a._)("code",null,"config",-1),A=(0,a.Uk)(" 参数。后者将优先于前者。这是一个例子。"),R=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n// Override timeout for this request as it&#39;s known to take a long time\ninstance.get(&quot;/longRequest&quot;, {\n  timeout: 5000,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h2><p>您可以先拦截请求或响应，然后再由 <code>then</code> 或 <code>catch</code> 处理。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// Add a request interceptor\naxios.interceptors.request.use(\n  function (config) {\n    // Do something before request is sent\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n// Add a response interceptor\naxios.interceptors.response.use(\n  function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  },\n  function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  }\n);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>您可以在以后需要时删除拦截器。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const myInterceptor = axios.interceptors.request.use(function () {\n  /*...*/\n});\naxios.interceptors.request.eject(myInterceptor);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>您可以将拦截器添加到 axios 的自定义实例中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const instance = axios.create();\ninstance.interceptors.request.use(function () {\n  /*...*/\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="处理错误" tabindex="-1"><a class="header-anchor" href="#处理错误" aria-hidden="true">#</a> 处理错误</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios.get(&quot;/user/12345&quot;).catch(function (error) {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n  } else if (error.request) {\n    // The request was made but no response was received\n    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n    // http.ClientRequest in node.js\n    console.log(error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log(&quot;Error&quot;, error.message);\n  }\n  console.log(error.config);\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>使用 <code>validateStatus</code> 配置选项，您可以定义应该抛出错误的 HTTP 代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios.get(&quot;/user/12345&quot;, {\n  validateStatus: function (status) {\n    return status &lt; 500; // Resolve only if the status code is less than 500\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用 <code>toJSON</code>，您将获得一个对象，其中包含有关 HTTP 错误的更多信息。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios.get(&quot;/user/12345&quot;).catch(function (error) {\n  console.log(error.toJSON());\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="取消" tabindex="-1"><a class="header-anchor" href="#取消" aria-hidden="true">#</a> 取消</h2><p>您可以使用<em>取消令牌</em>取消请求。</p>',16),S=(0,a.Uk)("axios 取消令牌 API 是基于撤消的 "),E={href:"https://github.com/tc39/proposal-cancelable-promises",target:"_blank",rel:"noopener noreferrer"},C=(0,a.Uk)("可取消承诺提案"),H=(0,a.Uk)("."),N=(0,a.uE)('<p>您可以使用 <code>CancelToken.source</code> 工厂函数创建一个取消令牌，如下所示:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\naxios\n  .get(&quot;/user/12345&quot;, {\n    cancelToken: source.token,\n  })\n  .catch(function (thrown) {\n    if (axios.isCancel(thrown)) {\n      console.log(&quot;Request canceled&quot;, thrown.message);\n    } else {\n      // handle error\n    }\n  });\naxios.post(\n  &quot;/user/12345&quot;,\n  {\n    name: &quot;new name&quot;,\n  },\n  {\n    cancelToken: source.token,\n  }\n);\n// cancel the request (the message parameter is optional)\nsource.cancel(&quot;Operation canceled by the user.&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>您还可以通过将执行程序函数传递给 <code>CancelToken</code> 构造函数来创建取消令牌:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const CancelToken = axios.CancelToken;\nlet cancel;\naxios.get(&quot;/user/12345&quot;, {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  }),\n});\n// cancel the request\ncancel();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>您可以使用相同的取消令牌取消多个请求。</p></div><h2 id="using-application-x-www-form-urlencoded-format" tabindex="-1"><a class="header-anchor" href="#using-application-x-www-form-urlencoded-format" aria-hidden="true">#</a> Using application/x-www-form-urlencoded format</h2><p>默认情况下，axios 将 JavaScript 对象序列化为 <code>JSON</code>。要改为以 <code>application/x-www-form-urlencoded</code> 格式发送数据，可以使用以下选项之一。</p><h3 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h3>',8),I=(0,a.Uk)("在浏览器中，您可以按以下方式使用 "),L={href:"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer"},D=(0,a._)("code",null,"URLSearchParams",-1),O=(0,a.Uk)(" API:"),z=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const params = new URLSearchParams();\nparams.append(&quot;param1&quot;, &quot;value1&quot;);\nparams.append(&quot;param2&quot;, &quot;value2&quot;);\naxios.post(&quot;/foo&quot;, params);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> Node.js</h3><h4 id="query-string" tabindex="-1"><a class="header-anchor" href="#query-string" aria-hidden="true">#</a> Query string</h4>',3),F=(0,a.Uk)("在 Node.js 中，您可以按照如下方式使用 "),B={href:"https://nodejs.org/api/querystring.html",target:"_blank",rel:"noopener noreferrer"},W=(0,a._)("code",null,"querystring",-1),X=(0,a.Uk)(" 模块:"),M=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const querystring = require(&quot;querystring&quot;);\naxios.post(&quot;http://something.com/&quot;, querystring.stringify({ foo: &quot;bar&quot; }));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),G=(0,a.Uk)("您也可以使用 "),J={href:"https://github.com/ljharb/qs",target:"_blank",rel:"noopener noreferrer"},K=(0,a._)("code",null,"qs",-1),Y=(0,a.Uk)(" 库."),Z={class:"custom-container warning"},Q=(0,a._)("p",{class:"custom-container-title"},"注意",-1),V=(0,a.Uk)("如果需要对嵌套对象进行字符串化处理，则最好使用 qs 库，因为 "),$=(0,a._)("code",null,"querystring",-1),nn=(0,a.Uk)(" 方法在该用例中存在已知问题("),en={href:"https://github.com/nodejs/node-v0.x-archive/issues/1665",target:"_blank",rel:"noopener noreferrer"},sn=(0,a.Uk)("https://github.com/nodejs/node-v0.x-archive/issues/1665"),an=(0,a.Uk)(")"),rn=(0,a._)("h4",{id:"表格数据",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#表格数据","aria-hidden":"true"},"#"),(0,a.Uk)(" 表格数据")],-1),ln=(0,a.Uk)("在 Node.js 中，您可以使用 "),tn={href:"https://github.com/form-data/form-data",target:"_blank",rel:"noopener noreferrer"},on=(0,a._)("code",null,"form-data",-1),pn=(0,a.Uk)(" 库，如下所示:"),cn=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const FormData = require(&quot;form-data&quot;);\n\nconst form = new FormData();\nform.append(&quot;my_field&quot;, &quot;my value&quot;);\nform.append(&quot;my_buffer&quot;, new Buffer(10));\nform.append(&quot;my_file&quot;, fs.createReadStream(&quot;/foo/bar.jpg&quot;));\naxios.post(&quot;https://example.com&quot;, form, { headers: form.getHeaders() });\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>或者，使用拦截器:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios.interceptors.request.use((config) =&gt; {\n  if (config.data instanceof FormData) {\n    Object.assign(config.headers, config.data.getHeaders());\n  }\n  return config;\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',3),un={},bn=(0,s(82831).Z)(un,[["render",function(n,e){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("blockquote",null,[(0,a._)("p",null,[r,(0,a._)("a",l,[i,(0,a.Wm)(s)])])]),t,(0,a.kq)(" more "),o,(0,a._)("p",null,[p,c,u,(0,a._)("a",b,[d,(0,a.Wm)(s)]),m,h,g,f,v,x,q]),w,(0,a._)("p",null,[j,(0,a._)("a",y,[k,(0,a.Wm)(s)]),T,U,_,P,A]),R,(0,a._)("blockquote",null,[(0,a._)("p",null,[S,(0,a._)("a",E,[C,(0,a.Wm)(s)]),H])]),N,(0,a._)("p",null,[I,(0,a._)("a",L,[D,(0,a.Wm)(s)]),O]),z,(0,a._)("p",null,[F,(0,a._)("a",B,[W,(0,a.Wm)(s)]),X]),M,(0,a._)("p",null,[G,(0,a._)("a",J,[K,(0,a.Wm)(s)]),Y]),(0,a._)("div",Z,[Q,(0,a._)("p",null,[V,$,nn,(0,a._)("a",en,[sn,(0,a.Wm)(s)]),an])]),rn,(0,a._)("p",null,[ln,(0,a._)("a",tn,[on,(0,a.Wm)(s)]),pn]),cn],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}},19180:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-19bca984",path:"/code/node-js/package/axois.html",title:"axios",lang:"zh-CN",frontmatter:{title:"axios",category:["Node.js"],tag:["Node.js"],summary:"\nGitHub 地址: https://github.com/axios/axios\n\naxois 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/node-js/package/axois.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"axios"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Node.js"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:'<blockquote>\n<p>GitHub 地址: <a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer">https://github.com/axios/axios<ExternalLinkIcon/></a></p>\n</blockquote>\n<p>axois 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js</p>\n',headers:[{level:2,title:"特点",slug:"特点",children:[]},{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"API",slug:"api",children:[{level:3,title:"axios(config)",slug:"axios-config",children:[]},{level:3,title:"axios(url[, config])",slug:"axios-url-config",children:[]},{level:3,title:"请求别名",slug:"请求别名",children:[]},{level:3,title:"并发",slug:"并发",children:[]},{level:3,title:"创建实例",slug:"创建实例",children:[]},{level:3,title:"实例方法",slug:"实例方法",children:[]}]},{level:2,title:"请求配置",slug:"请求配置",children:[]},{level:2,title:"相应模式",slug:"相应模式",children:[]},{level:2,title:"配置默认值",slug:"配置默认值",children:[{level:3,title:"全局 axios 默认值",slug:"全局-axios-默认值",children:[]},{level:3,title:"自定义实例默认值",slug:"自定义实例默认值",children:[]},{level:3,title:"配置优先顺序",slug:"配置优先顺序",children:[]}]},{level:2,title:"拦截器",slug:"拦截器",children:[]},{level:2,title:"处理错误",slug:"处理错误",children:[]},{level:2,title:"取消",slug:"取消",children:[]},{level:2,title:"Using application/x-www-form-urlencoded format",slug:"using-application-x-www-form-urlencoded-format",children:[{level:3,title:"浏览器",slug:"浏览器",children:[]},{level:3,title:"Node.js",slug:"node-js",children:[]}]}],git:{createdTime:1611747207e3,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:9.57,words:2872},filePathRelative:"code/node-js/package/axois.md"}}}]);