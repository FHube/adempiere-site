"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[49448],{40670:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(66252).uE)('<p>文件名(或者目录名)是执行 Linux 命令中最常见的参数，例如前面介绍的 <code>cd</code>、<code>mkdir</code>、<code>cp</code> 等命令，都涉及到了文件名。然而对初学者来说，输入完整的文件名感觉很麻烦，尤其面临文件名(目录名)特别长的时候。</p><p>考虑到这种情况，Shell (Bash) 提供了一种称为“命令行自动补全”的功能，即在输入文件名的时候，只需要输入该文件名的前几个字符，然后按 Tab 键，Shell 就可以自动将文件名补全。</p><p>举个例子，在 <code>/etc</code> 目录下，执行如下命令:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /etc</span>\n<span class="token punctuation">[</span>root@localhost etc<span class="token punctuation">]</span><span class="token comment"># cd fs &lt;-- 按一次 Tab 键</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当按下 Tab 键时，您会发现 Shell 自动将 &quot;fs&quot; 补全成了 &quot;fatab&quot;，这是因为当前 <code>/etc</code> 目录中只有 fstab 是以 &quot;fs&quot; 开头，因此 Shell 可以确定这里想要输入的文件名称为 fstab。</p><p>那么，如果当前目录中含有多个以指定字符(或字符串)开头的目录或文件，Shell 还可以成功辨认吗? 答案是否定的，但它会以列表的形式给出所有以指定字符或字符串开头的文件或目录，供用户选择。</p><p>例如，还是在 <code>/etc</code> 目录下，执行如下命令:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost etc<span class="token punctuation">]</span><span class="token comment"># cd b &lt;-- 连续按两次 Tab 键</span>\nbash_completion.d/      blkid/          bonobo-activation/\nbashrc                  bluetooth\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到，当按一次 Tab 键时，Shell 没有任何反映，原因就是当前目录下以 &quot;b&quot; 为开头的文件或目录有多个(2 个以上)，仅凭一个字符 &quot;b&quot; 无法精准判断出具体指的是哪个文件。而当再一次按下 Tab 键时，Shell 会列表的形式显示给用户当前目录下所有以 &quot;b&quot; 开头的文件或目录。</p><p>事实上，Shell 提供的命令行补全功能不仅适用于补全文件名，也同样适用于所有 Linux 命令。举个例子，当输入 <code>ca</code> 并连续按下 2 次 Tab 键时，Shell 会罗列出所有以 &quot;ca&quot; 开头的 Linux 命令，如下所示:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost etc<span class="token punctuation">]</span><span class="token comment"># ca &lt;--连续按两次 Tab 键</span>\ncacertdir_rehash    cache_restore       capsh       catchsegv\ncache_check         <span class="token function">cal</span>                 captoinfo\ncache_dump          <span class="token builtin class-name">caller</span>              <span class="token keyword">case</span>\ncache_repair        canberra-gtk-play   <span class="token function">cat</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另外，Shell 还有一套被称作通配符的转用符号，这些通配符可以搜索并匹配文件名的一部分，从而大大简化了文件名的输入。</p><ul><li><code>*</code>: 匹配任意数量的字符。</li><li><code>?</code>: 匹配任意一个字符。</li><li><code>[]</code>: 匹配括号内的任意一个字符，甚至 <code>[]</code> 中还可以包含用 <code>-</code>(短横线)连接的字符或数字，表示一定范围内的字符或数字。</li></ul><p>为了学习这些通配符的用法，首先需要建立一个空目录(如 test)，并在该目录中创建一些文件(供测试用)，执行命令如下:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost etc<span class="token punctuation">]</span><span class="token comment"># makdir test</span>\n<span class="token punctuation">[</span>root@localhost etc<span class="token punctuation">]</span><span class="token comment"># cd test</span>\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># touch apple banana grape grapefruit watermelon</span>\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls</span>\napple banana grape grapefruit watermelon\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在此基础上，继续执行如下命令:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls a* &lt;--匹配所有以 a 字符开头的文件名</span>\napple\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls g*t &lt;--匹配所有以 g 字符开头，以 t 字符结尾的文件名</span>\ngrapefruit\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls *e* &lt;--匹配所有包含 e 字符的文件名</span>\napple grape grapefruit watermelon\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls *n* &lt;--匹配所有包含 n 字符的文件名</span>\nbanana watermelon\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>结合以上实例，因为 <code>*</code> 可以匹配任何数量的字符，因此可以一一实现实例中标注的功能。</p><p>接下来，列举一下使用 ? 匹配文件名的示例:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls ????e</span>\napple grape\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls g???e*</span>\ngrape grapefruit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因为 1 个 ? 只能匹配 1 个任意字符，因此该示例中第一个例子表示的是匹配任意包含 5 个字符但以 e 结尾的文件(apple 和 grape)，第二例子表示匹配任何以 g 开头且第 5 个字符为 e 的文件(grape 和 grapefruit)。</p><p>最后，列举一些使用括号 <code>[]</code> 匹配文件名的示例:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls [abw]*</span>\napple banana watermelon\n<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls [agw]*[ne]</span>\napple grape watermelon\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此示例中，第一个例子表示匹配任何以 a、b 或 w 开头的文件；第二个例子中表示匹配任何以 a、g、w 开头，以 n 或 e 结尾的文件名。</p><p>不仅如此，<code>[]</code> 中还可以通过 -(短横线)表示一定范围内的任意字符(或数字)，例如:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># ls [a-g]*</span>\napple banana grape grapefruit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中，<code>[a-g]*</code> 表示匹配以字母 a 到 g 之间任何一个字母开头的文件名。</p>',27),t={},p=(0,s(83744).Z)(t,[["render",function(n,a){return e}]])},83744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}},14240:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-8fbbf5e0",path:"/linux/command/add.html",title:"命令补全",lang:"zh-CN",frontmatter:{title:"命令补全",icon:"square-check",date:"2019-11-20T00:00:00.000Z",category:["Linux"],head:[["meta",{property:"og:url",content:"https://mrhope.site/linux/command/add.html"}],["meta",{property:"og:title",content:"命令补全"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{name:"twitter:card",content:"summary_large_image"}],["meta",{property:"article:published_time",content:"2019-11-20T00:00:00.000Z"}],["script",{type:"application/ld+json"},'{"@context":"https://schema.org","@type":"NewsArticle","headline":"命令补全","image":[""],"datePublished":"2019-11-20T00:00:00.000Z","dateModified":"","author":[]}']]},excerpt:"<p>文件名(或者目录名)是执行 Linux 命令中最常见的参数，例如前面介绍的 <code>cd</code>、<code>mkdir</code>、<code>cp</code> 等命令，都涉及到了文件名。然而对初学者来说，输入完整的文件名感觉很麻烦，尤其面临文件名(目录名)特别长的时候。</p>\n<p>考虑到这种情况，Shell (Bash) 提供了一种称为“命令行自动补全”的功能，即在输入文件名的时候，只需要输入该文件名的前几个字符，然后按 Tab 键，Shell 就可以自动将文件名补全。</p>\n",headers:[],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:3.86,words:1159},filePathRelative:"linux/command/add.md"}}}]);