"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[30300],{30891:(e,n,a)=>{a.r(n),a.d(n,{default:()=>U});var s=a(34086);const r=(0,s._)("p",null,"在 TypeScript 中，数组类型有多种定义方式，比较灵活。",-1),t=(0,s.uE)('<h2 id="「类型-方括号」表示法" tabindex="-1"><a class="header-anchor" href="#「类型-方括号」表示法" aria-hidden="true">#</a> 「类型 + 方括号」表示法</h2><p>最简单的方法是使用「类型 + 方括号」来表示数组:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let fibonacci: number[] = [1, 1, 2, 3, 5];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数组的项中<strong>不允许</strong>出现其他的类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let fibonacci: number[] = [1, &quot;1&quot;, 2, 3, 5];\n\n// Type &#39;string&#39; is not assignable to type &#39;number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let fibonacci: number[] = [1, 1, 2, 3, 5];\nfibonacci.push(&quot;8&quot;);\n\n// Argument of type &#39;&quot;8&quot;&#39; is not assignable to parameter of type &#39;number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上例中，<code>push</code> 方法只允许传入 <code>number</code> 类型的参数，但是却传了一个 <code>&quot;8&quot;</code> 类型的参数，所以报错了。这里 <code>&quot;8&quot;</code> 是一个字符串字面量类型，会在后续章节中详细介绍。</p><h2 id="数组泛型" tabindex="-1"><a class="header-anchor" href="#数组泛型" aria-hidden="true">#</a> 数组泛型</h2><p>我们也可以使用数组泛型(Array Generic) <code>Array&lt;elemType&gt;</code> 来表示数组:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>',11),i=(0,s.Uk)("关于泛型，可以参考"),l=(0,s.Uk)("泛型"),p=(0,s.Uk)("一章。"),c=(0,s.uE)('<h2 id="用接口表示数组" tabindex="-1"><a class="header-anchor" href="#用接口表示数组" aria-hidden="true">#</a> 用接口表示数组</h2><p>接口也可以用来描述数组:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface NumberArray {\n  [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>NumberArray</code> 表示: 只要索引的类型是数字时，那么值的类型必须是数字。</p><p>虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。</p><p>不过有一种情况例外，那就是它常用来表示类数组。</p><h2 id="类数组" tabindex="-1"><a class="header-anchor" href="#类数组" aria-hidden="true">#</a> 类数组</h2><p>类数组(Array-like Object)不是数组类型，比如 <code>arguments</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sum() {\n  let args: number[] = arguments;\n}\n\n// Type &#39;IArguments&#39; is missing the following properties from type &#39;number[]&#39;: pop, push, concat, join, and 24 more.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上例中，<code>arguments</code> 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sum() {\n  let args: {\n    [index: number]: number;\n    length: number;\n    callee: Function;\n  } = arguments;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 <code>length</code> 和 <code>callee</code> 两个属性。</p><p>事实上常用的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sum() {\n  let args: IArguments = arguments;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中 <code>IArguments</code> 是 TypeScript 中定义好了的类型，它实际上就是:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface IArguments {\n  [index: number]: any;\n  length: number;\n  callee: Function;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',16),o=(0,s.Uk)("关于内置对象，可以参考"),d=(0,s.Uk)("内置对象"),u=(0,s.Uk)("一章。"),b=(0,s.uE)('<h2 id="any-在数组中的应用" tabindex="-1"><a class="header-anchor" href="#any-在数组中的应用" aria-hidden="true">#</a> any 在数组中的应用</h2><p>一个比较常见的做法是，用 <code>any</code> 表示数组中允许出现任意类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let list: any[] = [&quot;xcatliu&quot;, 25, { website: &quot;http://xcatliu.com&quot; }];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',4),m={href:"http://www.typescriptlang.org/docs/handbook/basic-types.html#array",target:"_blank",rel:"noopener noreferrer"},g=(0,s.Uk)("Basic Types # Array"),h=(0,s.Uk)("("),y={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#%E6%95%B0%E7%BB%84",target:"_blank",rel:"noopener noreferrer"},v=(0,s.Uk)("中文版"),f=(0,s.Uk)(")"),k={href:"http://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types",target:"_blank",rel:"noopener noreferrer"},x=(0,s.Uk)("Interfaces # Indexable Types"),_=(0,s.Uk)("("),T={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html#%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},q=(0,s.Uk)("中文版"),w=(0,s.Uk)(")"),A={},U=(0,a(82831).Z)(A,[["render",function(e,n){const a=(0,s.up)("RouterLink"),A=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s.kq)(" more "),t,(0,s._)("p",null,[i,(0,s.Wm)(a,{to:"/code/language/typescript/advanced/generics.html"},{default:(0,s.w5)((()=>[l])),_:1}),p]),c,(0,s._)("p",null,[o,(0,s.Wm)(a,{to:"/code/language/typescript/basics/built-in-objects.html"},{default:(0,s.w5)((()=>[d])),_:1}),u]),b,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",m,[g,(0,s.Wm)(A)]),h,(0,s._)("a",y,[v,(0,s.Wm)(A)]),f]),(0,s._)("li",null,[(0,s._)("a",k,[x,(0,s.Wm)(A)]),_,(0,s._)("a",T,[q,(0,s.Wm)(A)]),w])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},59225:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-0db2b831",path:"/code/language/typescript/basics/type-of-array.html",title:"数组的类型",lang:"zh-CN",frontmatter:{title:"数组的类型",icon:"array",category:["TypeScript"],summary:"在 TypeScript 中，数组类型有多种定义方式，比较灵活。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/type-of-array.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"数组的类型"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-06-03T17:08:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-06-03T17:08:34.000Z"}]]},excerpt:"<p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p>\n",headers:[{level:2,title:"「类型 + 方括号」表示法",slug:"「类型-方括号」表示法",children:[]},{level:2,title:"数组泛型",slug:"数组泛型",children:[]},{level:2,title:"用接口表示数组",slug:"用接口表示数组",children:[]},{level:2,title:"类数组",slug:"类数组",children:[]},{level:2,title:"any 在数组中的应用",slug:"any-在数组中的应用",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1591204114e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.26,words:679},filePathRelative:"code/language/typescript/basics/type-of-array.md"}}}]);