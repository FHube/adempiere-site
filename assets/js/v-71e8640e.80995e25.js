"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[87914],{29729:(n,e,a)=>{a.r(e),a.d(e,{default:()=>u});var s=a(34086);const r=(0,s._)("p",null,[(0,s._)("code",null,"JSON"),(0,s.Uk)(" 是 "),(0,s._)("code",null,"JavaScript Object Notation"),(0,s.Uk)(" 的缩写，它是一种数据交换格式。")],-1),t=(0,s.uE)('<p>在 JSON 出现之前，大家一直用 XML 来传递数据。因为 XML 是一种纯文本格式，所以它适合在网络上交换数据。XML 本身不算复杂，但是，加上 DTD、XSD、XPath、XSLT 等一大堆复杂的规范以后，任何正常的软件开发人员碰到 XML 都会感觉头大了，最后大家发现，即使您努力钻研几个月，也未必搞得清楚 XML 的规范。</p><p>终于，在 2002 年的一天，道格拉斯·克罗克福特 (Douglas Crockford) 同学为了拯救深陷水深火热同时又被某几个巨型软件企业长期愚弄的软件工程师，发明了 JSON 这种超轻量级的数据交换格式。</p><p>道格拉斯同学长期担任雅虎的高级架构师，自然钟情于 JavaScript。他设计的 JSON 实际上是 JavaScript 的一个子集。在 JSON 中，一共就这么几种数据类型:</p><ul><li>number: 和 JavaScript 的 number 完全一致；</li><li>boolean: 就是 JavaScript 的 <code>true</code> 或 <code>false；</code></li><li>string: 就是 JavaScript 的 string；</li><li>null: 就是 JavaScript 的 <code>null</code>；</li><li>array: 就是 JavaScript 的 Array 表示方式—— <code>[]</code>；</li><li>object: 就是 JavaScript 的 <code>{ ... }</code> 表示方式。</li></ul><p>以及上面的任意组合。</p><p>并且，JSON 还定死了字符集必须是 UTF-8，表示多语言就没有问题了。为了统一解析，JSON 的字符串规定必须用双引号 <code>&quot;&quot;</code>，Object 的键也必须用双引号 <code>&quot;&quot;</code>。</p><p>由于 JSON 非常简单，很快就风靡 Web 世界，并且成为 ECMA 标准。几乎所有编程语言都有解析 JSON 的库，而在 JavaScript 中，我们可以直接使用 JSON，因为 JavaScript 内置了 JSON 的解析。</p><p>把任何 JavaScript 对象变成 JSON，就是把这个对象序列化成一个 JSON 格式的字符串，这样才能够通过网络传递给其他计算机。</p><p>如果我们收到一个 JSON 格式的字符串，只需要把它反序列化成一个 JavaScript 对象，就可以在 JavaScript 中直接使用这个对象了。</p><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h2><p>让我们先把小明这个对象序列化成 JSON 格式的字符串:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nconst xiaoming = {\n  name: &quot;小明&quot;,\n  age: 14,\n  gender: true,\n  height: 1.65,\n  grade: null,\n  &quot;middle-school&quot;: &#39;&quot;W3C&quot; Middle School&#39;,\n  skills: [&quot;JavaScript&quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;Lisp&quot;],\n};\n\nconst s = JSON.stringify(xiaoming);\nconsole.log(s);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>要输出得好看一些，可以加上参数，按缩进输出:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>JSON.stringify(xiaoming, null, &quot;  &quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结果:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;name&quot;: &quot;小明&quot;,\n  &quot;age&quot;: 14,\n  &quot;gender&quot;: true,\n  &quot;height&quot;: 1.65,\n  &quot;grade&quot;: null,\n  &quot;middle-school&quot;: &quot;\\&quot;W3C\\&quot; Middle School&quot;,\n  &quot;skills&quot;: [&quot;JavaScript&quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;Lisp&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>第二个参数用于控制如何筛选对象的键值，如果我们只想输出指定的属性，可以传入 <code>Array</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>JSON.stringify(xiaoming, [&quot;name&quot;, &quot;skills&quot;], &quot;  &quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结果:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;name&quot;: &quot;小明&quot;,\n  &quot;skills&quot;: [&quot;JavaScript&quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;Lisp&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>还可以传入一个函数，这样对象的每个键值对都会被函数先处理:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function convert(key, value) {\n  if (typeof value === &quot;string&quot;) return value.toUpperCase();\n\n  return value;\n}\n\nJSON.stringify(xiaoming, convert, &quot;  &quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的代码把所有属性值都变成大写:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;name&quot;: &quot;小明&quot;,\n  &quot;age&quot;: 14,\n  &quot;gender&quot;: true,\n  &quot;height&quot;: 1.65,\n  &quot;grade&quot;: null,\n  &quot;middle-school&quot;: &quot;\\&quot;W3C\\&quot; MIDDLE SCHOOL&quot;,\n  &quot;skills&quot;: [&quot;JAVASCRIPT&quot;, &quot;JAVA&quot;, &quot;PYTHON&quot;, &quot;LISP&quot;]\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果我们还想要精确控制如何序列化小明，可以给 <code>xiaoming</code> 定义一个 <code>toJSON()</code> 的方法，直接返回 JSON 应该序列化的数据:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const xiaoming = {\n  name: &quot;小明&quot;,\n  age: 14,\n  gender: true,\n  height: 1.65,\n  grade: null,\n  &quot;middle-school&quot;: &#39;&quot;W3C&quot; Middle School&#39;,\n  skills: [&quot;JavaScript&quot;, &quot;Java&quot;, &quot;Python&quot;, &quot;Lisp&quot;],\n  toJSON() {\n    return {\n      // 只输出name和age，并且改变了key:\n      Name: this.name,\n      Age: this.age,\n    };\n  },\n};\n\nJSON.stringify(xiaoming); // &#39;{&quot;Name&quot;:&quot;小明&quot;,&quot;Age&quot;:14}&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h2><p>拿到一个 JSON 格式的字符串，我们直接用 <code>JSON.parse()</code> 把它变成一个 JavaScript 对象:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>JSON.parse(&quot;[1,2,3,true]&quot;); // [1, 2, 3, true]\nJSON.parse(&#39;{&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14}&#39;); // Object {name: &#39;小明&#39;, age: 14}\nJSON.parse(&quot;true&quot;); // true\nJSON.parse(&quot;123.45&quot;); // 123.45\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>JSON.parse()</code> 还可以接收一个函数，用来转换解析出的属性:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nconst obj = JSON.parse(&#39;{&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14}&#39;, (key, value) =&gt;\n  key === &quot;name&quot; ? `${value}同学` : value\n);\n\nconsole.log(JSON.stringify(obj)); // {name: &#39;小明同学&#39;, age: 14}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 JavaScript 中使用 JSON，就是这么简单!</p>',32),l={},u=(0,a(82831).Z)(l,[["render",function(n,e){return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s.kq)(" more "),t],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const a=n.__vccOpts||n;for(const[n,s]of e)a[n]=s;return a}},73470:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-71e8640e",path:"/code/language/js/object/JSON.html",title:"JSON",lang:"zh-CN",frontmatter:{title:"JSON",icon:"json",date:"2019-10-14T00:00:00.000Z",category:["JavaScript"],summary:"JSON 是 JavaScript Object Notation 的缩写，它是一种数据交换格式。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/object/JSON.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"JSON"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-14T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p><code v-pre>JSON</code> 是 <code v-pre>JavaScript Object Notation</code> 的缩写，它是一种数据交换格式。</p>\n",headers:[{level:2,title:"序列化",slug:"序列化",children:[]},{level:2,title:"反序列化",slug:"反序列化",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3}]},readingTime:{minutes:3.34,words:1002},filePathRelative:"code/language/js/object/JSON.md"}}}]);