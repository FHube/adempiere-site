"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[62339],{24005:(t,e,a)=>{a.r(e),a.d(e,{default:()=>o});var n=a(34086);const s=(0,n.uE)('<h1 id="路由-api" tabindex="-1"><a class="header-anchor" href="#路由-api" aria-hidden="true">#</a> 路由 API</h1><p>本页面介绍的一系列 API 都是和小程序路由(导航)相关的 API。</p><p>可以通过这些 API，自定义小程序的页面导航逻辑。</p><div class="custom-container tip"><p class="custom-container-title">概要</p><p>最常用的两个:</p><ul><li><code>wx.navigateTo</code>: 导航到一个新页面</li><li><code>wx.navigateBack</code>: 返回上一层(上 n 层)页面</li></ul><p>不太常用的三个:</p><ul><li><code>wx.redirectTo</code>: 将当前页面重定向到一个新的页面</li><li><code>wx.switchTab</code>: 到转到 Tabbar 的页面并关闭其他页面</li><li><code>wx.reLaunch</code>: 关闭小程序所有页面，并打开指定页面</li></ul></div><h2 id="wx-navigateto-object-object" tabindex="-1"><a class="header-anchor" href="#wx-navigateto-object-object" aria-hidden="true">#</a> wx.navigateTo(Object object)</h2><p>保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 <code>wx.navigateBack</code> 可以返回到原页面。小程序中页面栈最多十层。</p><h3 id="navigateto-参数" tabindex="-1"><a class="header-anchor" href="#navigateto-参数" aria-hidden="true">#</a> navigateTo 参数</h3><p>Object object</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的应用内非 tabBar 的页面的路径, 路径后可以带参数。参数与路径之间使用 <code>?</code> 分隔，参数键与参数值用 <code>=</code> 相连，不同参数用 <code>&amp;</code> 分隔；如 <code>&#39;path?key=value&amp;key2=value2&#39;</code></td></tr><tr><td>events</td><td>Object</td><td>否</td><td>页面间通信接口，用于监听被打开页面发送到当前页面的数据。<br>基础库 2.7.3 开始支持</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数(调用成功、失败都会执行)</td></tr></tbody></table>',9),r={id:"navigatetoobject-success",tabindex:"-1"},d=(0,n._)("a",{class:"header-anchor",href:"#navigatetoobject-success","aria-hidden":"true"},"#",-1),c=(0,n.Uk)(" navigateToObject.success "),i=(0,n.uE)('<p>参数</p><p>Object res</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>eventChannel</td><td>EventChannel</td><td>和被打开页面进行通信</td></tr></tbody></table><p>示例代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx.navigateTo({\n  url: &#39;test?id=1&#39;,\n  events: {\n    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据\n    acceptDataFromOpenedPage(data) {\n      console.log(data)\n    },\n    someEvent(data) {\n      console.log(data)\n    }\n    ...\n  },\n  success: res =&gt; {\n    // 通过 eventChannel 向被打开页面传送数据\n    res.eventChannel.emit(&#39;acceptDataFromOpenerPage&#39;, { data: &#39;test&#39; });\n  }\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>//test.js\nPage({\n  onLoad(option) {\n    console.log(option.query);\n    const eventChannel = this.getOpenerEventChannel();\n\n    eventChannel.emit(&quot;acceptDataFromOpenedPage&quot;, { data: &quot;test&quot; });\n    eventChannel.emit(&quot;someEvent&quot;, { data: &quot;test&quot; });\n    // 监听a cceptDataFromOpenerPage 事件，获取上一页面通过 eventChannel 传送到当前页面的数据\n    eventChannel.on(&quot;acceptDataFromOpenerPage&quot;, (data) =&gt; {\n      console.log(data);\n    });\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="wx-navigateback-object-object" tabindex="-1"><a class="header-anchor" href="#wx-navigateback-object-object" aria-hidden="true">#</a> wx.navigateBack(Object object)</h2><p>关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages</code> 获取当前的页面栈，决定需要返回几层。</p><h3 id="navigateback-参数" tabindex="-1"><a class="header-anchor" href="#navigateback-参数" aria-hidden="true">#</a> navigateBack 参数</h3><p>Object object</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>delta</td><td>number</td><td>1</td><td>否</td><td>返回的页面数，如果 delta 大于现有页面数，则返回到首页。</td></tr><tr><td>success</td><td>function</td><td></td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td></td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td></td><td>否</td><td>接口调用结束的回调函数(调用成功、失败都会执行)</td></tr></tbody></table><p>示例代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 注意: 调用 navigateTo 跳转时，调用该方法的页面会被加入堆栈，而 redirectTo 方法则不会。见下方示例代码\n\n// 此处是A页面\nwx.navigateTo({ url: &quot;B?id=1&quot; });\n\n// 此处是B页面\nwx.navigateTo({ url: &quot;C?id=1&quot; });\n\n// 在C页面内 navigateBack，将返回A页面\nwx.navigateBack({ delta: 2 });\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="wx-redirectto-object-object" tabindex="-1"><a class="header-anchor" href="#wx-redirectto-object-object" aria-hidden="true">#</a> wx.redirectTo(Object object)</h2><p>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</p><h3 id="redirectto-参数" tabindex="-1"><a class="header-anchor" href="#redirectto-参数" aria-hidden="true">#</a> redirectTo 参数</h3><p>Object object</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的应用内非 tabBar 的页面的路径, 路径后可以带参数。参数与路径之间使用 <code>?</code> 分隔，参数键与参数值用 <code>=</code> 相连，不同参数用 <code>&amp;</code> 分隔；如 <code>&#39;path?key=value&amp;key2=value2&#39;</code></td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数(调用成功、失败都会执行)</td></tr></tbody></table><p>示例代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx.redirectTo({\n  url: &quot;test?id=1&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="wx-switchtab-object-object" tabindex="-1"><a class="header-anchor" href="#wx-switchtab-object-object" aria-hidden="true">#</a> wx.switchTab(Object object)</h2><p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</p><h3 id="switchtab-参数" tabindex="-1"><a class="header-anchor" href="#switchtab-参数" aria-hidden="true">#</a> switchTab 参数</h3><p>Object object</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td></td><td>是</td><td>需要跳转的 tabBar 页面的路径(需在 app.json 的 tabBar 字段定义的页面)，路径后不能带参数。</td></tr><tr><td>success</td><td>function</td><td></td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td></td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td></td><td>否</td><td>接口调用结束的回调函数(调用成功、失败都会执行)</td></tr></tbody></table><p>示例代码</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;tabBar&quot;: {\n    &quot;list&quot;: [\n      {\n        &quot;pagePath&quot;: &quot;index&quot;,\n        &quot;text&quot;: &quot;首页&quot;\n      },\n      {\n        &quot;pagePath&quot;: &quot;other&quot;,\n        &quot;text&quot;: &quot;其他&quot;\n      }\n    ]\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx.switchTab({\n  url: &quot;/index&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="wx-relaunch-object-object" tabindex="-1"><a class="header-anchor" href="#wx-relaunch-object-object" aria-hidden="true">#</a> wx.reLaunch(Object object)</h2><p>关闭所有页面，打开到应用内的某个页面</p><h3 id="relaunch-参数" tabindex="-1"><a class="header-anchor" href="#relaunch-参数" aria-hidden="true">#</a> reLaunch 参数</h3><p>Object object</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的应用内页面路径，路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&amp;分隔；如 <code>&#39;path?key=value&amp;key2=value2&#39;</code></td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数(调用成功、失败都会执行)</td></tr></tbody></table><p>示例代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx.reLaunch({\n  url: &quot;test?id=1&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// test\nPage({\n  onLoad(option) {\n    console.log(option.query);\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',36),l={},o=(0,a(82831).Z)(l,[["render",function(t,e){const a=(0,n.up)("Badge");return(0,n.wg)(),(0,n.iD)(n.HY,null,[s,(0,n._)("h3",r,[d,c,(0,n.Wm)(a,{text:"初学无需掌握",type:"grey"})]),i],64)}]])},82831:(t,e)=>{e.Z=(t,e)=>{const a=t.__vccOpts||t;for(const[t,n]of e)a[t]=n;return a}},88766:(t,e,a)=>{a.r(e),a.d(e,{data:()=>n});const n={key:"v-63cc474d",path:"/code/mini-app/guide/service/api/route.html",title:"路由 API",lang:"zh-CN",frontmatter:{icon:"router",category:["小程序"],summary:"路由 API 本页面介绍的一系列 API 都是和小程序路由(导航)相关的 API。 可以通过这些 API，自定义小程序的页面导航逻辑。 概要 最常用的两个: wx.navigateTo: 导航到一个新页面; wx.navigateBack: 返回上一层(上 n 层)页面; 不太常用的三个: wx.redirectTo: 将当前页面重定向到一个新的页面; wx",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/mini-app/guide/service/api/route.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"路由 API"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2021-03-21T10:12:13.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2021-03-21T10:12:13.000Z"}]]},excerpt:"",headers:[{level:2,title:"wx.navigateTo(Object object)",slug:"wx-navigateto-object-object",children:[{level:3,title:"navigateTo 参数",slug:"navigateto-参数",children:[]},{level:3,title:"navigateToObject.success",slug:"navigatetoobject-success",children:[]}]},{level:2,title:"wx.navigateBack(Object object)",slug:"wx-navigateback-object-object",children:[{level:3,title:"navigateBack 参数",slug:"navigateback-参数",children:[]}]},{level:2,title:"wx.redirectTo(Object object)",slug:"wx-redirectto-object-object",children:[{level:3,title:"redirectTo 参数",slug:"redirectto-参数",children:[]}]},{level:2,title:"wx.switchTab(Object object)",slug:"wx-switchtab-object-object",children:[{level:3,title:"switchTab 参数",slug:"switchtab-参数",children:[]}]},{level:2,title:"wx.reLaunch(Object object)",slug:"wx-relaunch-object-object",children:[{level:3,title:"reLaunch 参数",slug:"relaunch-参数",children:[]}]}],git:{createdTime:1604856934e3,updatedTime:1616321533e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:7}]},readingTime:{minutes:3.98,words:1193},filePathRelative:"code/mini-app/guide/service/api/route.md"}}}]);