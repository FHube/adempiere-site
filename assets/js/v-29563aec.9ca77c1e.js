"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6722],{10038:(e,a,n)=>{n.r(a),n.d(a,{default:()=>oe});var s=n(34086);const r=(0,s._)("p",null,"ECMAScript 6.0(以下简称 ES6)是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。",-1),l=(0,s.uE)('<h2 id="ecmascript-和-javascript-的关系" tabindex="-1"><a class="header-anchor" href="#ecmascript-和-javascript-的关系" aria-hidden="true">#</a> ECMAScript 和 JavaScript 的关系</h2><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系?</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件(ECMA-262)的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现(另外的 ECMAScript 方言还有 Jscript 和 ActionScript)。日常场合，这两个词是可以互换的。</p><h2 id="es6-与-ecmascript-2015-的关系" tabindex="-1"><a class="header-anchor" href="#es6-与-ecmascript-2015-的关系" aria-hidden="true">#</a> ES6 与 ECMAScript 2015 的关系</h2><p>ECMAScript 2015(简称 ES2015)这个词，也是经常可以看到的。它与 ES6 是什么关系呢?</p><p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p><p>但是，因为这个版本引入的语法功能太多，而且制定过程当中，还有很多组织和个人不断提交新功能。事情很快就变得清楚了，不可能在一个版本里面包括所有将要引入的功能。常规的做法是先发布 6.0 版，过一段时间再发 6.1 版，然后是 6.2 版、6.3 版等等。</p><p>但是，标准的制定者不想这样做。他们想让标准的升级成为常规流程: 任何人在任何时候，都可以向标准委员会提交新语法的提案，然后标准委员会每个月开一次会，评估这些提案是否可以接受，需要哪些改进。如果经过多次会议以后，一个提案足够成熟了，就可以正式进入标准了。这就是说，标准的版本升级成为了一个不断滚动的流程，每个月都会有变动。</p><p>标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。</p><p>ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》(简称 ES2015)。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》(简称 ES2016)如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小(只新增了数组实例的 <code>includes</code> 方法和指数运算符)，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p><h2 id="语法提案的批准流程" tabindex="-1"><a class="header-anchor" href="#语法提案的批准流程" aria-hidden="true">#</a> 语法提案的批准流程</h2><p>任何人都可以向标准委员会(又称 TC39 委员会)提案，要求修改语言标准。</p><p>一种新的语法从提案到变成正式标准，需要经历五个阶段。每个阶段的变动都需要由 TC39 委员会批准。</p><ul><li>Stage 0 - Strawman(展示阶段)</li><li>Stage 1 - Proposal(征求意见阶段)</li><li>Stage 2 - Draft(草案阶段)</li><li>Stage 3 - Candidate(候选人阶段)</li><li>Stage 4 - Finished(定案阶段)</li></ul>',17),i=(0,s.Uk)("一个提案只要能进入 Stage 2，就差不多肯定会包括在以后的正式标准里面。ECMAScript 当前的所有提案，可以在 TC39 的官方网站"),c={href:"https://github.com/tc39/ecma262",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("github.com/tc39/ecma262"),t=(0,s.Uk)("查看。"),b=(0,s.uE)('<p>本书的写作目标之一，是跟踪 ECMAScript 语言的最新进展，介绍 5.1 版本以后所有的新语法。对于那些明确或很有希望，将要列入标准的新语法，都将予以介绍。</p><h2 id="ecmascript-的历史" tabindex="-1"><a class="header-anchor" href="#ecmascript-的历史" aria-hidden="true">#</a> ECMAScript 的历史</h2><p>ES6 从开始制定到最后发布，整整用了 15 年。</p><p>前面提到，ECMAScript 1.0 是 1997 年发布的，接下来的两年，连续发布了 ECMAScript 2.0(1998 年 6 月)和 ECMAScript 3.0(1999 年 12 月)。3.0 版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 JavaScript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 JavaScript，其实就是在学 3.0 版的语法。</p><p>2000 年，ECMAScript 4.0 开始酝酿。这个版本最后没有通过，但是它的大部分内容被 ES6 继承了。因此，ES6 制定的起点其实是 2000 年。</p><p>为什么 ES4 没有通过呢? 因为这个版本太激进了，对 ES3 做了彻底升级，导致标准委员会的一些成员不愿意接受。ECMA 的第 39 号技术专家委员会(Technical Committee 39，简称 TC39)负责制订 ECMAScript 标准，成员包括 Microsoft、Mozilla、Google 等大公司。</p><p>2007 年 10 月，ECMAScript 4.0 版草案发布，本来预计次年 8 月发布正式版本。但是，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。</p><p>2008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激烈，ECMA 开会决定，中止 ECMAScript 4.0 的开发，将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony(和谐)。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。</p><p>2009 年 12 月，ECMAScript 5.0 版正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 委员会的总体考虑是，ES5 与 ES3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是 ES6，第六版发布以后，就指 ES7。TC39 的判断是，ES5 会在 2013 年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。</p><p>2011 年 6 月，ECMAScript 5.1 版发布，并且成为 ISO 国际标准(ISO/IEC 16262:2011)。</p><p>2013 年 3 月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。</p><p>2013 年 12 月，ECMAScript 6 草案发布。然后是 12 个月的讨论期，听取各方反馈。</p><p>2015 年 6 月，ECMAScript 6 正式通过，成为国际标准。从 2000 年算起，这时已经过去了 15 年。</p><h2 id="部署进度" tabindex="-1"><a class="header-anchor" href="#部署进度" aria-hidden="true">#</a> 部署进度</h2>',14),o=(0,s.Uk)("各大浏览器的最新版本，对 ES6 的支持可以查看"),u={href:"https://kangax.github.io/es5-compat-table/es6/",target:"_blank",rel:"noopener noreferrer"},d=(0,s.Uk)("kangax.github.io/es5-compat-table/es6/"),m=(0,s.Uk)("。随着时间的推移，支持度已经越来越高了，超过 90%的 ES6 语法特性都实现了。"),h=(0,s._)("p",null,"Node.js 是 JavaScript 的服务器运行环境(runtime)。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node.js 已经实现的 ES6 特性。",-1),g=(0,s._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,s._)("pre",{class:"language-bash"},[(0,s._)("code",null,"node --v8-options | grep harmony\n")]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br")])],-1),v=(0,s._)("p",null,"上面命令的输出结果，会因为版本的不同而有所不同。",-1),S=(0,s.Uk)("我写了一个工具 "),q={href:"https://github.com/ruanyf/es-checker",target:"_blank",rel:"noopener noreferrer"},E=(0,s.Uk)("ES-Checker"),j=(0,s.Uk)("，用来检查各种运行环境对 ES6 的支持情况。访问"),f={href:"https://ruanyf.github.io/es-checker",target:"_blank",rel:"noopener noreferrer"},x=(0,s.Uk)("ruanyf.github.io/es-checker"),C=(0,s.Uk)("，可以看到您的浏览器支持 ES6 的程度。运行下面的命令，可以查看您正在使用的 Node.js 环境对 ES6 的支持程度。"),k=(0,s.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ npm install -g es-checker\n$ es-checker\n\n=========================================\nPasses 24 feature Dectations\nYour runtime supports 57% of ECMAScript 6\n=========================================\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="babel-转码器" tabindex="-1"><a class="header-anchor" href="#babel-转码器" aria-hidden="true">#</a> Babel 转码器</h2>',2),y={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},M=(0,s.Uk)("Babel"),A=(0,s.Uk)(" 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。这意味着，您可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。"),_=(0,s.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 转码前\ninput.map((item) =&gt; item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的原始代码用了箭头函数，Babel 将其转为普通函数，就能在不支持箭头函数的 JavaScript 环境执行了。</p><h3 id="配置文件-babelrc" tabindex="-1"><a class="header-anchor" href="#配置文件-babelrc" aria-hidden="true">#</a> 配置文件 <code>.babelrc</code></h3><p>Babel 的配置文件是 <code>.babelrc</code>，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。</p><p>该文件用来设置转码规则和插件，基本格式如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  &quot;presets&quot;: [],\n  &quot;plugins&quot;: []\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>presets</code> 字段设定转码规则，官方提供以下的规则集，您可以根据需要安装。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code># 最新转码规则\n$ npm install --save-dev babel-preset-latest\n\n# react 转码规则\n$ npm install --save-dev babel-preset-react\n\n# 不同阶段语法提案的转码规则(共有4个阶段)，选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>然后，将这些规则加入 <code>.babelrc</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  {\n    &quot;presets&quot;: [\n      &quot;latest&quot;,\n      &quot;react&quot;,\n      &quot;stage-2&quot;\n    ],\n    &quot;plugins&quot;: []\n  }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注意，以下所有 Babel 工具和模块的使用，都必须先写好 <code>.babelrc</code>。</p><h3 id="命令行转码-babel-cli" tabindex="-1"><a class="header-anchor" href="#命令行转码-babel-cli" aria-hidden="true">#</a> 命令行转码 <code>babel-cli</code></h3><p>Babel 提供 <code>babel-cli</code> 工具，用于命令行转码。</p><p>它的安装命令如下。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install --global babel-cli\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>基本用法如下。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code># 转码结果输出到标准输出\n$ babel example.js\n\n# 转码结果写入一个文件\n# --out-file 或 -o 参数指定输出文件\n$ babel example.js --out-file compiled.js\n# 或者\n$ babel example.js -o compiled.js\n\n# 整个目录转码\n# --out-dir 或 -d 参数指定输出目录\n$ babel src --out-dir lib\n# 或者\n$ babel src -d lib\n\n# -s 参数生成source map文件\n$ babel src -d lib -s\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面代码是在全局环境下，进行 Babel 转码。这意味着，如果项目要运行，全局环境必须有 Babel，也就是说项目产生了对环境的依赖。另一方面，这样做也无法支持不同项目使用不同版本的 Babel。</p><p>一个解决办法是将 <code>babel-cli</code> 安装在项目之中。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code># 安装\n$ npm install --save-dev babel-cli\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后，改写 <code>package.json</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  // ...\n  &quot;devDependencies&quot;: {\n    &quot;babel-cli&quot;: &quot;^6.0.0&quot;\n  },\n  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;babel src -d lib&quot;\n  },\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>转码的时候，就执行下面的命令。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm run build\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="babel-node" tabindex="-1"><a class="header-anchor" href="#babel-node" aria-hidden="true">#</a> babel-node</h3><p><code>babel-cli</code> 工具自带一个 <code>babel-node</code> 命令，提供一个支持 ES6 的 REPL 环境。它支持 Node.js 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码。</p><p>它不用单独安装，而是随 <code>babel-cli</code> 一起安装。然后，执行 <code>babel-node</code> 就进入 REPL 环境。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ babel-node\n&gt; (x =&gt; x * 2)(1)\n2\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>babel-node</code> 命令可以直接运行 ES6 脚本。将上面的代码放入脚本文件 <code>es6.js</code>，然后直接运行。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ babel-node es6.js\n2\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>babel-node</code> 也可以安装在项目中。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install --save-dev babel-cli\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，改写 <code>package.json</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  &quot;scripts&quot;: {\n    &quot;script-name&quot;: &quot;babel-node script.js&quot;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，使用 <code>babel-node</code> 替代 <code>node</code>，这样 <code>script.js</code> 本身就不用做任何转码处理。</p><h3 id="babel-register" tabindex="-1"><a class="header-anchor" href="#babel-register" aria-hidden="true">#</a> babel-register</h3><p><code>babel-register</code> 模块改写 <code>require</code> 命令，为它加上一个钩子。此后，每当使用 <code>require</code> 加载 <code>.js</code>、<code>.jsx</code>、<code>.es</code> 和 <code>.es6</code> 后缀名的文件，就会先用 Babel 进行转码。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install --save-dev babel-register\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用时，必须首先加载 <code>babel-register</code>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>require(&quot;babel-register&quot;);\nrequire(&quot;./index.js&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后，就不需要手动对 <code>index.js</code> 转码了。</p><p>需要注意的是，<code>babel-register</code> 只会对 <code>require</code> 命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p><h3 id="babel-core" tabindex="-1"><a class="header-anchor" href="#babel-core" aria-hidden="true">#</a> babel-core</h3><p>如果某些代码需要调用 Babel 的 API 进行转码，就要使用 <code>babel-core</code> 模块。</p><p>安装命令如下。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install babel-core --save\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在项目中就可以调用 <code>babel-core</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var babel = require(&quot;babel-core&quot;);\n\n// 字符串转码\nbabel.transform(&quot;code();&quot;, options);\n// =&gt; { code, map, ast }\n\n// 文件转码(异步)\nbabel.transformFile(&quot;filename.js&quot;, options, function (err, result) {\n  result; // =&gt; { code, map, ast }\n});\n\n// 文件转码(同步)\nbabel.transformFileSync(&quot;filename.js&quot;, options);\n// =&gt; { code, map, ast }\n\n// Babel AST转码\nbabel.transformFromAst(ast, code, options);\n// =&gt; { code, map, ast }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',48),J=(0,s.Uk)("配置对象 "),U=(0,s._)("code",null,"options",-1),T=(0,s.Uk)("，可以参看官方文档"),B={href:"https://babeljs.io/docs/usage/options/",target:"_blank",rel:"noopener noreferrer"},w=(0,s.Uk)("https://babeljs.io/docs/usage/options/"),$=(0,s.Uk)("。"),N=(0,s.uE)('<p>下面是一个例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var es6Code = &quot;let x = n =&gt; n + 1&quot;;\nvar es5Code = require(&quot;babel-core&quot;).transform(es6Code, {\n  presets: [&quot;latest&quot;],\n}).code;\n// &#39;&quot;use strict&quot;;\\n\\nvar x = function x(n) {\\n  return n + 1;\\n};&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，<code>transform</code> 方法的第一个参数是一个字符串，表示需要被转换的 ES6 代码，第二个参数是转换的配置对象。</p><h3 id="babel-polyfill" tabindex="-1"><a class="header-anchor" href="#babel-polyfill" aria-hidden="true">#</a> babel-polyfill</h3><p>Babel 默认只转换新的 JavaScript 句法(syntax)，而不转换新的 API，比如 <code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Map</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code> 等全局对象，以及一些定义在全局对象上的方法(比如 <code>Object.assign</code>)都不会转码。</p><p>举例来说，ES6 在 <code>Array</code> 对象上新增了 <code>Array.from</code> 方法。Babel 就不会转码这个方法。如果想让这个方法运行，必须使用 <code>babel-polyfill</code>，为当前环境提供一个垫片。</p><p>安装命令如下。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install --save babel-polyfill\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在脚本头部，加入如下一行代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>import &quot;babel-polyfill&quot;;\n// 或者\nrequire(&quot;babel-polyfill&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',10),P=(0,s.Uk)("Babel 默认不转码的 API 非常多，详细清单可以查看 "),W=(0,s._)("code",null,"babel-plugin-transform-runtime",-1),I=(0,s.Uk)(" 模块的"),L={href:"https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-runtime/src/definitions.js",target:"_blank",rel:"noopener noreferrer"},F=(0,s.Uk)("definitions.js"),R=(0,s.Uk)("文件。"),O=(0,s._)("h3",{id:"浏览器环境",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#浏览器环境","aria-hidden":"true"},"#"),(0,s.Uk)(" 浏览器环境")],-1),D=(0,s.Uk)("Babel 也可以用于浏览器环境。但是，从 Babel 6.0 开始，不再直接提供浏览器版本，而是要用构建工具构建出来。如果您没有或不想使用构建工具，可以使用"),G={href:"https://github.com/Daniel15/babel-standalone",target:"_blank",rel:"noopener noreferrer"},Z=(0,s.Uk)("babel-standalone"),z=(0,s.Uk)("模块提供的浏览器版本，将其插入网页。"),H=(0,s.uE)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.4.4/babel.min.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/babel&quot;&gt;\n  // Your ES6 code\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。</p><p>下面是如何将代码打包成浏览器可以使用的脚本，以 <code>Babel</code> 配合 <code>Browserify</code> 为例。首先，安装 <code>babelify</code> 模块。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install --save-dev babelify babel-preset-latest\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，再用命令行转换 ES6 脚本。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>browserify script.js -o bundle.js \\\n  -t [ babelify --presets [ latest ] ]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面代码将 ES6 脚本 <code>script.js</code>，转为 <code>bundle.js</code>，浏览器直接加载后者就可以了。</p><p>在 <code>package.json</code> 设置下面的代码，就不用每次命令行都输入参数了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  &quot;browserify&quot;: {\n    &quot;transform&quot;: [[&quot;babelify&quot;, { &quot;presets&quot;: [&quot;latest&quot;] }]]\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="在线转换" tabindex="-1"><a class="header-anchor" href="#在线转换" aria-hidden="true">#</a> 在线转换</h3>',10),Y=(0,s.Uk)("Babel 提供一个"),K={href:"https://babeljs.io/repl/",target:"_blank",rel:"noopener noreferrer"},Q=(0,s.Uk)("REPL 在线编译器"),V=(0,s.Uk)("，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。"),X=(0,s.uE)('<h3 id="与其他工具的配合" tabindex="-1"><a class="header-anchor" href="#与其他工具的配合" aria-hidden="true">#</a> 与其他工具的配合</h3><p>许多工具需要 Babel 进行前置转码，这里举两个例子: ESLint 和 Mocha。</p><p>ESLint 用于静态检查代码的语法和风格，安装命令如下。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install --save-dev eslint babel-eslint\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在项目根目录下，新建一个配置文件 <code>.eslintrc</code>，在其中加入 <code>parser</code> 字段。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  &quot;parser&quot;: &quot;babel-eslint&quot;,\n  &quot;rules&quot;: {\n    ...\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>再在 <code>package.json</code> 之中，加入相应的 <code>scripts</code> 脚本。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  {\n    &quot;name&quot;: &quot;my-module&quot;,\n    &quot;scripts&quot;: {\n      &quot;lint&quot;: &quot;eslint my-files.js&quot;\n    },\n    &quot;devDependencies&quot;: {\n      &quot;babel-eslint&quot;: &quot;...&quot;,\n      &quot;eslint&quot;: &quot;...&quot;\n    }\n  }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Mocha 则是一个测试框架，如果需要执行使用 ES6 语法的测试脚本，可以修改 <code>package.json</code> 的 <code>scripts.test</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;scripts&quot;: {\n  &quot;test&quot;: &quot;mocha --ui qunit --compilers js:babel-core/register&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面命令中，<code>--compilers</code> 参数指定脚本的转码器，规定后缀名为 <code>js</code> 的文件，都需要使用 <code>babel-core/register</code> 先转码。</p><h2 id="traceur-转码器" tabindex="-1"><a class="header-anchor" href="#traceur-转码器" aria-hidden="true">#</a> Traceur 转码器</h2>',12),ee=(0,s.Uk)("Google 公司的"),ae={href:"https://github.com/google/traceur-compiler",target:"_blank",rel:"noopener noreferrer"},ne=(0,s.Uk)("Traceur"),se=(0,s.Uk)("转码器，也可以将 ES6 代码转为 ES5 代码。"),re=(0,s.uE)('<h3 id="直接插入网页" tabindex="-1"><a class="header-anchor" href="#直接插入网页" aria-hidden="true">#</a> 直接插入网页</h3><p>Traceur 允许将 ES6 代码直接插入网页。首先，必须在网页头部加载 Traceur 库文件。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/traceur.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/BrowserSystem.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://google.github.io/traceur-compiler/src/bootstrap.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;module&quot;&gt;\n  import &quot;./Greeter.js&quot;;\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，一共有 4 个 <code>script</code> 标签。第一个是加载 Traceur 的库文件，第二个和第三个是将这个库文件用于浏览器环境，第四个则是加载用户脚本，这个脚本里面可以使用 ES6 代码。</p><p>注意，第四个 <code>script</code> 标签的 <code>type</code> 属性的值是 <code>module</code>，而不是 <code>text/javascript</code>。这是 Traceur 编译器识别 ES6 代码的标志，编译器会自动将所有 <code>type=module</code> 的代码编译为 ES5，然后再交给浏览器执行。</p><p>除了引用外部 ES6 脚本，也可以直接在网页中放置 ES6 代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&lt;script type=&quot;module&quot;&gt;\n  class Calc {\n    constructor() {\n      console.log(&#39;Calc constructor&#39;);\n    }\n    add(a, b) {\n      return a + b;\n    }\n  }\n\n  var c = new Calc();\n  console.log(c.add(4,5));\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>正常情况下，上面代码会在控制台打印出 <code>9</code>。</p><p>如果想对 Traceur 的行为有精确控制，可以采用下面参数配置的写法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&lt;script&gt;\n  // Create the System object\n  window.System = new traceur.runtime.BrowserTraceurLoader();\n  // Set some experimental options\n  var metadata = {\n    traceurOptions: {\n      experimental: true,\n      properTailCalls: true,\n      symbols: true,\n      arrayComprehension: true,\n      asyncFunctions: true,\n      asyncGenerators: exponentiation,\n      forOn: true,\n      generatorComprehension: true\n    }\n  };\n  // Load your module\n  System.import(&#39;./myModule.js&#39;, {metadata: metadata}).catch(function(ex) {\n    console.error(&#39;Import failed&#39;, ex.stack || ex);\n  });\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面代码中，首先生成 Traceur 的全局对象 <code>window.System</code>，然后 <code>System.import</code> 方法可以用来加载 ES6。加载的时候，需要传入一个配置对象 <code>metadata</code>，该对象的 <code>traceurOptions</code> 属性可以配置支持 ES6 功能。如果设为 <code>experimental: true</code>，就表示除了 ES6 以外，还支持一些实验性的新功能。</p><h3 id="es5-在线转换" tabindex="-1"><a class="header-anchor" href="#es5-在线转换" aria-hidden="true">#</a> ES5 在线转换</h3>',12),le=(0,s.Uk)("Traceur 也提供一个"),ie={href:"http://google.github.io/traceur-compiler/demo/repl.html",target:"_blank",rel:"noopener noreferrer"},ce=(0,s.Uk)("在线编译器"),pe=(0,s.Uk)("，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。"),te=(0,s.uE)('<p>上面的例子转为 ES5 代码运行，就是下面这个样子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/traceur.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/BrowserSystem.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://google.github.io/traceur-compiler/src/bootstrap.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n$traceurRuntime.ModuleStore.getAnonymousModule(function() {\n  &quot;use strict&quot;;\n\n  var Calc = function Calc() {\n    console.log(&#39;Calc constructor&#39;);\n  };\n\n  ($traceurRuntime.createClass)(Calc, {add: function(a, b) {\n    return a + b;\n  }}, {});\n\n  var c = new Calc();\n  console.log(c.add(4, 5));\n  return {};\n});\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="命令行转换" tabindex="-1"><a class="header-anchor" href="#命令行转换" aria-hidden="true">#</a> 命令行转换</h3><p>作为命令行工具使用时，Traceur 是一个 Node.js 的模块，首先需要用 npm 安装。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm install -g traceur\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装成功后，就可以在命令行下使用 Traceur 了。</p><p>Traceur 直接运行 ES6 脚本文件，会在标准输出显示运行结果，以前面的 <code>calc.js</code> 为例。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ traceur calc.js\nCalc constructor\n9\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要将 ES6 脚本转为 ES5 保存，要采用下面的写法。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>traceur --script calc.es6.js --out calc.es5.js\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码的 <code>--script</code> 选项表示指定输入文件，<code>--out</code> 选项表示指定输出文件。</p><p>为了防止有些特性编译不成功，最好加上 <code>--experimental</code> 选项。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>traceur --script calc.es6.js --out calc.es5.js --experimental\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令行下转换生成的文件，就可以直接放到浏览器中运行。</p><h3 id="node-js-环境的用法" tabindex="-1"><a class="header-anchor" href="#node-js-环境的用法" aria-hidden="true">#</a> Node.js 环境的用法</h3><p>Traceur 的 Node.js 用法如下(假定已安装 <code>traceur</code> 模块)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var traceur = require(&quot;traceur&quot;);\nvar fs = require(&quot;fs&quot;);\n\n// 将 ES6 脚本转为字符串\nvar contents = fs.readFileSync(&quot;es6-file.js&quot;).toString();\n\nvar result = traceur.compile(contents, {\n  filename: &quot;es6-file.js&quot;,\n  sourceMap: true,\n  // 其他设置\n  modules: &quot;commonjs&quot;,\n});\n\nif (result.error) throw result.error;\n\n// result 对象的 js 属性就是转换后的 ES5 代码\nfs.writeFileSync(&quot;out.js&quot;, result.js);\n// sourceMap 属性对应 map 文件\nfs.writeFileSync(&quot;out.js.map&quot;, result.sourceMap);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',17),be={},oe=(0,n(82831).Z)(be,[["render",function(e,a){const n=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s.kq)(" more "),l,(0,s._)("p",null,[i,(0,s._)("a",c,[p,(0,s.Wm)(n)]),t]),b,(0,s._)("p",null,[o,(0,s._)("a",u,[d,(0,s.Wm)(n)]),m]),h,g,v,(0,s._)("p",null,[S,(0,s._)("a",q,[E,(0,s.Wm)(n)]),j,(0,s._)("a",f,[x,(0,s.Wm)(n)]),C]),k,(0,s._)("p",null,[(0,s._)("a",y,[M,(0,s.Wm)(n)]),A]),_,(0,s._)("p",null,[J,U,T,(0,s._)("a",B,[w,(0,s.Wm)(n)]),$]),N,(0,s._)("p",null,[P,W,I,(0,s._)("a",L,[F,(0,s.Wm)(n)]),R]),O,(0,s._)("p",null,[D,(0,s._)("a",G,[Z,(0,s.Wm)(n)]),z]),H,(0,s._)("p",null,[Y,(0,s._)("a",K,[Q,(0,s.Wm)(n)]),V]),X,(0,s._)("p",null,[ee,(0,s._)("a",ae,[ne,(0,s.Wm)(n)]),se]),re,(0,s._)("p",null,[le,(0,s._)("a",ie,[ce,(0,s.Wm)(n)]),pe]),te],64)}]])},82831:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}},3404:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-29563aec",path:"/code/language/js/es6/intro.html",title:"ES6 简介",lang:"zh-CN",frontmatter:{title:"ES6 简介",icon:"info",author:"阮一峰",date:"2019-10-20T00:00:00.000Z",category:["JavaScript"],copyright:'此部分博客采用 <a href="http://creativecommons.org/licenses/by-nc/4.0/" rel="noopener noreferrer" target="_blank">“保持署名—非商用”创意共享4.0许可证</a>',summary:"ECMAScript 6.0(以下简称 ES6)是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/es6/intro.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"ES6 简介"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"阮一峰"}],["meta",{property:"article:published_time",content:"2019-10-20T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:"<p>ECMAScript 6.0(以下简称 ES6)是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>\n",headers:[{level:2,title:"ECMAScript 和 JavaScript 的关系",slug:"ecmascript-和-javascript-的关系",children:[]},{level:2,title:"ES6 与 ECMAScript 2015 的关系",slug:"es6-与-ecmascript-2015-的关系",children:[]},{level:2,title:"语法提案的批准流程",slug:"语法提案的批准流程",children:[]},{level:2,title:"ECMAScript 的历史",slug:"ecmascript-的历史",children:[]},{level:2,title:"部署进度",slug:"部署进度",children:[]},{level:2,title:"Babel 转码器",slug:"babel-转码器",children:[{level:3,title:"配置文件 .babelrc",slug:"配置文件-babelrc",children:[]},{level:3,title:"命令行转码 babel-cli",slug:"命令行转码-babel-cli",children:[]},{level:3,title:"babel-node",slug:"babel-node",children:[]},{level:3,title:"babel-register",slug:"babel-register",children:[]},{level:3,title:"babel-core",slug:"babel-core",children:[]},{level:3,title:"babel-polyfill",slug:"babel-polyfill",children:[]},{level:3,title:"浏览器环境",slug:"浏览器环境",children:[]},{level:3,title:"在线转换",slug:"在线转换",children:[]},{level:3,title:"与其他工具的配合",slug:"与其他工具的配合",children:[]}]},{level:2,title:"Traceur 转码器",slug:"traceur-转码器",children:[{level:3,title:"直接插入网页",slug:"直接插入网页",children:[]},{level:3,title:"ES5 在线转换",slug:"es5-在线转换",children:[]},{level:3,title:"命令行转换",slug:"命令行转换",children:[]},{level:3,title:"Node.js 环境的用法",slug:"node-js-环境的用法",children:[]}]}],git:{createdTime:1591204114e3,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:8}]},readingTime:{minutes:16.49,words:4947},filePathRelative:"code/language/js/es6/intro.md"}}}]);