"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[90014],{4872:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});var s=t(34086);const a=(0,s._)("p",null,"用 JavaScript 操作表单和操作 DOM 是类似的，因为表单本身也是 DOM 树。",-1),l=(0,s._)("p",null,"不过表单的输入框、下拉框等可以接收用户输入，所以用 JavaScript 来操作表单，可以获得用户输入的内容，或者对一个输入框设置新的内容。",-1),o=(0,s.uE)('<p>HTML 表单的输入控件主要有以下几种:</p><ul><li><p>文本框，对应的 <code>&lt;input type=&quot;text&quot;&gt;</code>，用于输入文本；</p></li><li><p>口令框，对应的 <code>&lt;input type=&quot;password&quot;&gt;</code>，用于输入口令；</p></li><li><p>单选框，对应的 <code>&lt;input type=&quot;radio&quot;&gt;</code>，用于选择一项；</p></li><li><p>复选框，对应的 <code>&lt;input type=&quot;checkbox&quot;&gt;</code>，用于选择多项；</p></li><li><p>下拉框，对应的 <code>&lt;select&gt;</code>，用于选择一项；</p></li><li><p>隐藏文本，对应的 <code>&lt;input type=&quot;hidden&quot;&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器。</p></li></ul><h2 id="获取值" tabindex="-1"><a class="header-anchor" href="#获取值" aria-hidden="true">#</a> 获取值</h2><p>如果我们获得了一个 <code>&lt;input&gt;</code> 节点的引用，就可以直接调用 <code>value</code> 获得对应的用户输入值:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;input type=&quot;text&quot; id=&quot;email&quot; /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const input = document.querySelector(&quot;#email&quot;);\n\ninput.value; // &#39;用户输入的值&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这种方式可以应用于 <code>text</code>、<code>password</code>、<code>hidden</code> 以及 <code>select</code>。但是，对于单选框和复选框，<code>value</code> 属性返回的永远是 HTML 预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用 <code>checked</code> 判断:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;weekday&quot; id=&quot;monday&quot; value=&quot;1&quot; /&gt;Monday&lt;/label&gt;\n&lt;label\n  &gt;&lt;input type=&quot;radio&quot; name=&quot;weekday&quot; id=&quot;tuesday&quot; value=&quot;2&quot; /&gt;Tuesday&lt;/label\n&gt;```\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const mon = document.querySelector(&quot;#monday&quot;);\nconst tue = document.querySelector(&quot;#tuesday&quot;);\nmon.value; // &#39;1&#39;\ntue.value; // &#39;2&#39;\nmon.checked; // true 或者 false\ntue.checked; // true 或者 false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="设置值" tabindex="-1"><a class="header-anchor" href="#设置值" aria-hidden="true">#</a> 设置值</h2><p>设置值和获取值类似，对于 text、password、hidden 以及 select，直接设置 value 就可以:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;input type=&quot;text&quot; id=&quot;email&quot; /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const input = document.querySelector(&quot;#email&quot;);\ninput.value = &quot;test@example.com&quot;; // 文本框的内容已更新\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对于单选框和复选框，设置 <code>checked</code> 为 <code>true</code> 或 <code>false</code> 即可。</p><h3 id="html5-控件" tabindex="-1"><a class="header-anchor" href="#html5-控件" aria-hidden="true">#</a> HTML5 控件</h3><p>HTML5 新增了大量标准控件，常用的包括 <code>date</code>、<code>datetime</code>、<code>datetime-local</code>、<code>color</code> 等，它们都使用 <code>&lt;input&gt;</code> 标签:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;input type=&quot;date&quot; value=&quot;2015-07-01&quot; /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;input type=&quot;datetime-local&quot; value=&quot;2015-07-01T02:03:04&quot; /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;input type=&quot;color&quot; value=&quot;#ff0000&quot; /&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>不支持 HTML5 的浏览器无法识别新的控件，会把它们当做 <code>type=&quot;text&quot;</code> 来显示。支持 HTML5 的浏览器将获得格式化的字符串。例如，<code>type=&quot;date&quot;</code> 类型的 input 的 <code>value</code> 将保证是一个有效的 <code>YYYY-MM-DD</code> 格式的日期，或者空字符串。</p></div><h2 id="提交表单" tabindex="-1"><a class="header-anchor" href="#提交表单" aria-hidden="true">#</a> 提交表单</h2><p>最后，JavaScript 可以以两种方式来处理表单的提交 (Ajax 方式在后面章节介绍)。</p><p>方式一是通过 <code>&lt;form&gt;</code> 元素的 <code>submit()</code> 方法提交一个表单，例如，响应一个 <code>&lt;button&gt;</code> 的 click 事件，在 JavaScript 代码中提交表单:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML --&gt;\n&lt;form id=&quot;test-form&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;test&quot; /&gt;\n  &lt;button type=&quot;button&quot; onclick=&quot;doSubmitForm()&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  function doSubmitForm() {\n    const form = document.querySelector(&quot;#test-form&quot;);\n    // 可以在此修改form的input...\n    // 提交form:\n    form.submit();\n  }\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这种方式的缺点是扰乱了浏览器对 <code>form</code> 的正常提交。浏览器默认点击 <code>&lt;button type=&quot;submit&quot;&gt;</code> 时提交表单，或者用户在最后一个输入框按回车键。因此，第二种方式是响应 <code>&lt;form&gt;</code> 本身的 <code>onsubmit</code> 事件，在提交 <code>form</code> 时作修改:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML --&gt;\n&lt;form id=&quot;test-form&quot; onsubmit=&quot;return checkForm()&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;test&quot; /&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  function checkForm() {\n    const form = document.querySelector(&quot;#test-form&quot;);\n    // 可以在此修改 form 的 input...\n    // 继续下一步:\n    return true;\n  }\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意要 <code>return true</code> 来告诉浏览器继续提交，如果 <code>return false</code>，浏览器将不会继续提交 form，这种情况通常对应用户输入有误，提示用户错误信息后终止提交 form。</p><p>在检查和修改 <code>&lt;input&gt;</code> 时，要充分利用 <code>&lt;input type=&quot;hidden&quot;&gt;</code> 来传递数据。</p><p>例如，很多登录表单希望用户输入用户名和口令，但是，安全考虑，提交表单时不传输明文口令，而是口令的 MD5。普通 JavaScript 开发人员会直接修改</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML --&gt;\n&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;\n  &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; /&gt;\n  &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; /&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  function checkForm() {\n    const pwd = document.querySelector(&quot;#password&quot;);\n    // 把用户输入的明文变为MD5:\n    pwd.value = toMD5(pwd.value);\n    // 继续下一步:\n    return true;\n  }\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这个做法看上去没啥问题，但用户输入了口令提交时，口令框的显示会突然从几个<em>变成 32 个</em>(因为 MD5 有 32 个字符)。</p><p>要想不改变用户的输入，可以利用 <code>&lt;input type=&quot;hidden&quot;&gt;</code> 实现:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML --&gt;\n&lt;form id=&quot;login-form&quot; method=&quot;post&quot; onsubmit=&quot;return checkForm()&quot;&gt;\n  &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; /&gt;\n  &lt;input type=&quot;password&quot; id=&quot;input-password&quot; /&gt;\n  &lt;input type=&quot;hidden&quot; id=&quot;md5-password&quot; name=&quot;password&quot; /&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  function checkForm() {\n    const input_pwd = document.querySelector(&quot;#input-password&quot;);\n    const md5_pwd = document.querySelector(&quot;#md5-password&quot;);\n    // 把用户输入的明文变为MD5:\n    md5_pwd.value = toMD5(input_pwd.value);\n    // 继续下一步:\n    return true;\n  }\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>id</code> 为 <code>md5-password</code> 的 <code>&lt;input&gt;</code> 标记了 <code>name=&quot;password&quot;</code>，而用户输入的 <code>id</code> 为 <code>input-password</code> 的 <code>&lt;input&gt;</code> 没有 <code>name</code> 属性。没有 <code>name</code> 属性的 <code>&lt;input&gt;</code> 的数据不会被提交。</p></div>',34),u={},r=(0,t(82831).Z)(u,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[a,l,(0,s.kq)(" more "),o],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,s]of n)t[e]=s;return t}},8676:(e,n,t)=>{t.r(n),t.d(n,{data:()=>s});const s={key:"v-3c952b96",path:"/code/language/js/browser/form.html",title:"操作表单",lang:"zh-CN",frontmatter:{title:"操作表单",icon:"form",date:"2019-10-17T00:00:00.000Z",category:["JavaScript"],summary:"用 JavaScript 操作表单和操作 DOM 是类似的，因为表单本身也是 DOM 树。\n不过表单的输入框、下拉框等可以接收用户输入，所以用 JavaScript 来操作表单，可以获得用户输入的内容，或者对一个输入框设置新的内容。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/browser/form.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"操作表单"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-17T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>用 JavaScript 操作表单和操作 DOM 是类似的，因为表单本身也是 DOM 树。</p>\n<p>不过表单的输入框、下拉框等可以接收用户输入，所以用 JavaScript 来操作表单，可以获得用户输入的内容，或者对一个输入框设置新的内容。</p>\n",headers:[{level:2,title:"获取值",slug:"获取值",children:[]},{level:2,title:"设置值",slug:"设置值",children:[{level:3,title:"HTML5 控件",slug:"html5-控件",children:[]}]},{level:2,title:"提交表单",slug:"提交表单",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:3.95,words:1185},filePathRelative:"code/language/js/browser/form.md"}}}]);