"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[49753],{39954:(e,n,a)=>{a.r(n),a.d(n,{default:()=>s});const t=(0,a(34086).uE)('<p>我们已经知道，可以直接作用于 for 循环的数据类型有以下几种:</p><p>一类是集合数据类型，如 list、tuple、dict、set、str 等；</p><p>一类是 generator，包括生成器和带 yield 的 generator function。</p><p>这些可以直接作用于 for 循环的对象统称为可迭代对象: Iterable。</p><p>可以使用 isinstance()判断一个对象是否是 Iterable 对象:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; from collections.abc import Iterable\n&gt;&gt;&gt; isinstance([], Iterable)\nTrue\n&gt;&gt;&gt; isinstance({}, Iterable)\nTrue\n&gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterable)\nTrue\n&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)\nTrue\n&gt;&gt;&gt; isinstance(100, Iterable)\nFalse\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>而生成器不但可以作用于 for 循环，还可以被 <code>next()</code> 函数不断调用并返回下一个值，直到最后抛出 <code>StopIteration</code> 错误表示无法继续返回下一个值了。</p><p>可以被 <code>next()</code> 函数调用并不断返回下一个值的对象称为迭代器: <code>Iterator</code>。</p><p>可以使用 <code>isinstance()</code> 判断一个对象是否是 <code>Iterator</code> 对象:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; from collections.abc import Iterator\n&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)\nTrue\n&gt;&gt;&gt; isinstance([], Iterator)\nFalse\n&gt;&gt;&gt; isinstance({}, Iterator)\nFalse\n&gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterator)\nFalse\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>生成器都是 <code>Iterator</code> 对象，但 list、dict、str 虽然是 <code>Iterable</code>，却不是 <code>Iterator</code>。</p><p>把 list、dict、str 等 <code>Iterable</code> 变成 <code>Iterator</code> 可以使用 <code>iter()</code> 函数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; isinstance(iter([]), Iterator)\nTrue\n&gt;&gt;&gt; isinstance(iter(&#39;abc&#39;), Iterator)\nTrue\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>您可能会问，为什么 list、dict、str 等数据类型不是 <code>Iterator</code>?</p><p>这是因为 Python 的 Iterator 对象表示的是一个数据流，Iterator 对象可以被 <code>next()</code> 函数调用并不断返回下一个数据，直到没有数据时抛出 StopIteration 错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过 next()函数实现按需计算下一个数据，所以 Iterator 的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>Iterator 甚至可以表示一个无限大的数据流，例如全体自然数。而使用 list 是永远不可能存储全体自然数的。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>凡是可作用于 for 循环的对象都是 <code>Iterable</code> 类型；</p><p>凡是可作用于 <code>next()</code> 函数的对象都是 <code>Iterator</code> 类型，它们表示一个惰性计算的序列；</p><p>集合数据类型如 list、dict、str 等是 <code>Iterable</code> 但不是 <code>Iterator</code>，不过可以通过 <code>iter()</code> 函数获得一个 <code>Iterator</code> 对象。</p><p>Python 的 for 循环本质上就是通过不断调用 <code>next()</code> 函数实现的，例如:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>for x in [1, 2, 3, 4, 5]:\n    pass\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>实际上完全等价于:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code># 首先获得Iterator对象\n\nit = iter([1, 2, 3, 4, 5])\n\n# 循环\n\nwhile True:\n    try:\n        # 获得下一个值:\n        x = next(it)\n    except StopIteration:\n        # 遇到StopIteration就退出循环\n        break\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',24),r={},s=(0,a(82831).Z)(r,[["render",function(e,n){return t}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,t]of n)a[e]=t;return a}},43066:(e,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-002015d9",path:"/code/language/python/advance/iterator.html",title:"迭代器",lang:"zh-CN",frontmatter:{title:"迭代器",icon:"refresh",author:"廖雪峰",date:"2020-05-29T00:00:00.000Z",category:["Python"],summary:"我们已经知道，可以直接作用于 for 循环的数据类型有以下几种: 一类是集合数据类型，如 list、tuple、dict、set、str 等； 一类是 generator，包括生成器和带 yield 的 generator function。 这些可以直接作用于 for 循环的对象统称为可迭代对象: Iterable。 可以使用 isinstance()判断",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/advance/iterator.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"迭代器"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-29T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.19,words:658},filePathRelative:"code/language/python/advance/iterator.md"}}}]);