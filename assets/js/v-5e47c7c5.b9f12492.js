"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[17817],{31826:(n,e,a)=>{a.r(e),a.d(e,{default:()=>t});var s=a(34086);const r=(0,s._)("p",null,"Dart 语言旨在让其他语言的编码人员易于学习，但具有一些独特功能。",-1),l=(0,s.uE)('<h2 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h2><p>要将表达式的值放在字符串中，请使用 <code>${expression}</code>。如果表达式是标识符，则可以省略 <code>{}</code>。</p><p>以下是一些使用字符串插值的示例:</p><table><thead><tr><th>串</th><th>结果</th></tr></thead><tbody><tr><td><code>&#39;\\${3 + 2}&#39;</code></td><td><code>&#39;5&#39;</code></td></tr><tr><td><code>&#39;\\${&quot;word&quot;.toUpperCase()}&#39;</code></td><td><code>&#39;WORD&#39;</code></td></tr><tr><td><code>&#39;$myObject&#39;</code></td><td><code>myObject.toString()</code> 的值</td></tr></tbody></table><h2 id="空感知运算符" tabindex="-1"><a class="header-anchor" href="#空感知运算符" aria-hidden="true">#</a> 空感知运算符</h2><p>Dart 提供了一些方便的运算符来处理可能为 null 的值。一种是 <code>??=</code> 赋值运算符，它仅在该变量当前为 null 时才为该变量赋值:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>int a; // The initial value of a is null.\na ??= 3;\nprint(a); // &lt;-- Prints 3.\n\na ??= 5;\nprint(a); // &lt;-- Still prints 3.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>另一个可识别空值的运算符是 <code>??</code>，只有左侧表达式的值为 null，它将求值并在其右侧返回表达式，否则它将在返回左侧表达式:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>print(1 ?? 3); // &lt;-- Prints 1.\nprint(null ?? 12); // &lt;-- Prints 12.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="受控的属性访问" tabindex="-1"><a class="header-anchor" href="#受控的属性访问" aria-hidden="true">#</a> 受控的属性访问</h2><p>为了保护对可能为空的对象的属性或方法的访问，请在点 <code>.</code> 之前添加问号 <code>?</code>:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>myObject?.someProperty\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的代码等效于以下代码:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>(myObject != null) ? myObject.someProperty : null\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>您可以在单个表达式中将多个 <code>?.</code> 链接在一起:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>myObject?.someProperty?.someMethod()\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果 <code>myObject</code> 或 <code>myObject.someProperty</code> 为 null，则代码返回 null(并且从不调用 <code>someMethod()</code>) 。</p><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>Dart 内置了对列表，地图和集合的支持。您可以使用文字创建它们:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>final aListOfStrings = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];\nfinal aSetOfStrings = {&#39;one&#39;, &#39;two&#39;, &#39;three&#39;};\nfinal aMapOfStringsToInts = {\n  &#39;one&#39;: 1,\n  &#39;two&#39;: 2,\n  &#39;three&#39;: 3,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Dart 的类型推断可以为您为这些变量分配类型。在这种情况下，推断的类型 <code>List&lt;String&gt;</code>， <code>Set&lt;String&gt;</code> 和 <code>Map&lt;String, int&gt;</code>。</p><p>或者您可以自己指定类型:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>final aListOfInts = &lt;int&gt;[];\nfinal aSetOfInts = &lt;int&gt;{};\nfinal aMapOfIntToDouble = &lt;int, double&gt;{};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当您想使用子类型的内容初始化列表但仍然希望列表为 <code>List&lt;BaseType&gt;</code> 时，指定类型很方便:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>final aListOfBaseType = &lt;BaseType&gt;[SubType(), SubType()];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="箭头语法" tabindex="-1"><a class="header-anchor" href="#箭头语法" aria-hidden="true">#</a> 箭头语法</h2><p>您可能已经在 Dart 代码中看到了该符号 <code>=&gt;</code>。此箭头语法是一种定义函数的方法，该函数将在其右侧执行表达式并返回其值。</p><p>例如，考虑这个对 <code>List</code> 类的 <code>any()</code> 方法的调用:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>bool hasEmpty = aListOfStrings.any((s) {\n  return s.isEmpty;\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这是编写该代码的一种更简单的方法:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>bool hasEmpty = aListOfStrings.any((s) =&gt; s.isEmpty);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="级联" tabindex="-1"><a class="header-anchor" href="#级联" aria-hidden="true">#</a> 级联</h2><p>要对同一对象执行一系列操作，请使用级联(<code>..</code>)。我们都看到过这样的表达式:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>myObject.someMethod()\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它调用 <code>myObject</code> 上的 <code>someMethod()</code> ，和表达的结果是的返回值 <code>someMethod()</code>。</p><p>这是带有级联的相同表达式:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>myObject..someMethod()\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>尽管它仍然调用 <code>myObject</code> 上的 <code>someMethod()</code> ，但表达式的结果不是返回值，而是对 <code>myObject</code> 的引用。使用级联，可以将原本需要单独语句的操作链接在一起。例如，考虑以下代码:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>var button = querySelector(&#39;#confirm&#39;);\nbutton.text = &#39;Confirm&#39;;\nbutton.classes.add(&#39;important&#39;);\nbutton.onClick.listen((e) =&gt; window.alert(&#39;Confirmed!&#39;));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用层叠时，代码变得更短，并且您不需要 <code>button</code> 变量:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>querySelector(&#39;#confirm&#39;)\n..text = &#39;Confirm&#39;\n..classes.add(&#39;important&#39;)\n..onClick.listen((e) =&gt; window.alert(&#39;Confirmed!&#39;));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="getter-和-setter" tabindex="-1"><a class="header-anchor" href="#getter-和-setter" aria-hidden="true">#</a> Getter 和 Setter</h2><p>只要您对一个字段进行特殊的控制要求，就可以定义 getter 和 setter。</p><p>例如，您可以确保属性的值有效:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class MyClass {\n  int _aProperty = 0;\n\n  int get aProperty =&gt; _aProperty;\n\n  set aProperty(int value) {\n    if (value &gt;= 0) {\n      _aProperty = value;\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>您还可以使用 getter 来定义计算属性:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class MyClass {\n  List&lt;int&gt; _values = [];\n\n  void addValue(int value) {\n    _values.add(value);\n  }\n\n  // A computed property.\n  int get count {\n    return _values.length;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="可选的位置参数" tabindex="-1"><a class="header-anchor" href="#可选的位置参数" aria-hidden="true">#</a> 可选的位置参数</h2><p>Dart 具有两种函数参数: 基于位置的和具名的。位置参数是您可能熟悉的一种:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>int sumUp(int a, int b, int c) {\n  return a + b + c;\n}\n// ···\n  int total = sumUp(1, 2, 3);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用 Dart，您可以将这些位置参数包装在方括号中，以使其成为可选参数:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>int sumUpToFive(int a, [int b, int c, int d, int e]) {\n  int sum = a;\n  if (b != null) sum += b;\n  if (c != null) sum += c;\n  if (d != null) sum += d;\n  if (e != null) sum += e;\n  return sum;\n}\n// ···\n  int total = sumUpToFive(1, 2);\n  int otherTotal = sumUpToFive(1, 2, 3, 4, 5);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可选的位置参数始终位于函数的参数列表的最后。除非您提供另一个默认值，否则它们的默认值为 null:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>int sumUpToFive(int a, [int b = 2, int c = 3, int d = 4, int e = 5]) {\n// ···\n}\n// ···\n  int newTotal = sumUpToFive(1);\n  print(newTotal); // &lt;-- prints 15\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="可选的命名参数" tabindex="-1"><a class="header-anchor" href="#可选的命名参数" aria-hidden="true">#</a> 可选的命名参数</h2><p>使用大括号语法，可以定义具有名称的可选参数。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>void printName(String firstName, String lastName, {String suffix}) {\n  print(&#39;$firstName $lastName ${suffix ?? &#39;&#39;}&#39;);\n}\n// ···\n  printName(&#39;Avinash&#39;, &#39;Gupta&#39;);\n  printName(&#39;Poshmeister&#39;, &#39;Moneybuckets&#39;, suffix: &#39;IV&#39;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如您所料，默认情况下，这些参数的值为 null，但是您可以提供默认值:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>void printName(String firstName, String lastName, {String suffix = &#39;&#39;}) {\n  print(&#39;$firstName $lastName $suffix&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函数不能同时具有可选的位置参数和可选的命名参数。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><p>Dart 代码可以引发并捕获异常。与 Java 相反，Dart 的所有异常都是未经检查的异常。方法需要制订它们可能引发哪些异常，您也不被强制捕获任何异常。</p><p>Dart 提供 <code>Exception</code> 和 <code>Error</code> 类型，但是您可以抛出任何非 null 对象:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>throw Exception(&#39;Something bad happened.&#39;);\nthrow &#39;Waaaaaaah!&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 <code>try</code>，<code>on</code> 以及 <code>catch</code> 处理异常时的关键字:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>try {\n  breedMoreLlamas();\n} on OutOfLlamasException {\n  // A specific exception\n  buyMoreLlamas();\n} on Exception catch (e) {\n  // Anything else that is an exception\n  print(&#39;Unknown exception: $e&#39;);\n} catch (e) {\n  // No specified type, handles all\n  print(&#39;Something really unknown: $e&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>try</code> 的作用和大多数其他语言一样。使用 <code>on</code> 关键字按类型过滤特定的异常，并使用 <code>catch</code> 关键字获取对异常对象的引用。</p><p>如果您不能完全处理该异常，请使用 <code>rethrow</code> 关键字传播该异常:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>try {\n  breedMoreLlamas();\n} catch (e) {\n  print(&#39;I was just trying to breed llamas!.&#39;);\n  rethrow;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要执行代码(无论是否引发异常)，请使用 <code>finally</code>:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>try {\n  breedMoreLlamas();\n} catch (e) {\n  // ... handle exception ...\n} finally {\n  // Always clean up, even if an exception is thrown.\n  cleanLlamaStalls();\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="在构造函数种使用-this" tabindex="-1"><a class="header-anchor" href="#在构造函数种使用-this" aria-hidden="true">#</a> 在构造函数种使用 <code>this</code></h2><p>Dart 提供了一个方便的快捷方式，用于将值分配给构造函数中的属性: <code>this.propertyName</code> 在声明构造函数时使用:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class MyColor {\n  int red;\n  int green;\n  int blue;\n\n  MyColor(this.red, this.green, this.blue);\n}\n\nfinal color = MyColor(80, 80, 128);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>该技术也适用于命名参数。属性名称成为参数的名称:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class MyColor {\n  ...\n\n  MyColor({this.red, this.green, this.blue});\n}\n\nfinal color = MyColor(red: 80, green: 80, blue: 80);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于可选参数，默认值可以按预期运行:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>MyColor([this.red = 0, this.green = 0, this.blue = 0]);\n// or\nMyColor({this.red = 0, this.green = 0, this.blue = 0});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="初始化列表" tabindex="-1"><a class="header-anchor" href="#初始化列表" aria-hidden="true">#</a> 初始化列表</h2><p>有时在实现构造函数时，需要在构造函数主体执行之前进行一些设置。例如，在构造函数主体执行之前，final 字段必须具有值。您可以在构造函数的签名及其主体之间的初始化器列表中执行此操作:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>Point.fromJson(Map&lt;String, num&gt; json)\n    : x = json[&#39;x&#39;],\n      y = json[&#39;y&#39;] {\n  print(&#39;In Point.fromJson(): ($x, $y)&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>初始化器列表也是放置断言的方便位置，断言仅在开发期间运行:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>NonNegativePoint(this.x, this.y)\n    : assert(x &gt;= 0),\n      assert(y &gt;= 0) {\n  print(&#39;I just made a NonNegativePoint: ($x, $y)&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="命名构造函数" tabindex="-1"><a class="header-anchor" href="#命名构造函数" aria-hidden="true">#</a> 命名构造函数</h2><p>为了允许类具有多个构造函数，Dart 支持命名构造函数:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class Point {\n  double x, y;\n\n  Point(this.x, this.y);\n\n  Point.origin() {\n    x = 0;\n    y = 0;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>要使用命名构造函数，请使用其全名调用它:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>final myPoint = Point.origin();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="工厂构造函数" tabindex="-1"><a class="header-anchor" href="#工厂构造函数" aria-hidden="true">#</a> 工厂构造函数</h2><p>Dart 支持工厂构造函数，该构造函数可以返回子类型，甚至可以返回 null。要创建工厂构造函数，请使用 <code>factory</code> 关键字:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class Square extends Shape {}\n\nclass Circle extends Shape {}\n\nclass Shape {\n  Shape();\n\n  factory Shape.fromTypeName(String typeName) {\n    if (typeName == &#39;square&#39;) return Square();\n    if (typeName == &#39;circle&#39;) return Circle();\n\n    print(&#39;I don\\&#39;t recognize $typeName&#39;);\n    return null;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="重定向构造函数" tabindex="-1"><a class="header-anchor" href="#重定向构造函数" aria-hidden="true">#</a> 重定向构造函数</h2><p>有时，构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体为空，构造函数调用出现在冒号(<code>:</code>)之后。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class Automobile {\n  String make;\n  String model;\n  int mpg;\n\n  // The main constructor for this class.\n  Automobile(this.make, this.model, this.mpg);\n\n  // Delegates to the main constructor.\n  Automobile.hybrid(String make, String model) : this(make, model, 60);\n\n  // Delegates to a named constructor\n  Automobile.fancyHybrid() : this.hybrid(&#39;Futurecar&#39;, &#39;Mark 2&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="const-构造函数" tabindex="-1"><a class="header-anchor" href="#const-构造函数" aria-hidden="true">#</a> const 构造函数</h2><p>如果您的类产生了永不改变的对象，则可以使这些对象具有编译时常量。为此，请定义一个 <code>const</code> 构造函数，并确保所有实例变量都是最终变量。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class ImmutablePoint {\n  const ImmutablePoint(this.x, this.y);\n\n  final int x;\n  final int y;\n\n  static const ImmutablePoint origin = ImmutablePoint(0, 0);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',97),i={},t=(0,a(82831).Z)(i,[["render",function(n,e){return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s.kq)(" more "),l],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const a=n.__vccOpts||n;for(const[n,s]of e)a[n]=s;return a}},2027:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-5e47c7c5",path:"/code/language/dart/samples/cheatsheet.html",title:"dart 概要",lang:"zh-CN",frontmatter:{title:"dart 概要",icon:"form",date:"2020-05-30T00:00:00.000Z",category:["dart"],summary:"Dart 语言旨在让其他语言的编码人员易于学习，但具有一些独特功能。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/dart/samples/cheatsheet.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"dart 概要"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2020-05-30T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>Dart 语言旨在让其他语言的编码人员易于学习，但具有一些独特功能。</p>\n",headers:[{level:2,title:"字符串插值",slug:"字符串插值",children:[]},{level:2,title:"空感知运算符",slug:"空感知运算符",children:[]},{level:2,title:"受控的属性访问",slug:"受控的属性访问",children:[]},{level:2,title:"集合",slug:"集合",children:[]},{level:2,title:"箭头语法",slug:"箭头语法",children:[]},{level:2,title:"级联",slug:"级联",children:[]},{level:2,title:"Getter 和 Setter",slug:"getter-和-setter",children:[]},{level:2,title:"可选的位置参数",slug:"可选的位置参数",children:[]},{level:2,title:"可选的命名参数",slug:"可选的命名参数",children:[]},{level:2,title:"异常",slug:"异常",children:[]},{level:2,title:"在构造函数种使用 this",slug:"在构造函数种使用-this",children:[]},{level:2,title:"初始化列表",slug:"初始化列表",children:[]},{level:2,title:"命名构造函数",slug:"命名构造函数",children:[]},{level:2,title:"工厂构造函数",slug:"工厂构造函数",children:[]},{level:2,title:"重定向构造函数",slug:"重定向构造函数",children:[]},{level:2,title:"const 构造函数",slug:"const-构造函数",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4}]},readingTime:{minutes:6.84,words:2051},filePathRelative:"code/language/dart/samples/cheatsheet.md"}}}]);