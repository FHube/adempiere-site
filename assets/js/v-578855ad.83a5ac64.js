"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5591],{35830:(e,n,s)=>{s.r(n),s.d(n,{default:()=>p});var a=s(34086);const r=(0,a._)("p",null,"列表生成式即 List Comprehensions，是 Python 内置的非常简单却强大的可以用来创建 list 的生成式。",-1),i=(0,a.uE)('<p>举个例子，要生成 list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code> 可以用 <code>list(range(1, 11))</code>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; list(range(1, 11))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但如果要生成 <code>[1x1, 2x2, 3x3, ..., 10x10]</code> 怎么做? 方法一是循环:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L = []\n&gt;&gt;&gt; for x in range(1, 11):\n...    L.append(x * x)\n...\n&gt;&gt;&gt; L\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的 list:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>写列表生成式时，把要生成的元素 <code>x * x</code> 放到前面，后面跟 for 循环，就可以把 list 创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><p>for 循环后面还可以加上 if 判断，这样我们就可以筛选出仅偶数的平方:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]\n[4, 16, 36, 64, 100]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>还可以使用两层循环，可以生成全排列:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [m + n for m in &#39;ABC&#39; for n in &#39;XYZ&#39;]\n[&#39;AX&#39;, &#39;AY&#39;, &#39;AZ&#39;, &#39;BX&#39;, &#39;BY&#39;, &#39;BZ&#39;, &#39;CX&#39;, &#39;CY&#39;, &#39;CZ&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>三层和三层以上的循环就很少用到了。</p><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; import os # 导入os模块，模块的概念后面讲到\n&gt;&gt;&gt; [d for d in os.listdir(&#39;.&#39;)] # os.listdir可以列出文件和目录\n[&#39;.emacs.d&#39;, &#39;.ssh&#39;, &#39;.Trash&#39;, &#39;Adlm&#39;, &#39;Applications&#39;, &#39;Desktop&#39;, &#39;Documents&#39;, &#39;Downloads&#39;, &#39;Library&#39;, &#39;Movies&#39;, &#39;Music&#39;, &#39;Pictures&#39;, &#39;Public&#39;, &#39;VirtualBox VMs&#39;, &#39;Workspace&#39;, &#39;XCode&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>for 循环其实可以同时使用两个甚至多个变量，比如 dict 的 <code>items()</code> 可以同时迭代 key 和 value:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; d = {&#39;x&#39;: &#39;A&#39;, &#39;y&#39;: &#39;B&#39;, &#39;z&#39;: &#39;C&#39; }\n&gt;&gt;&gt; for k, v in d.items():\n...     print(k, &#39;=&#39;, v)\n...\ny = B\nx = A\nz = C\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此，列表生成式也可以使用两个变量来生成 list:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; d = {&#39;x&#39;: &#39;A&#39;, &#39;y&#39;: &#39;B&#39;, &#39;z&#39;: &#39;C&#39; }\n&gt;&gt;&gt; [k + &#39;=&#39; + v for k, v in d.items()]\n[&#39;y=B&#39;, &#39;x=A&#39;, &#39;z=C&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最后把一个 list 中所有的字符串变成小写:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L = [&#39;Hello&#39;, &#39;World&#39;, &#39;IBM&#39;, &#39;Apple&#39;]\n&gt;&gt;&gt; [s.lower() for s in L]\n[&#39;hello&#39;, &#39;world&#39;, &#39;ibm&#39;, &#39;apple&#39;]\nif ... else\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用列表生成式的时候，有些童鞋经常搞不清楚 if...else 的用法。</p><p>例如，以下代码正常输出偶数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [x for x in range(1, 11) if x % 2 == 0]\n[2, 4, 6, 8, 10]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但是，我们不能在最后的 if 加上 else:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>&gt;&gt;&gt; [x for x in range(1, 11) if x % 2 == 0 else 0]\n  File &quot;&lt;stdin&gt;&quot;, line 1\n    [x for x in range(1, 11) if x % 2 == 0 else 0]\n                                              ^\nSyntaxError: invalid syntax\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为跟在 for 后面的 if 是一个筛选条件，不能带 else，否则如何筛选?</p><p>另一些童鞋发现把 if 写在 for 前面必须加 else，否则报错:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>&gt;&gt;&gt; [x if x % 2 == 0 for x in range(1, 11)]\n  File &quot;&lt;stdin&gt;&quot;, line 1\n    [x if x % 2 == 0 for x in range(1, 11)]\n                       ^\nSyntaxError: invalid syntax\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为 for 前面的部分是一个表达式，它必须根据 x 计算出一个结果。因此，考察表达式: <code>x if x % 2 == 0</code>，它无法根据 x 计算出结果，因为缺少 else，必须加上 else:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [x if x % 2 == 0 else -x for x in range(1, 11)]\n[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述 for 前面的表达式 <code>x if x % 2 == 0 else -x</code> 才能根据 x 计算出确定的结果。</p><p>可见，在一个列表生成式中，for 前面的 <code>if ... else</code> 是表达式，而 for 后面的 if 是过滤条件，不能带 else。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>运用列表生成式，可以快速生成 list，可以通过一个 list 推导出另一个 list，而代码却十分简洁。</p>',34),l={},p=(0,s(82831).Z)(l,[["render",function(e,n){return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a.kq)(" more "),i],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}},41700:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-578855ad",path:"/code/language/python/advance/list-comprehensions.html",title:"列表生成式",lang:"zh-CN",frontmatter:{title:"列表生成式",icon:"list",date:"2020-05-29T00:00:00.000Z",category:["Python"],summary:"列表生成式即 List Comprehensions，是 Python 内置的非常简单却强大的可以用来创建 list 的生成式。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/advance/list-comprehensions.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"列表生成式"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2020-05-29T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>列表生成式即 List Comprehensions，是 Python 内置的非常简单却强大的可以用来创建 list 的生成式。</p>\n",headers:[{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3}]},readingTime:{minutes:3.19,words:958},filePathRelative:"code/language/python/advance/list-comprehensions.md"}}}]);