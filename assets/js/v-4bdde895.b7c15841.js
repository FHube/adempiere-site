"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[51715],{10648:(e,n,a)=>{a.r(n),a.d(n,{default:()=>o});var s=a(34086);const t=(0,s._)("p",null,"高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。",-1),r=(0,s.uE)('<p>我们以实际代码为例子，一步一步深入概念。</p><h2 id="变量可以指向函数" tabindex="-1"><a class="header-anchor" href="#变量可以指向函数" aria-hidden="true">#</a> 变量可以指向函数</h2><p>以 Python 内置的求绝对值的函数 <code>abs()</code> 为例，调用该函数用以下代码:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; abs(-10)\n10\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但是，如果只写 <code>abs</code> 呢?</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; abs\n&lt;built-in function abs&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可见，<code>abs(-10)</code> 是函数调用，而 <code>abs</code> 是函数本身。</p><p>要获得函数调用结果，我们可以把结果赋值给变量:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; x = abs(-10)\n&gt;&gt;&gt; x\n10\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是，如果把函数本身赋值给变量呢?</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; f = abs\n&gt;&gt;&gt; f\n&lt;built-in function abs&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>结论: 函数本身也可以赋值给变量，即: 变量可以指向函数。</p><p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数? 用代码验证一下:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; f = abs\n&gt;&gt;&gt; f(-10)\n10\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>成功! 说明变量 f 现在已经指向了 <code>abs</code> 函数本身。直接调用 <code>abs()</code> 函数和调用变量 <code>f()</code> 完全相同。</p><h2 id="函数名也是变量" tabindex="-1"><a class="header-anchor" href="#函数名也是变量" aria-hidden="true">#</a> 函数名也是变量</h2><p>那么函数名是什么呢? 函数名其实就是指向函数的变量! 对于 <code>abs()</code> 这个函数，完全可以把函数名 <code>abs</code> 看成变量，它指向一个可以计算绝对值的函数!</p><p>如果把 <code>abs</code> 指向其他对象，会有什么情况发生?</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>&gt;&gt;&gt; abs = 10\n&gt;&gt;&gt; abs(-10)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: &#39;int&#39; object is not callable\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>把 <code>abs</code> 指向 <code>10</code> 后，就无法通过 <code>abs(-10)</code> 调用该函数了! 因为 <code>abs</code> 这个变量已经不指向求绝对值函数而是指向一个整数 10!</p><p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复 <code>abs</code> 函数，请重启 Python 交互环境。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>由于 abs 函数实际上是定义在 <code>import builtins</code> 模块中的，所以要让修改 <code>abs</code> 变量的指向在其它模块也生效，要用 <code>import builtins; builtins.abs = 10</code>。</p></div><h2 id="传入函数" tabindex="-1"><a class="header-anchor" href="#传入函数" aria-hidden="true">#</a> 传入函数</h2><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>一个最简单的高阶函数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def add(x, y, f):\n    return f(x) + f(y)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当我们调用 <code>add(-5, 6, abs)</code> 时，参数 <code>x</code>，<code>y</code> 和 <code>f</code> 分别接收 <code>-5</code>，<code>6</code> 和 <code>abs</code>，根据函数定义，我们可以推导计算过程为:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>x = -5\ny = 6\nf = abs\nf(x) + f(y) ==&gt; abs(-5) + abs(6) ==&gt; 11\nreturn 11\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编写高阶函数，就是让函数的参数能够接收别的函数。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>',31),i={},o=(0,a(82831).Z)(i,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s.kq)(" more "),r],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},15138:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-4bdde895",path:"/code/language/python/functional-programming/high-order-function/intro.html",title:"介绍",lang:"zh-CN",frontmatter:{title:"介绍",icon:"info",author:"廖雪峰",date:"2020-05-31T00:00:00.000Z",category:["Python"],summary:"高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/functional-programming/high-order-function/intro.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"介绍"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-31T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>高阶函数英文叫 Higher-order function。什么是高阶函数? 把函数作为参数传入，这样的函数称为高阶函数。</p>\n",headers:[{level:2,title:"变量可以指向函数",slug:"变量可以指向函数",children:[]},{level:2,title:"函数名也是变量",slug:"函数名也是变量",children:[]},{level:2,title:"传入函数",slug:"传入函数",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.37,words:711},filePathRelative:"code/language/python/functional-programming/high-order-function/intro.md"}}}]);