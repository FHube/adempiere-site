"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1531],{97922:(e,a,n)=>{n.r(a),n.d(a,{default:()=>r});var s=n(34086);const l=(0,s._)("p",null,[(0,s.Uk)("选择器是 jQuery 的核心。一个选择器写出来类似 "),(0,s._)("code",null,"$('#dom-id')"),(0,s.Uk)("。")],-1),t=(0,s.uE)('<p>为什么 jQuery 要发明选择器? 回顾一下 DOM 操作中我们经常使用的代码:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 按ID查找:\nconst a = document.getElementById(&#39;dom-id&#39;);\n\n// 按tag查找:\nconst divs = document.getElementsByTagName(&#39;div&#39;);\n\n// 查找&lt;p class=&quot;red&quot;&gt;:\nconst ps = document.getElementsByTagName(&#39;p&#39;);\n// 过滤出class=&quot;red&quot;:\n// TODO:\n\n// 查找&lt;table class=&quot;green&quot;&gt;里面的所有&lt;tr&gt;:\nconst table = ...\nfor (let i = 0; i &lt; table.children; i++) {\n    // TODO: 过滤出&lt;tr&gt;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这些代码实在太繁琐了，并且，在层级关系中，例如，查找 <code>&lt;table class=&quot;green&quot;&gt;</code> 里面的所有 <code>&lt;tr&gt;</code>，一层循环实际上是错的，因为 <code>&lt;table&gt;</code> 的标准写法是:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;table&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      ...\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      ...\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>很多时候，需要递归查找所有子节点。</p><p>jQuery 的选择器就是帮助我们快速定位到一个或多个 DOM 节点。</p><h2 id="简单选择器" tabindex="-1"><a class="header-anchor" href="#简单选择器" aria-hidden="true">#</a> 简单选择器</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p>jQuery 的选择器特别像 CSS 的选择器</p></div><h3 id="按-id-查找" tabindex="-1"><a class="header-anchor" href="#按-id-查找" aria-hidden="true">#</a> 按 ID 查找</h3><p>如果某个 DOM 节点有 id 属性，利用 jQuery 查找如下:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 查找&lt;div id=&quot;abc&quot;&gt;:\nconst div = $(&quot;#abc&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，<code>#abc</code> 以 <code>#</code> 开头。返回的对象是 jQuery 对象。</p><p>什么是 jQuery 对象? jQuery 对象类似数组，它的每个元素都是一个引用了 DOM 节点的对象。</p><p>以上面的查找为例，如果 id 为 <code>abc</code> 的 <code>&lt;div&gt;</code> 存在，返回的 jQuery 对象如下:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>[\n&lt;div id=&quot;abc&quot;&gt;...&lt;/div&gt;\n]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果 id 为 abc 的 <code>&lt;div&gt;</code> 不存在，返回的 jQuery 对象如下:</p><p><code>[]</code></p><p>总之 jQuery 的选择器不会返回 <code>undefined</code> 或者 <code>null</code>，这样的好处是您不必在下一行判断 <code>if (div === undefined)</code>。</p><p>jQuery 对象和 DOM 对象之间可以互相转化:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const div = $(&quot;#abc&quot;); // jQuery对象\nconst divDom = div.get(0); // 假设存在div，获取第1个DOM元素\nconst another = $(divDom); // 重新把DOM包装为jQuery对象\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通常情况下您不需要获取 DOM 对象，直接使用 jQuery 对象更加方便。如果您拿到了一个 DOM 对象，那可以简单地调用 <code>$(aDomObject)</code> 把它变成 jQuery 对象，这样就可以方便地使用 jQuery 的 API 了。</p><h3 id="按-tag-查找" tabindex="-1"><a class="header-anchor" href="#按-tag-查找" aria-hidden="true">#</a> 按 tag 查找</h3><p>按 tag 查找只需要写上 tag 名称就可以了:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const ps = $(&quot;p&quot;); // 返回所有 &lt;p&gt; 节点\nps.length; // 数一数页面有多少个 &lt;p&gt; 节点\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="按-class-查找" tabindex="-1"><a class="header-anchor" href="#按-class-查找" aria-hidden="true">#</a> 按 class 查找</h3><p>按 class 查找注意在 class 名称前加一个 <code>.</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = $(&quot;.red&quot;); // 所有节点包含 `class=&quot;red&quot;` 都将返回\n// 例如:\n// &lt;div class=&quot;red&quot;&gt;...&lt;/div&gt;\n// &lt;p class=&quot;green red&quot;&gt;...&lt;/p&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通常很多节点有多个 <strong>class</strong>，我们可以查找同时包含 <code>red</code> 和 <code>green</code> 的节点:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = $(&quot;.red.green&quot;); // 注意没有空格!\n// 符合条件的节点:\n// &lt;div class=&quot;red green&quot;&gt;...&lt;/div&gt;\n// &lt;div class=&quot;blue green red&quot;&gt;...&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="按属性查找" tabindex="-1"><a class="header-anchor" href="#按属性查找" aria-hidden="true">#</a> 按属性查找</h3><p>一个 DOM 节点除了 id 和 class 外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const email = $(&quot;[name=email]&quot;); // 找出 `&lt;??? name=&quot;email&quot;&gt;`\nconst passwordInput = $(&quot;[type=password]&quot;); // 找出 `&lt;??? type=&quot;password&quot;&gt;`\nconst a = $(&#39;[items=&quot;A B&quot;]&#39;); // 找出 `&lt;??? items=&quot;A B&quot;&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当属性的值包含空格等特殊字符时，需要用双引号括起来。</p><p>按属性查找还可以使用前缀查找或者后缀查找:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const icons = $(&quot;[name^=icon]&quot;); // 找出所有name属性值以icon开头的DOM\n// 例如: name=&quot;icon-1&quot;, name=&quot;icon-2&quot;\nconst names = $(&quot;[name$=with]&quot;); // 找出所有 name 属性值以 with 结尾的 DOM\n// 例如: name=&quot;startswith&quot;, name=&quot;endswith&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个方法尤其适合通过 class 属性查找，且不受 class 包含多个名称的影响:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const icons = $(&#39;[class^=&quot;icon-&quot;]&#39;); // 找出所有 class 包含至少一个以 `icon-` 开头的DOM\n// 例如: class=&quot;icon-clock&quot;, class=&quot;abc icon-home&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="组合查找" tabindex="-1"><a class="header-anchor" href="#组合查找" aria-hidden="true">#</a> 组合查找</h3><p>组合查找就是把上述简单选择器组合起来使用。如果我们查找 <code>$(&#39;[name=email]&#39;)</code>，很可能把表单外的 <code>&lt;div name=&quot;email&quot;&gt;</code> 也找出来，但我们只希望查找 <code>&lt;input&gt;</code>，就可以这么写:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const emailInput = $(&quot;input[name=email]&quot;); // 不会找出 &lt;div name=&quot;email&quot;&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同样的，根据 tag 和 class 来组合查找也很常见:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const tr = $(&quot;tr.red&quot;); // 找出 &lt;tr class=&quot;red ...&quot;&gt;...&lt;/tr&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="多项选择器" tabindex="-1"><a class="header-anchor" href="#多项选择器" aria-hidden="true">#</a> 多项选择器</h2><p>多项选择器就是把多个选择器用，组合起来一块选:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;p,div&quot;); // 把 &lt;p&gt; 和 &lt;div&gt; 选出来\n$(&quot;p.red,p.green&quot;); // 把 &lt;p class=&quot;red&quot;&gt; 和 &lt;p class=&quot;green&quot;&gt; 都选出来\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>要注意的是，选出来的元素是按照它们在 HTML 中出现的顺序排列的，而且不会有重复元素。例如，<code>&lt;p class=&quot;red green&quot;&gt;</code> 不会被上面的 <code>$(&#39;p.red,p.green&#39;)</code> 选择两次。</p><h2 id="层级选择器" tabindex="-1"><a class="header-anchor" href="#层级选择器" aria-hidden="true">#</a> 层级选择器</h2><p>除了基本的选择器外，jQuery 的层级选择器更加灵活，也更强大。</p><p>因为 DOM 的结构就是层级结构，所以我们经常要根据层级关系进行选择。</p><h3 id="层级选择器-descendant-selector" tabindex="-1"><a class="header-anchor" href="#层级选择器-descendant-selector" aria-hidden="true">#</a> 层级选择器 (Descendant Selector)</h3><p>如果两个 DOM 元素具有层级关系，就可以用 <code>$(&#39;ancestor descendant&#39;)</code> 来选择，层级之间用空格隔开。例如:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div class=&quot;testing&quot;&gt;\n  &lt;ul class=&quot;lang&quot;&gt;\n    &lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;\n    &lt;li class=&quot;lang-python&quot;&gt;Python&lt;/li&gt;\n    &lt;li class=&quot;lang-lua&quot;&gt;Lua&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>要选出 JavaScript，可以用层级选择器:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;ul.lang li.lang-javascript&quot;); // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]\n$(&quot;div.testing li.lang-javascript&quot;); // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因为 <code>&lt;div&gt;</code> 和 <code>&lt;ul&gt;</code> 都是 <code>&lt;li&gt;</code> 的祖先节点，所以上面两种方式都可以选出相应的 <code>&lt;li&gt;</code> 节点。</p><p>要选择所有的 <code>&lt;li&gt;</code> 节点，用:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;ul.lang li&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这种层级选择器相比单个的选择器好处在于，它缩小了选择范围，因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素。</p><p>例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;form[name=upload] input&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就把选择范围限定在 <code>name</code> 属性为 <code>upload</code> 的表单里。如果页面有很多表单，其他表单的 <code>&lt;input&gt;</code> 不会被选择。</p><p>多层选择也是允许的:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;form.test p input&quot;); // 在 form 表单选择被 &lt;p&gt; 包含的 &lt;input&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="子选择器-child-selector" tabindex="-1"><a class="header-anchor" href="#子选择器-child-selector" aria-hidden="true">#</a> 子选择器(Child Selector)</h2><p>子选择器 <code>$(&#39;parent&gt;child&#39;)</code> 类似层级选择器，但是限定了层级关系必须是父子关系，就是 <code>&lt;child&gt;</code> 节点必须是 <code>&lt;parent&gt;</code> 节点的直属子节点。还是以上面的例子:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;ul.lang&gt;li.lang-javascript&quot;); // 可以选出 [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]\n$(&quot;div.testing&gt;li.lang-javascript&quot;); // [], 无法选出，因为 &lt;div&gt; 和 &lt;li&gt; 不构成父子关系\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="过滤器-filter" tabindex="-1"><a class="header-anchor" href="#过滤器-filter" aria-hidden="true">#</a> 过滤器(Filter)</h2><p>过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;ul.lang li&quot;); // 选出JavaScript、Python和Lua 3个节点\n\n$(&quot;ul.lang li:first-child&quot;); // 仅选出JavaScript\n$(&quot;ul.lang li:last-child&quot;); // 仅选出Lua\n$(&quot;ul.lang li:nth-child(2)&quot;); // 选出第N个元素，N从1开始\n$(&quot;ul.lang li:nth-child(even)&quot;); // 选出序号为偶数的元素\n$(&quot;ul.lang li:nth-child(odd)&quot;); // 选出序号为奇数的元素\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="表单相关" tabindex="-1"><a class="header-anchor" href="#表单相关" aria-hidden="true">#</a> 表单相关</h2><p>针对表单元素，jQuery 还有一组特殊的选择器:</p><ul><li><p><code>:input</code>: 可以选择 <code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>，<code>&lt;select&gt;</code> 和 <code>&lt;button&gt;</code>；</p></li><li><p><code>:file</code>: 可以选择 <code>&lt;input type=&quot;file&quot;&gt;</code>，和 <code>input[type=file]</code> 一样；</p></li><li><p><code>:checkbox</code>: 可以选择复选框，和 <code>input[type=checkbox]</code> 一样；</p></li><li><p><code>:radio</code>: 可以选择单选框，和 <code>input[type=radio]</code> 一样；</p></li><li><p><code>:focus</code>: 可以选择当前输入焦点的元素，例如把光标放到一个 <code>&lt;input&gt;</code> 上，用<code>$(&#39;input:focus&#39;)</code> 就可以选出；</p></li><li><p><code>:checked</code>: 选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如<code>$(&#39;input[type=radio]:checked&#39;)</code>；</p></li><li><p><code>:enabled</code>: 可以选择可以正常输入的 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code> 等，也就是没有灰掉的输入；</p></li><li><p><code>:disabled</code>: 和 <code>:enabled</code> 正好相反，选择那些不能输入的。</p></li></ul><p>此外，jQuery 还有很多有用的选择器，例如，选出可见的或隐藏的元素:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;div:visible&quot;); // 所有可见的 div\n$(&quot;div:hidden&quot;); // 所有隐藏的 div\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="查找和过滤" tabindex="-1"><a class="header-anchor" href="#查找和过滤" aria-hidden="true">#</a> 查找和过滤</h2><p>通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个 jQuery 对象后，还可以以这个对象为基准，进行查找和过滤。</p><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><p>最常见的查找是在某个节点的所有子节点中查找，使用 <code>find()</code> 方法，它本身又接收一个任意的选择器。例如如下的 HTML 结构:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>JavaScript\nPython\nSwift\nScheme\nHaskell\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;ul class=&quot;lang&quot;&gt;\n  &lt;li class=&quot;js dy&quot;&gt;JavaScript&lt;/li&gt;\n  &lt;li class=&quot;dy&quot;&gt;Python&lt;/li&gt;\n  &lt;li id=&quot;swift&quot;&gt;Swift&lt;/li&gt;\n  &lt;li class=&quot;dy&quot;&gt;Scheme&lt;/li&gt;\n  &lt;li name=&quot;haskell&quot;&gt;Haskell&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>用 <code>find()</code> 查找:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const ul = $(&quot;ul.lang&quot;); // 获得 &lt;ul&gt;\nconst dy = ul.find(&quot;.dy&quot;); // 获得 JavaScript, Python, Scheme\nconst swf = ul.find(&quot;#swift&quot;); // 获得 Swift\nconst hsk = ul.find(&quot;[name=haskell]&quot;); // 获得 Haskell\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果要从当前节点开始向上查找，使用 <code>parent()</code> 方法:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const swf = $(&quot;#swift&quot;); // 获得 Swift\nconst parent = swf.parent(); // 获得 Swift 的上层节点 &lt;ul&gt;\nconst a = swf.parent(&quot;.red&quot;); // 获得 Swift 的上层节点 &lt;ul&gt;，同时传入过滤条件。如果 ul 不符合条件，返回空 jQuery 对象\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于位于同一层级的节点，可以通过 <code>next()</code> 和 <code>prev()</code> 方法，例如:</p><p>当我们已经拿到 Swift 节点后:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const swift = $(&quot;#swift&quot;);\n\nswift.next(); // Scheme\nswift.next(&quot;[name=haskell]&quot;); // 空的 jQuery 对象，因为 Swift 的下一个元素 Scheme 不符合条件 [name=haskell]\n\nswift.prev(); // Python\nswift.prev(&quot;.dy&quot;); // Python，因为 Python 同时符合过滤器条件 .dy\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="过滤" tabindex="-1"><a class="header-anchor" href="#过滤" aria-hidden="true">#</a> 过滤</h3><p>和函数式编程的 <code>map</code>、<code>filter</code> 类似，jQuery 对象也有类似的方法。</p><p><code>filter()</code> 方法可以过滤掉不符合选择器条件的节点:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const langs = $(&quot;ul.lang li&quot;); // 拿到 JavaScript, Python, Swift, Scheme 和 Haskell\nconst a = langs.filter(&quot;.dy&quot;); // 拿到 JavaScript, Python, Scheme\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者传入一个函数，要特别注意函数内部的 <code>this</code> 被绑定为 DOM 对象，不是 jQuery 对象:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const langs = $(&quot;ul.lang li&quot;); // 拿到JavaScript, Python, Swift, Scheme和Haskell\nlangs.filter(function () {\n  return this.innerHTML.indexOf(&quot;S&quot;) === 0; // 返回 S 开头的节点\n}); // 拿到 Swift, Scheme\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>map()</code> 方法把一个 jQuery 对象包含的若干 DOM 节点转化为其他对象:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const langs = $(&quot;ul.lang li&quot;); // 拿到 JavaScript, Python, Swift, Scheme 和 Haskell\nconst arr = langs\n  .map(function () {\n    return this.innerHTML;\n  })\n  .get(); // 用 get() 拿到包含 string 的 Array: [&#39;JavaScript&#39;, &#39;Python&#39;, &#39;Swift&#39;, &#39;Scheme&#39;, &#39;Haskell&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此外，一个 jQuery 对象如果包含了不止一个 DOM 节点，<code>first()</code>、<code>last()</code> 和 <code>slice()</code> 方法可以返回一个新的 jQuery 对象，把不需要的 DOM 节点去掉:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const langs = $(&quot;ul.lang li&quot;); // 拿到 JavaScript, Python, Swift, Scheme 和 Haskell\nconst js = langs.first(); // JavaScript，相当于 $(&#39;ul.lang li:first-child&#39;)\nconst haskell = langs.last(); // Haskell, 相当于 $(&#39;ul.lang li:last-child&#39;)\nconst sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的 slice() 方法一致\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',97),i={},r=(0,n(82831).Z)(i,[["render",function(e,a){return(0,s.wg)(),(0,s.iD)(s.HY,null,[l,(0,s.kq)(" more "),t],64)}]])},82831:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}},42823:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-546d1486",path:"/code/website/jQuery/selector.html",title:"选择器",lang:"zh-CN",frontmatter:{icon:"list",title:"选择器",date:"2019-11-03T00:00:00.000Z",category:["jQuery"],summary:"选择器是 jQuery 的核心。一个选择器写出来类似 $('#dom-id')。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/website/jQuery/selector.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"选择器"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-11-03T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>选择器是 jQuery 的核心。一个选择器写出来类似 <code v-pre>$('#dom-id')</code>。</p>\n",headers:[{level:2,title:"简单选择器",slug:"简单选择器",children:[{level:3,title:"按 ID 查找",slug:"按-id-查找",children:[]},{level:3,title:"按 tag 查找",slug:"按-tag-查找",children:[]},{level:3,title:"按 class 查找",slug:"按-class-查找",children:[]},{level:3,title:"按属性查找",slug:"按属性查找",children:[]},{level:3,title:"组合查找",slug:"组合查找",children:[]}]},{level:2,title:"多项选择器",slug:"多项选择器",children:[]},{level:2,title:"层级选择器",slug:"层级选择器",children:[{level:3,title:"层级选择器 (Descendant Selector)",slug:"层级选择器-descendant-selector",children:[]}]},{level:2,title:"子选择器(Child Selector)",slug:"子选择器-child-selector",children:[]},{level:2,title:"过滤器(Filter)",slug:"过滤器-filter",children:[]},{level:2,title:"表单相关",slug:"表单相关",children:[]},{level:2,title:"查找和过滤",slug:"查找和过滤",children:[{level:3,title:"查找",slug:"查找",children:[]},{level:3,title:"过滤",slug:"过滤",children:[]}]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:8.33,words:2498},filePathRelative:"code/website/jQuery/selector.md"}}}]);