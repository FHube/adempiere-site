"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[65625],{32748:(e,n,a)=>{a.r(n),a.d(n,{default:()=>p});var s=a(34086);const r=(0,s._)("p",null,"函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。",-1),c=(0,s._)("p",null,"基本上所有的高级语言都支持函数，JavaScript 也不例外。JavaScript 的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。",-1),i=(0,s.uE)('<h2 id="声明函数" tabindex="-1"><a class="header-anchor" href="#声明函数" aria-hidden="true">#</a> 声明函数</h2><p><code>function</code> 命令声明的代码区块，就是一个函数。<code>function</code> 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function abs(x) {\n  if (x &gt;= 0) return x;\n  else return -x;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上述 <code>abs()</code> 函数的定义如下:</p><p><code>function</code> 指出这是一个函数定义；</p><p><code>abs</code> 是函数的名称；</p><p><code>(x)</code> 括号内列出函数的参数，多个参数以,分隔；</p><p><code>{ ... }</code> 之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</p><p>由于 JavaScript 的函数也是一个对象，上述定义的 <code>abs()</code> 函数实际上是一个函数对象，而函数名 <code>abs</code> 可以视为指向该函数的变量。这叫做函数的声明(Function Declaration)。</p><p>除了用 <code>function</code> 命令声明函数，还可以采用变量赋值的写法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const print = function (s) {\n  console.log(s);\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这种方式下，<code>function (x) { ... }</code> 是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量 <code>print</code>，所以，通过变量 <code>print</code> 就可以调用该函数。</p><p>这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式(Function Expression)，因为赋值语句的等号右侧只能放表达式。</p><p>采用函数表达式声明函数时，<code>function</code> 命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const print = function x() {\n  console.log(typeof x);\n};\n\nx;\n// ReferenceError: x is not defined\n\nprint();\n// function\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码在函数表达式中，加入了函数名 <code>x</code>。这个 <code>x</code> 只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错(除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数)。因此，下面的形式声明函数也非常常见。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const f = function f() {};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。总的来说，这两种声明函数的方式，除了变量提升以外，可以近似认为是等价的。</p><div class="custom-container tip"><p class="custom-container-title">函数名的提升</p><p>JavaScript 引擎将函数名视同变量名，所以采用 <code>function</code> 命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>f();\n\nfunction f() {}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><h2 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数" aria-hidden="true">#</a> 调用函数</h2><p>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>abs(10); // 返回 10\nabs(-9); // 返回 9\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>由于 JavaScript 允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>abs(10, &quot;blablabla&quot;); // 返回 10\nabs(-9, &quot;haha&quot;, &quot;hehe&quot;, null); // 返回 9\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>传入的参数比定义的少也没有问题:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>abs(); // 返回 NaN\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时 <code>abs(x)</code> 函数的参数 x 将收到 <code>undefined</code>，计算结果为 <code>NaN</code>。</p><p>要避免收到 <code>undefined</code>，可以对参数进行检查:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function abs(x) {\n  if (typeof x !== &quot;number&quot;) throw &quot;Not a number&quot;;\n\n  if (x &gt;= 0) return x;\n  else return -x;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',29),t={},p=(0,a(82831).Z)(t,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,c,(0,s.kq)(" more "),i],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},93288:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-a92fc154",path:"/code/language/js/guide/function.html",title:"函数",lang:"zh-CN",frontmatter:{title:"函数",icon:"info",date:"2019-09-17T00:00:00.000Z",category:["JavaScript"],tag:["快速上手"],summary:"函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。\n基本上所有的高级语言都支持函数，JavaScript 也不例外。JavaScript 的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/guide/function.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"函数"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"快速上手"}],["meta",{property:"article:published_time",content:"2019-09-17T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。</p>\n<p>基本上所有的高级语言都支持函数，JavaScript 也不例外。JavaScript 的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。</p>\n",headers:[{level:2,title:"声明函数",slug:"声明函数",children:[]},{level:2,title:"调用函数",slug:"调用函数",children:[]}],git:{createdTime:1611837236e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:3.19,words:958},filePathRelative:"code/language/js/guide/function.md"}}}]);