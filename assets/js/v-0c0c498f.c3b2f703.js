"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[75813],{56493:(e,n,a)=>{a.r(n),a.d(n,{default:()=>t});var s=a(34086);const r=(0,s._)("p",null,"JavaScript 的对象是一种无序的集合数据类型，它由若干键值对组成。",-1),o=(0,s._)("p",null,[(0,s.Uk)("JavaScript 用一个 "),(0,s._)("code",null,"{...}"),(0,s.Uk)(" 表示一个对象，键值对以 "),(0,s._)("code",null,"xxx: xxx"),(0,s.Uk)(" 形式申明，用 "),(0,s._)("code",null,","),(0,s.Uk)(" 隔开。")],-1),p=(0,s.uE)('<p>JavaScript 的对象可用于描述现实世界中的某个对象。例如，为了描述 Mr.Hope，我们可以用若干键值对来描述他:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const mrhope = {\n  name: &quot;Mr.Hope&quot;,\n  isHandsome: true,\n  birth: 1998,\n  school: &quot;No.1 Middle School&quot;,\n  height: 1.76,\n  weight: 50,\n  car: null,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>最后一个键值对不需要在末尾加 <code>,</code>，如果加了，有的浏览器(如低版本的 IE)将报错。</p></div><p>上述对象申明了一个 <code>name</code> 属性，值是 <code>&#39;Mr.Hope&#39;</code>，<code>birth</code> 属性，值是 <code>1998</code>，以及其他一些属性。最后，把这个对象赋值给变量 <code>mrhope</code> 后，就可以通过变量 <code>mrhope</code> 来获取 Mr.Hope 的属性了:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>mrhope.name; // &#39;Mr.Hope&#39;\nmrhope.birth; // 1998\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>访问属性是通过 <code>.</code> 操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用 <code>&#39;&#39;</code> 括起来:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const mrshope = {\n  name: &quot;Mrs.Hope&quot;,\n  &quot;middle-school&quot;: &quot;No.1 Middle School&quot;,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>mrshope</code> 的属性名 <code>middle-school</code> 不是一个有效的变量，就需要用 <code>&#39;&#39;</code> 括起来。访问这个属性也无法使用 <code>.</code> 操作符，必须用 <code>[&#39;xxx&#39;]</code> 来访问:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>mrshope[&quot;middle-school&quot;]; // &#39;No.1 Middle School&#39;\nmrshope[&quot;name&quot;]; // &#39;Mrs.Hope&#39;\nmrshope.name; // &#39;Mrs.Hope&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也可以用 <code>mrshope[&#39;name&#39;]</code> 来访问 <code>mrshope</code> 的 <code>name</code> 属性，不过 <code>mrshope.name</code> 的写法更简洁。我们在编写 JavaScript 代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过 <code>object.prop</code> 的形式访问一个属性了。</p><p>实际上 JavaScript 对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p><p>如果访问一个不存在的属性会返回什么呢? JavaScript 规定，访问不存在的属性不报错，而是返回 <code>undefined</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nconst mrhope = {\n  name: &quot;Mr.Hope&quot;,\n};\n\nconsole.log(mrhope.name);\nconsole.log(mrhope.house); // undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于 JavaScript 的对象是动态类型，您可以自由地给一个对象添加或删除属性:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const mrhope = {\n  name: &quot;Mr.Hope&quot;,\n};\n\nmrhope.age; // undefined\nmrhope.age = 22; // 新增一个 age 属性\nmrhope.age; // 22\ndelete mrhope.age; // 删除 age 属性\nmrhope.age; // undefined\ndelete mrhope[&quot;name&quot;]; // 删除 name 属性\nmrhope.name; // undefined\ndelete mrhope.school; // 删除一个不存在的 school 属性也不会报错\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果我们要检测 <code>mrhope</code> 是否拥有某一属性，可以用 <code>in</code> 操作符:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const mrhope = {\n  name: &quot;Mr.Hope&quot;,\n  birth: 1998,\n  school: &quot;No.1 Middle School&quot;,\n  height: 1.76,\n  weight: 50,\n  car: null,\n};\n\n&quot;name&quot; in mrhope; // true\n&quot;grade&quot; in mrhope; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>不过要小心，如果 <code>in</code> 判断一个属性存在，这个属性不一定是 <code>mrhope</code> 的，它可能是 <code>mrhope</code> 继承得到的:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;toString&quot; in mrhope; // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为 <code>toString</code> 定义在 object 对象中，而所有对象最终都会在原型链上指向 object，所以 <code>mrhope</code> 也拥有 <code>toString</code> 属性。</p><p>要判断一个属性是否是 <code>mrhope</code> 自身拥有的，而不是继承得到的，可以用 <code>hasOwnProperty()</code> 方法:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const mrhope = {\n  name: &quot;Mr.Hope&quot;,\n};\n\nmrhope.hasOwnProperty(&quot;name&quot;); // true\nmrhope.hasOwnProperty(&quot;toString&quot;); // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="更多介绍" tabindex="-1"><a class="header-anchor" href="#更多介绍" aria-hidden="true">#</a> 更多介绍</h2>',23),c=(0,s.Uk)("更系统的介绍详见 "),l=(0,s.Uk)("数据结构 / 对象"),i={},t=(0,a(82831).Z)(i,[["render",function(e,n){const a=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,o,(0,s.kq)(" more "),p,(0,s._)("p",null,[c,(0,s.Wm)(a,{to:"/code/language/js/types/object.html"},{default:(0,s.w5)((()=>[l])),_:1})])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},41560:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-0c0c498f",path:"/code/language/js/guide/object.html",title:"对象",lang:"zh-CN",frontmatter:{title:"对象",icon:"object",date:"2019-09-17T00:00:00.000Z",category:["JavaScript"],tag:["快速上手"],summary:"JavaScript 的对象是一种无序的集合数据类型，它由若干键值对组成。\nJavaScript 用一个 {...} 表示一个对象，键值对以 xxx: xxx 形式申明，用 , 隔开。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/guide/object.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"对象"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"快速上手"}],["meta",{property:"article:published_time",content:"2019-09-17T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>JavaScript 的对象是一种无序的集合数据类型，它由若干键值对组成。</p>\n<p>JavaScript 用一个 <code v-pre>{...}</code> 表示一个对象，键值对以 <code v-pre>xxx: xxx</code> 形式申明，用 <code v-pre>,</code> 隔开。</p>\n",headers:[{level:2,title:"更多介绍",slug:"更多介绍",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:2.51,words:754},filePathRelative:"code/language/js/guide/object.md"}}}]);