"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8628],{71114:(e,n,a)=>{a.r(n),a.d(n,{default:()=>l});var s=a(34086);const t=(0,s._)("p",null,"JavaScript 可以获取浏览器提供的很多对象，并进行操作。",-1),r=(0,s.uE)('<h2 id="window" tabindex="-1"><a class="header-anchor" href="#window" aria-hidden="true">#</a> window</h2><p><code>window</code> 对象不但充当全局作用域，而且表示浏览器窗口。</p><p><code>window</code> 对象有 <code>innerWidth</code> 和 <code>innerHeight</code> 属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。</p><div class="custom-container info"><p class="custom-container-title">兼容性</p><p>IE &lt;= 8 不支持。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\n// 可以调整浏览器窗口大小试试:\nconsole.log(`window inner size: ${window.innerWidth} x ${window.innerHeight}`);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>对应的，还有一个 <code>outerWidth</code> 和 <code>outerHeight</code> 属性，可以获取浏览器窗口的整个宽高。</p><h2 id="navigator" tabindex="-1"><a class="header-anchor" href="#navigator" aria-hidden="true">#</a> navigator</h2><p><code>navigator</code> 对象表示浏览器的信息，最常用的属性包括:</p><ul><li><code>navigator.appName</code>: 浏览器名称；</li><li><code>navigator.appVersion</code>: 浏览器版本；</li><li><code>navigator.language</code>: 浏览器设置的语言；</li><li><code>navigator.platform</code>: 操作系统类型；</li><li><code>navigator.userAgent</code>: 浏览器设定的 User-Agent 字符串。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nconsole.log(`appName = ${navigator.appName}`);\nconsole.log(`appVersion = ${navigator.appVersion}`);\nconsole.log(`language = ${navigator.language}`);\nconsole.log(`platform = ${navigator.platform}`);\nconsole.log(`userAgent = ${navigator.userAgent}`);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>请注意，<code>navigator</code> 的信息可以很容易地被用户修改，所以 JavaScript 读取的值不一定是正确的。很多初学者为了针对不同浏览器编写不同的代码，喜欢用 <code>if</code> 判断浏览器版本，例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let width;\nif (getIEVersion(navigator.userAgent) &lt; 9) width = document.body.clientWidth;\nelse width = window.innerWidth;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但这样既可能判断不准确，也很难维护代码。正确的方法是充分利用 JavaScript 对不存在属性返回 <code>undefined</code> 的特性，直接用短路运算符 <code>||</code> 计算:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const width = window.innerWidth || document.body.clientWidth;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="screen" tabindex="-1"><a class="header-anchor" href="#screen" aria-hidden="true">#</a> screen</h2><p><code>screen</code> 对象表示屏幕的信息，常用的属性有:</p><ul><li><code>screen.width</code>: 屏幕宽度，以像素为单位；</li><li><code>screen.height</code>: 屏幕高度，以像素为单位；</li><li><code>screen.colorDepth</code>: 返回颜色位数，如 8、16、24。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nconsole.log(`Screen size = ${screen.width} x ${screen.height}`);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> location</h2><p><code>location</code> 对象表示当前页面的 URL 信息。例如，一个完整的 URL:</p><p><code>https://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</code> 可以用 <code>location.href</code> 获取。要获得 URL 各个部分的值，可以这么写:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>location.protocol; // &#39;http&#39;\nlocation.host; // &#39;www.example.com&#39;\nlocation.port; // &#39;8080&#39;\nlocation.pathname; // &#39;/path/index.html&#39;\nlocation.search; // &#39;?a=1&amp;b=2&#39;\nlocation.hash; // &#39;TOP&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要加载一个新页面，可以调用 <code>location.assign()</code>。如果要重新加载当前页面，调用 <code>location.reload()</code> 方法非常方便。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nif (confirm(&quot;重新加载当前页&quot; + location.href + &quot;?&quot;)) location.reload();\nelse location.assign(&quot;/&quot;); // 设置一个新的 URL 地址\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="document" tabindex="-1"><a class="header-anchor" href="#document" aria-hidden="true">#</a> document</h2><p><code>document</code> 对象表示当前页面。由于 HTML 在浏览器中以 DOM 形式表示为树形结构，<code>document</code> 对象就是整个 DOM 树的根节点。</p><p><code>document</code> 的 title 属性是从 HTML 文档中的 <code>&lt;title&gt;xxx&lt;/title&gt;</code> 读取的，但是可以动态改变:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\ndocument.title = &quot;努力学习JavaScript!&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>要查找 DOM 树的某个节点，需要从 document 对象开始查找。最常用的查找是根据 ID 和 Tag Name。</p><p>我们先准备 HTML 数据:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;dl id=&quot;drink-menu&quot; style=&quot;border:solid 1px #ccc;padding:6px;&quot;&gt;\n  &lt;dt&gt;摩卡&lt;/dt&gt;\n  &lt;dd&gt;热摩卡咖啡&lt;/dd&gt;\n  &lt;dt&gt;酸奶&lt;/dt&gt;\n  &lt;dd&gt;北京老酸奶&lt;/dd&gt;\n  &lt;dt&gt;果汁&lt;/dt&gt;\n  &lt;dd&gt;鲜榨苹果汁&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>用 <code>document</code> 对象提供的 <code>getElementById()</code> 和 <code>getElementsByTagName()</code> 可以按 ID 获得一个 DOM 节点和按 Tag 名称获得一组 DOM 节点:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nlet menu = document.getElementById(&quot;drink-menu&quot;);\nlet drinks = document.getElementsByTagName(&quot;dt&quot;);\nlet s, menu, drinks;\n\nmenu = document.getElementById(&quot;drink-menu&quot;);\nmenu.tagName; // &#39;DL&#39;\n\ndrinks = document.getElementsByTagName(&quot;dt&quot;);\ns = &quot;提供的饮料有:&quot;;\nfor (let i = 0; i &lt; drinks.length; i++) s = s + drinks[i].innerHTML + &quot;,&quot;;\n\nconsole.log(s);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>摩卡\n热摩卡咖啡\n酸奶\n北京老酸奶\n果汁\n鲜榨苹果汁\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>document</code> 对象还有一个 <code>cookie</code> 属性，可以获取当前页面的 Cookie。</p><p>Cookie 是由服务器发送的 <code>key-value</code> 标示符。因为 HTTP 协议是无状态的，但是服务器要区分到底是哪个用户发过来的请求，就可以用 Cookie 来区分。当一个用户成功登录后，服务器发送一个 Cookie 给浏览器，例如 <code>user=ABC123XYZ</code> (加密的字符串)...，此后，浏览器访问该网站时，会在请求头附上这个 Cookie，服务器根据 Cookie 即可区分出用户。</p><p>Cookie 还可以存储网站的一些设置，例如，页面显示的语言等等。</p><p>JavaScript 可以通过 <code>document.cookie</code> 读取到当前页面的 Cookie:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document.cookie; // &#39;v=123; remember=true; prefer=zh&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于 JavaScript 能读取到页面的 Cookie，而用户的登录信息通常也存在 Cookie 中，这就造成了巨大的安全隐患，这是因为在 HTML 页面中引入第三方的 JavaScript 代码是允许的:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- 当前页面在 www.example.com --&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=&quot;https://www.foo.com/jquery.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  ...\n&lt;/html&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果引入的第三方的 JavaScript 中存在恶意代码，则 www.foo.com 网站将直接获取到 www.example.com 网站的用户登录信息。</p><p>为了解决这个问题，服务器在设置 Cookie 时可以使用 <code>httpOnly</code>，设定了 httpOnly 的 Cookie 将不能被 JavaScript 读取。这个行为由浏览器实现，主流浏览器均支持 httpOnly 选项，IE 从 IE6 SP1 开始支持</p><p>为了确保安全，服务器端在设置 Cookie 时，应该始终坚持使用 <code>httpOnly</code>。</p><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><p><code>history</code> 对象保存了浏览器的历史记录，JavaScript 可以调用 history 对象的 <code>back()</code> 或 <code>forward ()</code>，相当于用户点击了浏览器的“后退”或“前进”按钮。</p><p>这个对象属于历史遗留对象，对于现代 Web 页面来说，由于大量使用 Ajax 和页面交互，简单粗暴地调用 <code>history.back()</code> 可能会让用户感到非常愤怒。</p><p>新手开始设计 Web 页面时喜欢在登录页登录成功时调用 <code>history.back()</code>，试图回到登录前的页面。这是一种错误的方法。</p>',48),i={},l=(0,a(82831).Z)(i,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s.kq)(" more "),r],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},71318:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-e636c4d4",path:"/code/language/js/browser/browser-object.html",title:"浏览器对象",lang:"zh-CN",frontmatter:{title:"浏览器对象",icon:"object",date:"2019-10-16T00:00:00.000Z",category:["JavaScript"],summary:"JavaScript 可以获取浏览器提供的很多对象，并进行操作。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/browser/browser-object.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"浏览器对象"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-16T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>JavaScript 可以获取浏览器提供的很多对象，并进行操作。</p>\n",headers:[{level:2,title:"window",slug:"window",children:[]},{level:2,title:"navigator",slug:"navigator",children:[]},{level:2,title:"screen",slug:"screen",children:[]},{level:2,title:"location",slug:"location",children:[]},{level:2,title:"document",slug:"document",children:[]},{level:2,title:"history",slug:"history",children:[]}],git:{createdTime:1604686203e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:7}]},readingTime:{minutes:4.52,words:1355},filePathRelative:"code/language/js/browser/browser-object.md"}}}]);