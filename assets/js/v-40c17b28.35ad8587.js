"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[81562],{63628:(e,n,r)=>{r.r(n),r.d(n,{default:()=>h});var s=r(34086);const a=(0,s._)("p",null,"如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型:",-1),i=(0,s._)("h2",{id:"函数的合并",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#函数的合并","aria-hidden":"true"},"#"),(0,s.Uk)(" 函数的合并")],-1),t=(0,s.Uk)("之前学习过"),l=(0,s.Uk)("，我们可以使用重载定义多个函数类型:"),p=(0,s.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number | string): number | string {\n  if (typeof x === &quot;number&quot;) {\n    return Number(x.toString().split(&quot;&quot;).reverse().join(&quot;&quot;));\n  } else if (typeof x === &quot;string&quot;) {\n    return x.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="接口的合并" tabindex="-1"><a class="header-anchor" href="#接口的合并" aria-hidden="true">#</a> 接口的合并</h2><p>接口中的属性在合并时会简单的合并到一个接口中:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Alarm {\n  price: number;\n}\ninterface Alarm {\n  weight: number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>相当于:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Alarm {\n  price: number;\n  weight: number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意，<strong>合并的属性的类型必须是唯一的</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Alarm {\n  price: number;\n}\ninterface Alarm {\n  price: number; // 虽然重复了，但是类型都是 `number`，所以不会报错\n  weight: number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Alarm {\n  price: number;\n}\ninterface Alarm {\n  price: string; // 类型不一致，会报错\n  weight: number;\n}\n\n// index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable &#39;price&#39; must be of type &#39;number&#39;, but here has type &#39;string&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接口中方法的合并，与函数的合并一样:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Alarm {\n  price: number;\n  alert(s: string): string;\n}\ninterface Alarm {\n  weight: number;\n  alert(s: string, n: number): string;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>相当于:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Alarm {\n  price: number;\n  weight: number;\n  alert(s: string): string;\n  alert(s: string, n: number): string;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="类的合并" tabindex="-1"><a class="header-anchor" href="#类的合并" aria-hidden="true">#</a> 类的合并</h2><p>类的合并与接口的合并规则一致。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',16),c={href:"http://www.typescriptlang.org/docs/handbook/declaration-merging.html",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("Declaration Merging"),b=(0,s.Uk)("("),m={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Declaration%20Merging.html",target:"_blank",rel:"noopener noreferrer"},o=(0,s.Uk)("中文版"),d=(0,s.Uk)(")"),g={},h=(0,r(82831).Z)(g,[["render",function(e,n){const r=(0,s.up)("RouterLink"),g=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[a,(0,s.kq)(" more "),i,(0,s._)("p",null,[(0,s.Wm)(r,{to:"/code/language/typescript/basics/type-of-function.html#%E9%87%8D%E8%BD%BD"},{default:(0,s.w5)((()=>[t])),_:1}),l]),p,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",c,[u,(0,s.Wm)(g)]),b,(0,s._)("a",m,[o,(0,s.Wm)(g)]),d])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const r=e.__vccOpts||e;for(const[e,s]of n)r[e]=s;return r}},72685:(e,n,r)=>{r.r(n),r.d(n,{data:()=>s});const s={key:"v-40c17b28",path:"/code/language/typescript/advanced/declaration-merging.html",title:"声明合并",lang:"zh-CN",frontmatter:{title:"声明合并",icon:"merge",category:["TypeScript"],summary:"如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型:\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/advanced/declaration-merging.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"声明合并"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T09:25:08.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2022-02-12T09:25:08.000Z"}]]},excerpt:"<p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型:</p>\n",headers:[{level:2,title:"函数的合并",slug:"函数的合并",children:[]},{level:2,title:"接口的合并",slug:"接口的合并",children:[]},{level:2,title:"类的合并",slug:"类的合并",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644657908e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3}]},readingTime:{minutes:1.11,words:332},filePathRelative:"code/language/typescript/advanced/declaration-merging.md"}}}]);