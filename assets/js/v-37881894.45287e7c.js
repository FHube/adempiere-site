"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[82550],{84822:(e,n,s)=>{s.r(n),s.d(n,{default:()=>i});var t=s(34086);const a=(0,t._)("p",null,"由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。",-1),l=(0,t._)("p",null,"始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:",-1),r=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,"更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；")]),(0,t._)("li",null,[(0,t._)("p",null,"遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；")]),(0,t._)("li",null,[(0,t._)("p",null,"添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；")]),(0,t._)("li",null,[(0,t._)("p",null,"删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。")])],-1),p=(0,t.uE)('<p>在操作一个 DOM 节点前，我们需要通过各种方式先拿到这个 DOM 节点。最常用的方法是使用 <code>querySelector()</code> 和 <code>querySelectorAll()</code>。</p><p>使用这个 API 需要了解 CSS selector 语法，然后使用条件来获取节点，十分方便:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 通过 querySelector 获取 ID 为 q1 的节点:\nconst q1 = document.querySelector(&quot;#q1&quot;);\n\n// 通过 querySelectorAll 获取 q1 节点内的符合条件的所有节点:\nconst ps = q1.querySelectorAll(&quot;div.highlighted &gt; p&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>低版本的 IE &lt; 8 不支持 <code>querySelector</code> 和 <code>querySelectorAll</code>。IE8 仅有限支持。</p><p>在历史上，使用的方法是 <code>document.getElementById()</code> 和 <code>document.getElementsByTagName()</code>，以及 CSS 选择器 <code>document.getElementsByClassName()</code>。</p><p>由于 ID 在 HTML 文档中是唯一的，所以 <code>document.getElementById()</code> 可以直接定位唯一的一个 DOM 节点。<code>document.getElementsByTagName()</code> 和 <code>document.getElementsByClassName()</code> 总是返回一组 DOM 节点。要精确地选择 DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。</p><p>例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 返回ID为 &#39;test&#39; 的节点:\nconst test = document.getElementById(&quot;test&quot;);\n\n// 先定位ID为&#39;test-table&#39;的节点，再返回其内部所有tr节点:\nconst trs = document.getElementById(&quot;test-table&quot;).getElementsByTagName(&quot;tr&quot;);\n\n// 先定位ID为&#39;test-div&#39;的节点，再返回其内部所有class包含red的节点:\nconst reds = document.getElementById(&quot;test-div&quot;).getElementsByClassName(&quot;red&quot;);\n\n// 获取节点 test 下的所有直属子节点:\nconst cs = test.children;\n\n// 获取节点 test 下第一个、最后一个子节点:\nconst first = test.firstElementChild;\nconst last = test.lastElementChild;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><p>严格地讲，我们这里的 DOM 节点是指 <code>Element</code>，但是 DOM 节点实际上是 <code>Node</code>，在 HTML 中，<code>Node</code> 包括 <code>Element</code>、<code>Comment</code>、<code>CDATA_SECTION</code> 等很多种，以及根节点 <code>Document</code> 类型，但是，绝大多数时候我们只关心 <code>Element</code>，也就是实际控制页面结构的 <code>Node</code>，其他类型的 <code>Node</code> 忽略即可。根节点 Document 已经自动绑定为全局变量 <code>document</code>。</p><h2 id="更新-dom" tabindex="-1"><a class="header-anchor" href="#更新-dom" aria-hidden="true">#</a> 更新 DOM</h2><p>拿到一个 DOM 节点后，我们可以对它进行更新。</p><p>可以直接修改节点的文本，方法有两种:</p><p>一种是修改 <code>innerHTML</code> 属性，这个方式非常强大，不但可以修改一个 DOM 节点的文本内容，还可以直接通过 HTML 片段修改 DOM 节点内部的子树:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;\nconst p = document.querySelector(&quot;#p-id&quot;);\n// 设置文本为abc:\np.innerHTML = &quot;ABC&quot;; // &lt;p id=&quot;p-id&quot;&gt;ABC&lt;/p&gt;\n// 设置HTML:\np.innerHTML = &#39;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#39;;\n// &lt;p&gt;...&lt;/p&gt;的内部结构已修改\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>用 <code>innerHTML</code> 时要注意，是否需要写入 HTML。如果写入的字符串是通过网络拿到了，要注意对字符编码来避免 XSS 攻击。</p><p>第二种是修改 <code>innerText</code> 或 <code>textContent</code> 属性，这样可以自动对字符串进行 HTML 编码，保证无法设置任何 HTML 标签:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;\nconst p = document.querySelector(&quot;#p-id&quot;);\n// 设置文本:\np.innerText = &#39;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#39;;\n// HTML被自动编码，无法设置一个&lt;script&gt;节点:\n// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>两者的区别在于读取属性时，<code>innerText</code> 不返回隐藏元素的文本，而 <code>textContent</code> 返回所有文本。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>IE &lt; 9 不支持 <code>textContent</code>。</p></div><p>修改 CSS 也是经常需要的操作。DOM 节点的 style 属性对应所有的 CSS，可以直接获取或设置。因为 CSS 允许 <code>font-size</code> 这样的名称，但它并非 JavaScript 有效的属性名，所以需要在 JavaScript 中改写为驼峰式命名 <code>fontSize</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p&gt;\nconst p = document.querySelector(&quot;#p-id&quot;);\n// 设置CSS:\np.style.color = &quot;#ff0000&quot;;\np.style.fontSize = &quot;20px&quot;;\np.style.paddingTop = &quot;2em&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="插入-dom" tabindex="-1"><a class="header-anchor" href="#插入-dom" aria-hidden="true">#</a> 插入 DOM</h2><p>当我们获得了某个 DOM 节点，想在这个 DOM 节点内插入新的 DOM，应该如何做?</p><p>如果这个 DOM 节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用 <code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code> 就可以修改 DOM 节点的内容，相当于“插入”了新的 DOM 节点。</p><p>如果这个 DOM 节点不是空的，那就不能这么做，因为 <code>innerHTML</code> 会直接替换掉原来的所有子节点。</p><p>有两个办法可以插入新的节点。一个是使用 <code>appendChild</code>，把一个子节点添加到父节点的最后一个子节点。例如:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p&gt;\n&lt;div id=&quot;list&quot;&gt;\n  &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt;\n  &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt;\n  &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>把 <code>&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p&gt;</code> 添加到 <code>&lt;div id=&quot;list&quot;&gt;</code> 的最后一项:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const js = document.querySelector(&quot;#js&quot;);\nconst list = document.querySelector(&quot;#list&quot;);\n\nlist.appendChild(js);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在，HTML 结构变成了这样:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;list&quot;&gt;\n  &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt;\n  &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt;\n  &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt;\n  &lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因为我们插入的 js 节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置。</p><p>更多的时候我们会从零创建一个新的节点，然后插入到指定位置:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const list = document.querySelector(&quot;#list&quot;);\nconst haskell = document.createElement(&quot;p&quot;);\n\nhaskell.id = &quot;haskell&quot;;\nhaskell.innerText = &quot;Haskell&quot;;\nlist.appendChild(haskell);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样我们就动态添加了一个新的节点:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;list&quot;&gt;\n  &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt;\n  &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt;\n  &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt;\n  &lt;p id=&quot;haskell&quot;&gt;Haskell&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>动态创建一个节点然后添加到 DOM 树中，可以实现很多功能。举个例子，下面的代码动态创建了一个 <code>&lt;style&gt;</code> 节点，然后把它添加到 <code>&lt;head&gt;</code> 节点的末尾，这样就动态地给文档添加了新的 CSS 定义:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const d = document.createElement(&quot;style&quot;);\n\nd.setAttribute(&quot;type&quot;, &quot;text/css&quot;);\nd.innerHTML = &quot;p { color: red }&quot;;\ndocument.getElementsByTagName(&quot;head&quot;)[0].appendChild(d);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以在 Chrome 的控制台执行上述代码，观察页面样式的变化。</p><h3 id="insertbefore" tabindex="-1"><a class="header-anchor" href="#insertbefore" aria-hidden="true">#</a> insertBefore</h3><p>如果我们要把子节点插入到指定的位置怎么办? 可以使用 <code>parentElement.insertBefore(newElement, referenceElement);</code>，子节点会插入到 <code>referenceElement</code> 之前。</p><p>还是以上面的 HTML 为例，假定我们要把 <code>Haskell</code> 插入到 <code>Python</code> 之前:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;list&quot;&gt;\n  &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt;\n  &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt;\n  &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以这么写:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const list = document.querySelector(&quot;#list&quot;);\nconst ref = document.querySelector(&quot;#python&quot;);\nconst haskell = document.createElement(&quot;p&quot;);\n\nhaskell.id = &quot;haskell&quot;;\nhaskell.innerText = &quot;Haskell&quot;;\nlist.insertBefore(haskell, ref);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>新的 HTML 结构如下:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;list&quot;&gt;\n  &lt;p id=&quot;java&quot;&gt;Java&lt;/p&gt;\n  &lt;p id=&quot;haskell&quot;&gt;Haskell&lt;/p&gt;\n  &lt;p id=&quot;python&quot;&gt;Python&lt;/p&gt;\n  &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可见，使用 <code>insertBefore</code> 重点是要拿到一个“参考子节点”的引用。很多时候，需要循环一个父节点的所有子节点，可以通过迭代 <code>children</code> 属性实现:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let c;\nconst list = document.querySelector(&quot;#list&quot;);\n\nfor (let i = 0; i &lt; list.children.length; i++) c = list.children[i]; // 拿到第i个子节点\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="删除-dom" tabindex="-1"><a class="header-anchor" href="#删除-dom" aria-hidden="true">#</a> 删除 DOM</h2><p>删除一个 DOM 节点就比插入要容易得多。</p><p>要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的 <code>removeChild</code> 把自己删掉:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 拿到待删除节点:\nconst self = document.querySelector(&quot;#to-be-removed&quot;);\n// 拿到父节点:\nconst parent = self.parentElement;\n// 删除:\nconst removed = parent.removeChild(self);\n\nremoved === self; // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置。</p></div><p>当您遍历一个父节点的子节点并进行删除操作时，要注意，<code>children</code> 属性是一个只读属性，并且它在子节点变化时会实时更新。</p><p>例如，对于如下 HTML 结构:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;div id=&quot;parent&quot;&gt;\n  &lt;p&gt;First&lt;/p&gt;\n  &lt;p&gt;Second&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当我们用如下代码删除子节点时:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const parent = document.querySelector(&quot;#parent&quot;);\n\nparent.removeChild(parent.children[0]);\nparent.removeChild(parent.children[1]); // &lt;-- 浏览器报错\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>浏览器报错: <code>parent.children[1]</code> 不是一个有效的节点。原因就在于，当 <code>&lt;p&gt;First&lt;/p&gt;</code> 节点被删除后，<code>parent.children</code> 的节点数量已经从 <code>2</code> 变为了 <code>1</code>，索引 <code>[1]</code> 已经不存在了。</p><p>因此，删除多个节点时，要注意 <code>children</code> 属性时刻都在变化。</p>',57),c={},i=(0,s(82831).Z)(c,[["render",function(e,n){return(0,t.wg)(),(0,t.iD)(t.HY,null,[a,l,r,(0,t.kq)(" more "),p],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,t]of n)s[e]=t;return s}},55640:(e,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-37881894",path:"/code/language/js/browser/dom.html",title:"操作 DOM",lang:"zh-CN",frontmatter:{title:"操作 DOM",icon:"tree",date:"2019-10-16T00:00:00.000Z",category:["JavaScript"],summary:"由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。\n始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:\n\n\n更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；\n\n\n遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；\n\n\n添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；\n\n\n删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。\n\n\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/browser/dom.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"操作 DOM"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-16T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:"<p>由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。</p>\n<p>始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:</p>\n<ul>\n<li>\n<p>更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；</p>\n</li>\n<li>\n<p>遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；</p>\n</li>\n<li>\n<p>添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；</p>\n</li>\n<li>\n<p>删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。</p>\n</li>\n</ul>\n",headers:[{level:2,title:"更新 DOM",slug:"更新-dom",children:[]},{level:2,title:"插入 DOM",slug:"插入-dom",children:[{level:3,title:"insertBefore",slug:"insertbefore",children:[]}]},{level:2,title:"删除 DOM",slug:"删除-dom",children:[]}],git:{createdTime:164464503e4,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:6.76,words:2028},filePathRelative:"code/language/js/browser/dom.md"}}}]);