"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[82428],{56411:(n,s,a)=>{a.r(s),a.d(s,{default:()=>J});var p=a(66252);const e=(0,p.uE)('<p>在初步进入 JavaScript 的世界后，实战是十分重要的。本章是一些经典的案例，可以进行总结与测试。</p><h2 id="成年判断" tabindex="-1"><a class="header-anchor" href="#成年判断" aria-hidden="true">#</a> 成年判断</h2><p>请给出一个函数 <code>isAdult</code>。该函数接受一个数字参数，值为年龄，返回一个布尔值，为对应年龄是否成年。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答案解析<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</p><h2 id="买书" tabindex="-1"><a class="header-anchor" href="#买书" aria-hidden="true">#</a> 买书</h2><p>请给出一个函数 <code>bookPrice</code>。该函数接受两个数字参数，第一个是书的价格，第二个是书的单价。作为一个精明的老板，您决定:</p><ul><li>买 10 本以下，不打折</li><li>满 10 本，打九折</li><li>满 20 本，打八折</li><li><s>不给钱就打骨折😒</s></li></ul><p>该函数返回您要让他付的钱。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">bookPrice</span><span class="token punctuation">(</span><span class="token number">20</span>，<span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n<span class="token function">bookPrice</span><span class="token punctuation">(</span><span class="token number">12</span>，<span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 129.6</span>\n<span class="token function">bookPrice</span><span class="token punctuation">(</span><span class="token number">6</span>，<span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 144</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答案解析<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>。</p><h2 id="数组中特定元素出现次数" tabindex="-1"><a class="header-anchor" href="#数组中特定元素出现次数" aria-hidden="true">#</a> 数组中特定元素出现次数</h2><p>请给出一个函数 <code>getTimes</code>。该函数有两个参数，第一个参数是一个未知长度的装满数字的数组，第二个参数是一个数字。函数返回这个数字在数组中出现的次数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getTimes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token function">getTimes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token function">getTimes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答案解析<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>。</p><h2 id="小九九" tabindex="-1"><a class="header-anchor" href="#小九九" aria-hidden="true">#</a> 小九九</h2><p>请给出一个函数 <code>nineNine</code>。该函数通过遍历返回一个小九九，该小九九不重复。</p><blockquote><p>即一一得一，一二得二，二二得四，一三得三，二三得六...</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">nineNine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;1 × 1 = 1&#39;, &#39;1 × 2 = 2&#39;,&#39;2 × 2 = 4&#39;,&#39;1 × 3 = 3&#39;, ...,&#39;9 × 9 = 81&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>答案解析<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>。</p><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><p>请给出一个函数 <code>pickNumber</code>。该函数返回传入字符串中的所有数字。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">pickNumber</span><span class="token punctuation">(</span><span class="token string">&quot;zhangbowang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span>\n<span class="token function">pickNumber</span><span class="token punctuation">(</span><span class="token string">&quot;z1han2g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;12&#39;</span>\n<span class="token function">pickNumber</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1234&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答案解析<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>。</p><hr class="footnotes-sep">',25),t={class:"footnotes"},o={class:"footnotes-list"},c={id:"footnote1",class:"footnote-item"},l=(0,p._)("p",null,"答案",-1),r=(0,p._)("p",null,[(0,p.Uk)("这道题的逻辑是: 如果 "),(0,p._)("code",null,"age >=18"),(0,p.Uk)(" 返回 "),(0,p._)("code",null,"true"),(0,p.Uk)("，反之返回 "),(0,p._)("code",null,"false"),(0,p.Uk)("。")],-1),u=(0,p._)("p",null,"逻辑图如下:",-1),i=(0,p.uE)('<p>最简单的想法肯定是使用 if 条件判断，把上面的流程图写下来:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>果然，它正常工作了😁。开心的您准备去交差。</p><p>突然，您想起了文档上有这么一句话😳:</p><div class="custom-container center"><p>JavaScript 引擎遇到 <code>return</code> 语句，就直接返回 <code>return</code> 后面的那个表达式的值，</p><p>后面即使还有语句，也不会得到执行。</p></div>',5),k={class:"custom-container right"},m=(0,p.Uk)("文档地址"),E=(0,p.uE)('<p>于是乎，您去掉了 <code>else</code>😮</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>接着，懒惰的您想起了箭头函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">functionName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container right"><p>的写法。决定投个懒😏</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>成了! 现在函数更简洁了，但是这还不够。</p><p>您又想起了条件表达式就是布尔值， 也就是说 <code>age &gt;= 18</code> 本身就是一个布尔值。😉</p><p>现在当它是 <code>true</code> 就 <code>return true</code>，是 <code>false</code> 就 <code>return false</code> 看起来就变成了一个愚蠢的主意😑，于是乎您又改写了一下:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这不就变成了只有一条语句的箭头函数了么? 我们当然可以直接返回它!😆</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后，是时候去掉那个愚蠢的括号了!</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAdult</span> <span class="token operator">=</span> <span class="token parameter">age</span> <span class="token operator">=&gt;</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>恭喜您，您已经得到了最简形式! 😆 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>',15),d={id:"footnote2",class:"footnote-item"},b=(0,p.uE)('<p>答案</p><p>判断顾客买书的个数。</p><p>如果 <code>ammount &lt; 10</code> 不打折，<code>10 &lt;= ammount &lt; 20</code> 打九折，<code>ammount &gt; 20</code> 打八折</p><p>同时 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">顾客最终付款</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord cjk_fallback">书的个数</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord cjk_fallback">书的价格</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">打折力度</span></span></span></span></span></p><p>很简单，只是需要用多次 if 判断，我们把它逻辑图描述如下:</p>',5),A=(0,p.uE)('<p>照着写，您得到了:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> ammount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> percent<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ammount <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> percent <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> ammount <span class="token operator">&amp;&amp;</span> ammount <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> percent <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ammount <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> percent <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n\n  result <span class="token operator">=</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> percent<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>与此同时，您发现您的 if 逻辑判断有重复，当第 6 行执行的时候， <code>ammount</code> 已经不可能小于 10 了，否则它会执行第 5 行。最后一个判断也是没有必要的</p><p>您还发现，如果直接返回 <code>price * ammount * percent</code> 就无需声明 <code>result</code>。</p><p>您想了想，重新画了流程图:</p>',5),g=(0,p.uE)('<p>对应的函数为:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> ammount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> percent<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ammount <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> percent <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ammount <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> percent <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> percent <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> percent<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接着您突发奇想，突然不想声明 <code>percent</code> 了，您又改了流程图:</p>',3),B=(0,p.uE)('<p>您得到了:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> ammount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ammount <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> price <span class="token operator">*</span> ammount<span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ammount <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">return</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',2),f=(0,p.Uk)("您突然响起了 Mr.Hope 说过的单行代码挑战，结合"),v=(0,p.Uk)("三元运算符"),h=(0,p.Uk)("，您又一次压缩了代码:"),D=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> ammount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  ammount <span class="token operator">&lt;</span> <span class="token number">10</span>\n    <span class="token operator">?</span> price <span class="token operator">*</span> ammount\n    <span class="token operator">:</span> ammount <span class="token operator">&lt;=</span> <span class="token number">20</span>\n    <span class="token operator">?</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token number">0.9</span>\n    <span class="token operator">:</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>结合运算符顺序，您去掉了没用的括号，并将它写在一行:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> ammount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  ammount <span class="token operator">&lt;</span> <span class="token number">10</span>\n    <span class="token operator">?</span> price <span class="token operator">*</span> ammount\n    <span class="token operator">:</span> ammount <span class="token operator">&lt;=</span> <span class="token number">20</span>\n    <span class="token operator">?</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token number">0.9</span>\n    <span class="token operator">:</span> price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>它太长了，为什么不把公共的 <code>price * ammount</code> 提取出来呢?</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> ammount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  price <span class="token operator">*</span> ammount <span class="token operator">*</span> <span class="token punctuation">(</span>ammount <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> ammount <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">?</span> <span class="token number">0.9</span> <span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们也可以用更简洁的参数把它变得更短:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bookPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p <span class="token operator">*</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> a <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">?</span> <span class="token number">0.9</span> <span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div> <a href="#footnote-ref2" class="footnote-backref">↩︎</a>',9),y={id:"footnote3",class:"footnote-item"},j=(0,p._)("p",null,"答案",-1),C=(0,p._)("p",null,"我们最简单的想法就是将想要统计 element 与数组的每一个 x 进行比较，如果匹配默默的记一个数，当全部比较完成后返回这个数。",-1),w=(0,p._)("p",null,"用流程图就是:",-1),x=(0,p.uE)('<p>接下来，我们就要细化了。我们希望循环数组，从第一个元素 <code>arr[0]</code> 到 最后一个元素。</p><p>回忆一下，如果数组有 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 个元素，那么数组的索引值是 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。所以最后一个元素是 <code>arr[arr.length - 1]</code>。</p><p>我们只需要创建一个变量 i，让它从 0 循环到 <code>arr.length - 1</code> 即可，这样我们就可以在每次循环中通过访问 <code>arr[i]</code> 来依次访问数组的每一个元素了。</p><p>所以新的流程图是:</p>',4),F=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>您想起了自加自减运算符，同时您发现由于 i 是整数，<code>i &lt;= arr.length - 1</code> 和 <code>i &lt; arr.length</code> 等价，于是您做了一些改动:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>经验告诉您，用 for 循环体将循环变量的处理写在一起更好一些:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>单行挑战:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> c <span class="token operator">:</span> <span class="token function">getTimes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> c <span class="token operator">:</span> <span class="token function">getTimes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> e <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>思路:</p>',9),_=(0,p.uE)('<p>或</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  p <span class="token operator">===</span> a<span class="token punctuation">.</span>length <span class="token operator">?</span> c <span class="token operator">:</span> <span class="token function">getTimes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">===</span> e <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  p <span class="token operator">===</span> a<span class="token punctuation">.</span>length <span class="token operator">?</span> c <span class="token operator">:</span> <span class="token function">getTimes</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">===</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>思路:</p>',4),q=(0,p.Uk)(),T=(0,p._)("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),N={id:"footnote4",class:"footnote-item"},P=(0,p.uE)('<p>答案</p><p>思路:</p><p>这个函数显然要用两层循环，设置第一个变量从 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 到 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span> 循环，在这个循环之中让第二个变量从 <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 到 <code>第一个变量</code> 循环。然后在每次循环中向数组新增一项对应的字符串。</p><p>流程图:</p>',4),U=(0,p.uE)('<p>所以很容易就可以写出:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">nineNine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> × </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">*</span> j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div> <a href="#footnote-ref4" class="footnote-backref">↩︎</a>',4),W=(0,p._)("li",{id:"footnote5",class:"footnote-item"},[(0,p._)("p",null,"答案"),(0,p._)("p",null,[(0,p.Uk)("这道题真的很简单，就是把"),(0,p._)("a",{href:"#%E6%95%B0%E7%BB%84%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%85%83%E7%B4%A0%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0"},"数组中特定元素出现次数"),(0,p.Uk)("中判断元素相等的表达式换成判断是否是数字就可以了。所以答案在此省略。 "),(0,p._)("a",{href:"#footnote-ref5",class:"footnote-backref"},"↩︎")])],-1),z={},J=(0,a(83744).Z)(z,[["render",function(n,s){const a=(0,p.up)("FlowChart"),z=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("section",t,[(0,p._)("ol",o,[(0,p._)("li",c,[l,r,u,(0,p.Wm)(a,{id:"flowchart-382ee242",code:"st%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Agetage%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20age%0Aadult%3D%3Econdition%3A%20age%20%3E%2018%3F%0Atrue%3D%3Einputoutput%3A%20return%20true%0Afalse%3D%3Einputoutput%3A%20return%20false%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Ast-%3Egetage-%3Eadult%0Aadult(yes)-%3Etrue-%3Eend%0Aadult(no)-%3Efalse-%3Eend%0A%0A",preset:"vue"}),i,(0,p._)("div",k,[(0,p._)("p",null,[(0,p.Wm)(z,{to:"/code/language/js/function/declare.html#return"},{default:(0,p.w5)((()=>[m])),_:1})])]),E]),(0,p._)("li",d,[b,(0,p.Wm)(a,{id:"flowchart-64a56f34",code:"st%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Apercent%3D%3Eoperation%3A%20%E5%A3%B0%E6%98%8E%E6%89%93%E6%8A%98%E5%8A%9B%E5%BA%A6%20percent%0Aresult%3D%3Eoperation%3A%20%E5%A3%B0%E6%98%8E%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC%20result%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20price%2C%20ammount%0Afunc1%3D%3Econdition%3A%20ammount%20%3C%2010%3F%0Ap1%3D%3Eoperation%3A%20percent%20%3D%201%0Afunc2%3D%3Econdition%3A%2010%20%3C%3D%20ammount%20%3C%2020%3F%0Ap0.9%3D%3Eoperation%3A%20percent%20%3D%200.9%0Afunc3%3D%3Econdition%3A%20ammount%20%3E%2020%3F%0Ap0.8%3D%3Eoperation%3A%20percent%20%3D%200.8%0Acal%3D%3Eoperation%3A%20result%20%3D%20price%20%C3%97%20ammount%20%C3%97%20percent%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20result%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Ast-%3Epercent-%3Eget-%3Efunc1%0Afunc1(yes%2Cright)-%3Ep1-%3Ecal%0Afunc1(no)-%3Efunc2%0Afunc2(yes%2Cright)-%3Ep0.9-%3Ecal%0Afunc2(no)-%3Efunc3%0Afunc3(yes%2Cright)-%3Ep0.8-%3Ecal%0Acal-%3Ereturn-%3Eend%0A",preset:"vue"}),A,(0,p.Wm)(a,{id:"flowchart-64a56eee",code:"st%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Apercent%3D%3Eoperation%3A%20%E5%A3%B0%E6%98%8E%E6%89%93%E6%8A%98%E5%8A%9B%E5%BA%A6%20percent%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20price%2C%20ammount%0Afunc1%3D%3Econdition%3A%20ammount%20%3C%2010%3F%0Ap1%3D%3Eoperation%3A%20percent%20%3D%201%0Afunc2%3D%3Econdition%3A%20ammount%20%3C%2020%3F%0Ap0.9%3D%3Eoperation%3A%20percent%20%3D%200.9%0Ap0.8%3D%3Eoperation%3A%20percent%20%3D%200.8%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20price%20%C3%97%20ammount%20%C3%97%20percent%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Ast-%3Epercent-%3Eget-%3Efunc1%0Afunc1(yes%2Cright)-%3Ep1-%3Ereturn%0Afunc1(no)-%3Efunc2%0Afunc2(yes%2Cright)-%3Ep0.9-%3Ereturn%0Afunc2(no)-%3Ep0.8-%3Ereturn%0Areturn-%3Eend%0A",preset:"vue"}),g,(0,p.Wm)(a,{id:"flowchart-64a56eb4",code:"st%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20price%2C%20ammount%0Afunc1%3D%3Econdition%3A%20ammount%20%3C%2010%3F%0Afunc2%3D%3Econdition%3A%20ammount%20%3C%2020%3F%0Areturn1%3D%3Einputoutput%3A%20price%20%C3%97%20ammount%20%C3%97%201%0Areturn2%3D%3Einputoutput%3A%20price%20%C3%97%20ammount%20%C3%97%200.9%0Areturn3%3D%3Einputoutput%3A%20price%20%C3%97%20ammount%20%C3%97%200.8%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Ast-%3Eget-%3Efunc1%0Afunc1(yes%2Cright)-%3Ereturn1-%3Eend%0Afunc1(no)-%3Efunc2%0Afunc2(yes%2Cright)-%3Ereturn2-%3Eend%0Afunc2(no)-%3Ereturn3-%3Eend%0A",preset:"vue"}),B,(0,p._)("p",null,[f,(0,p.Wm)(z,{to:"/code/language/js/guide/condition.html#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6"},{default:(0,p.w5)((()=>[v])),_:1}),h]),D]),(0,p._)("li",y,[j,C,w,(0,p.Wm)(a,{id:"flowchart-64a568de",code:"st%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20arr%2C%20element%0Aletcount%3D%3Eoperation%3A%20%E5%A3%B0%E6%98%8E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%20count%20%3D%200%0Agetfirst%3D%3Eoperation%3A%20%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84%EF%BC%8C%E5%BE%97%E5%88%B0%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%20x%0Aequal%3D%3Econdition%3A%20element%20%3D%3D%3D%20x%3F%0Aaddcount%3D%3Eoperation%3A%20count%20%3D%20count%20%2B%201%0Aequal%3D%3Econdition%3A%20element%20%3D%3D%3D%20x%3F%0Aislast%3D%3Econdition%3A%20x%20%E6%98%AF%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E4%B9%88%3F%0Amovex%3D%3Eoperation%3A%20%E8%AE%A9%20x%20%E6%88%90%E4%B8%BA%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20count%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Ast-%3Eget-%3Eletcount-%3Egetfirst-%3Eequal%0Aequal(yes)-%3Eaddcount-%3Eislast%0Aequal(no)-%3Eislast%0Aislast(yes)-%3Ereturn-%3Eend%0Aislast(no)-%3Emovex(top)-%3Eequal%0A",preset:"vue"}),x,(0,p.Wm)(a,{id:"flowchart-64a56870",code:"st%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20arr%2C%20element%0Aletcount%3D%3Eoperation%3A%20%E5%A3%B0%E6%98%8E%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%20count%20%3D%200%0Aleti%3D%3Eoperation%3A%20%E5%A3%B0%E6%98%8E%E5%BE%AA%E7%8E%AF%E5%8F%98%E9%87%8F%20i%20%3D%200%0Aequal%3D%3Econdition%3A%20element%20%3D%3D%3D%20arr%5Bi%5D%3F%0Aaddcount%3D%3Eoperation%3A%20count%20%3D%20count%20%2B%201%0Aequal%3D%3Econdition%3A%20element%20%3D%3D%3D%20x%3F%0Aislast%3D%3Econdition%3A%20i%20%3C%3D%20arr.length%20-%201%3F%0Amovex%3D%3Eoperation%3A%20i%20%3D%20i%20%2B%201%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20count%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Ast-%3Eget-%3Eletcount-%3Eleti-%3Eequal%0Aequal(yes%2Cleft)-%3Eaddcount-%3Eislast%0Aequal(no)-%3Eislast%0Aislast(yes)-%3Ereturn-%3Eend%0Aislast(no)-%3Emovex(top)-%3Eequal%0A",preset:"vue"}),F,(0,p.Wm)(a,{id:"flowchart-64a56822",code:"start%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20arr%2C%20element%2C%20count(%E9%BB%98%E8%AE%A4%E4%B8%BA%200)%0Aequal%3D%3Econdition%3A%20%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E6%98%AF%200%3F%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20count%0Aoperate%3D%3Eoperation%3A%20%E4%BC%A0%E5%85%A5%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20arr%0A%E4%BC%A0%E5%85%A5%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20element%0A%E4%BC%A0%E5%85%A5%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20count%20%2B%20Number(a.pop()%20%3D%3D%3D%20e))%0A(%E8%BF%99%E8%BF%98%E4%BC%9A%E5%90%8C%E6%97%B6%E6%8A%8A%20arr%20%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%88%A0%E6%8E%89)%0Areturnfunc%3D%3Esubroutine%3A%20%E5%B0%86%E6%96%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5%E6%9C%AC%E5%87%BD%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Astart-%3Eget-%3Eequal%0Aequal(yes)-%3Ereturn-%3Eend%0Aequal(no)-%3Eoperate-%3Ereturnfunc(left)%0A",preset:"vue"}),_,(0,p.Wm)(a,{id:"flowchart-64a567e6",code:"start%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Aget%3D%3Einputoutput%3A%20%E8%8E%B7%E5%BE%97%20arr%2C%20element%2C%20count(%E9%BB%98%E8%AE%A4%E4%B8%BA%200)%2Cposition(%E9%BB%98%E8%AE%A4%E4%B8%BA%200)%0Aequal%3D%3Econdition%3A%20position%20%3D%3D%3D%20arr.length%3F%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20count%0Aoperate%3D%3Eoperation%3A%20%E4%BC%A0%E5%85%A5%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20arr%0A%E4%BC%A0%E5%85%A5%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20element%0A%E4%BC%A0%E5%85%A5%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20count%20%2B%20(a%5Bp%5D%20%3D%3D%3D%20e%20%3F%201%20%3A%200)%0A%E4%BC%A0%E5%85%A5%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%BA%20position%20%2B%201%0Areturnfunc%3D%3Esubroutine%3A%20%E5%B0%86%E6%96%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5%E6%9C%AC%E5%87%BD%E6%95%B0%E5%B9%B6%E8%BF%94%E5%9B%9E%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Astart-%3Eget-%3Eequal%0Aequal(yes)-%3Ereturn-%3Eend%0Aequal(no)-%3Eoperate-%3Ereturnfunc(left)%0A",preset:"vue"}),q,T]),(0,p._)("li",N,[P,(0,p.Wm)(a,{id:"flowchart-64a56772",code:"start%3D%3Estart%3A%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%0Aoperate%3D%3Eoperation%3A%20let%20arr%20%3D%20%5B%5D%3B%0Alet%20i%20%3D%201%3B%0Ainitj%3D%3Eoperation%3A%20let%20j%20%3D%201%3B%0Apush%3D%3Eoperation%3A%20%E5%90%91%E6%95%B0%E7%BB%84%E8%BE%93%E5%85%A5%E5%B0%8F%E4%B9%9D%E4%B9%9D%0Aarr.push(%60%24%7Bi%7D%20%C3%97%20%24%7Bj%7D%20%3D%20%24%7Bi%20*%20j%7D%60)%3B%0Aji%3D%3Econdition%3A%20j%20%3C%3D%20i%3F%0Aplusj%3D%3Eoperation%3A%20j%2B%2B%0Ai9%3D%3Econdition%3A%20i%20%3C%3D%209%3F%0Aplusi%3D%3Eoperation%3A%20i%2B%2B%0Areturn%3D%3Einputoutput%3A%20%E8%BF%94%E5%9B%9E%20arr%0Aend%3D%3Eend%3A%20%E7%BB%93%E6%9D%9F%0A%0Astart-%3Eoperate-%3Einitj-%3Epush-%3Eji%0Aji(yes%2Cright)-%3Eplusj(top)-%3Epush%0Aji(no)-%3Ei9%0Ai9(yes)-%3Eplusi(left)-%3Einitj%0Ai9(no)-%3Ereturn-%3Eend%0A",preset:"vue"}),U]),W])])],64)}]])},21714:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-58215d54",path:"/code/language/js/guide/exercise.html",title:"实战",lang:"zh-CN",frontmatter:{title:"实战",icon:"exercise",date:"2019-09-18T00:00:00.000Z",category:["JavaScript"],tag:["快速上手"],summary:"在初步进入 JavaScript 的世界后，实战是十分重要的。本章是一些经典的案例，可以进行总结与测试。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/guide/exercise.html"}],["meta",{property:"og:title",content:"实战"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{name:"twitter:card",content:"summary_large_image"}],["meta",{property:"article:tag",content:"快速上手"}],["meta",{property:"article:published_time",content:"2019-09-18T00:00:00.000Z"}]]},excerpt:"<p>在初步进入 JavaScript 的世界后，实战是十分重要的。本章是一些经典的案例，可以进行总结与测试。</p>\n",headers:[{level:2,title:"成年判断",slug:"成年判断",children:[]},{level:2,title:"买书",slug:"买书",children:[]},{level:2,title:"数组中特定元素出现次数",slug:"数组中特定元素出现次数",children:[]},{level:2,title:"小九九",slug:"小九九",children:[]},{level:2,title:"扩展",slug:"扩展",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:11}]},readingTime:{minutes:9.02,words:2705},filePathRelative:"code/language/js/guide/exercise.md"}}}]);