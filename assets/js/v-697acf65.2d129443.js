"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[41255],{70238:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});var r=t(34086);const a=(0,r._)("p",null,"如果没有明确的指定类型，那么 TypeScript 会依照类型推论(Type Inference)的规则推断出一个类型。",-1),s=(0,r.uE)('<h2 id="什么是类型推论" tabindex="-1"><a class="header-anchor" href="#什么是类型推论" aria-hidden="true">#</a> 什么是类型推论</h2><p>以下代码虽然没有指定类型，但是会在编译的时候报错:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myFavoriteNumber = &quot;seven&quot;;\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>事实上，它等价于:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myFavoriteNumber: string = &quot;seven&quot;;\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myFavoriteNumber;\nmyFavoriteNumber = &quot;seven&quot;;\nmyFavoriteNumber = 7;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',9),i={href:"http://www.typescriptlang.org/docs/handbook/type-inference.html",target:"_blank",rel:"noopener noreferrer"},p=(0,r.Uk)("Type Inference"),o=(0,r.Uk)("("),l={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html",target:"_blank",rel:"noopener noreferrer"},c=(0,r.Uk)("中文版"),d=(0,r.Uk)(")"),m={},u=(0,t(82831).Z)(m,[["render",function(e,n){const t=(0,r.up)("ExternalLinkIcon");return(0,r.wg)(),(0,r.iD)(r.HY,null,[a,(0,r.kq)(" more "),s,(0,r._)("ul",null,[(0,r._)("li",null,[(0,r._)("a",i,[p,(0,r.Wm)(t)]),o,(0,r._)("a",l,[c,(0,r.Wm)(t)]),d])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,r]of n)t[e]=r;return t}},8630:(e,n,t)=>{t.r(n),t.d(n,{data:()=>r});const r={key:"v-697acf65",path:"/code/language/typescript/basics/type-inference.html",title:"类型推论",lang:"zh-CN",frontmatter:{title:"类型推论",icon:"extend",category:["TypeScript"],summary:"如果没有明确的指定类型，那么 TypeScript 会依照类型推论(Type Inference)的规则推断出一个类型。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/type-inference.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"类型推论"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-06-03T17:08:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-06-03T17:08:34.000Z"}]]},excerpt:"<p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论(Type Inference)的规则推断出一个类型。</p>\n",headers:[{level:2,title:"什么是类型推论",slug:"什么是类型推论",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1591204114e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:.69,words:206},filePathRelative:"code/language/typescript/basics/type-inference.md"}}}]);