"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[29569],{39718:(e,n,t)=>{t.r(n),t.d(n,{default:()=>M});var a=t(34086);const s=(0,a.Uk)("注册小程序中的一个页面。接受一个 Object 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。 "),r=(0,a.uE)('<h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><p>Object object</p><p>以下是常用参数:</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Object</td><td>页面的初始数据</td></tr><tr><td>onLoad</td><td>function</td><td>生命周期回调—监听页面加载</td></tr><tr><td>onShow</td><td>function</td><td>生命周期回调—监听页面显示</td></tr><tr><td>onReady</td><td>function</td><td>生命周期回调—监听页面初次渲染完成</td></tr><tr><td>onHide</td><td>function</td><td>生命周期回调—监听页面隐藏</td></tr><tr><td>onUnload</td><td>function</td><td>生命周期回调—监听页面卸载</td></tr><tr><td>onShareAppMessage</td><td>function</td><td>用户点击右上角转发</td></tr><tr><td>onShareTimeline</td><td>function</td><td>用户点击右上角转发到朋友圈</td></tr><tr><td>onAddToFavorites</td><td>function</td><td>用户点击右上角收藏</td></tr></tbody></table><p>以下是较少用到的参数:</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>onPullDownRefresh</td><td>function</td><td>监听用户下拉动作</td></tr><tr><td>onReachBottom</td><td>function</td><td>页面上拉触底事件的处理函数</td></tr><tr><td>onPageScroll</td><td>function</td><td>页面滚动触发事件的处理函数</td></tr><tr><td>onResize</td><td>function</td><td>页面尺寸改变时触发，详见 响应显示区域变化</td></tr><tr><td>onTabItemTap</td><td>function</td><td>当前是 tab 页时，点击 tab 时触发</td></tr><tr><td>其他</td><td>any</td><td>开发者可以添加任意的函数或数据到 Object 参数中，在页面的函数中用 <code>this</code> 可以访问</td></tr></tbody></table><p>示例代码:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// index.js\nPage({\n  data: {\n    text: &quot;This is page data.&quot;,\n  },\n  onLoad(options) {\n    // Do some initialize when page load.\n  },\n  onReady() {\n    // Do something when page ready.\n  },\n  onShow() {\n    // Do something when page show.\n  },\n  onHide() {\n    // Do something when page hide.\n  },\n  onUnload() {\n    // Do something when page close.\n  },\n  onPullDownRefresh() {\n    // Do something when pull down.\n  },\n  onReachBottom() {\n    // Do something when page reach bottom.\n  },\n  onShareAppMessage() {\n    // return custom share data when user share.\n  },\n  onPageScroll() {\n    // Do something when page scroll\n  },\n  onResize() {\n    // Do something when page resize\n  },\n  onTabItemTap(item) {\n    console.log(item.index);\n    console.log(item.pagePath);\n    console.log(item.text);\n  },\n  // Event handler.\n  viewTap() {\n    this.setData(\n      {\n        text: &quot;Set some data for updating view.&quot;,\n      },\n      () =&gt; {\n        // this is setData callback\n      }\n    );\n  },\n  customData: {\n    hi: &quot;MINA&quot;,\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3><p><code>data</code> 是页面第一次渲染使用的初始数据。</p><p>页面加载时，<code>data</code> 将会以 JSON 字符串的形式由逻辑层传至渲染层，因此 <code>data</code> 中的数据必须是可以转成 JSON 的类型 (即不能包含函数或 <code>Set</code>、<code>Symbol</code> 等)。</p><p>渲染层可以通过 WXML 对数据进行绑定。</p><p>示例代码:</p>',13),d={href:"https://developers.weixin.qq.com/s/2PeBsKmn6EZ9",target:"_blank",rel:"noopener noreferrer"},l=(0,a.Uk)("在开发者工具中预览效果"),i=(0,a.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>&lt;view&gt;{{text}}&lt;/view&gt;\n&lt;view&gt;{{array[0].msg}}&lt;/view&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Page({\n  data: {\n    text: &quot;init data&quot;,\n    array: [{ msg: &quot;1&quot; }, { msg: &quot;2&quot; }],\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="生命周期回调函数" tabindex="-1"><a class="header-anchor" href="#生命周期回调函数" aria-hidden="true">#</a> 生命周期回调函数</h3>',3),o=(0,a.Uk)("生命周期的触发以及页面的路由方式详见 "),p=(0,a.Uk)("路由"),c=(0,a.uE)('<h4 id="onload-object-query" tabindex="-1"><a class="header-anchor" href="#onload-object-query" aria-hidden="true">#</a> onLoad(Object query)</h4><p>页面加载时触发。一个页面只会调用一次，可以在 <code>onLoad</code> 的参数中获取打开当前页面路径中的参数。</p><p>参数:</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>query</td><td>Object</td><td>打开当前页面路径中的参数</td></tr></tbody></table><h4 id="onshow" tabindex="-1"><a class="header-anchor" href="#onshow" aria-hidden="true">#</a> onShow()</h4><p>页面显示/切入前台时触发。</p><h4 id="onready" tabindex="-1"><a class="header-anchor" href="#onready" aria-hidden="true">#</a> onReady()</h4><p>页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。</p>',8),b={class:"custom-container warning"},u=(0,a._)("p",{class:"custom-container-title"},"注意",-1),h=(0,a.Uk)("对界面内容进行设置的 API 如 "),m=(0,a._)("code",null,"wx.setNavigationBarTitle",-1),g=(0,a.Uk)("，请在 "),v=(0,a._)("code",null,"onReady",-1),w=(0,a.Uk)(" 之后进行。详见"),x=(0,a.Uk)("生命周期"),j=(0,a.uE)('<h4 id="onhide" tabindex="-1"><a class="header-anchor" href="#onhide" aria-hidden="true">#</a> onHide()</h4><p>页面隐藏/切入后台时触发。如 <code>wx.navigateTo</code> 或底部 tab 切换到其他页面，小程序切入后台等。</p><h4 id="onunload" tabindex="-1"><a class="header-anchor" href="#onunload" aria-hidden="true">#</a> onUnload()</h4><p>页面卸载时触发。如 <code>wx.redirectTo</code> 或 <code>wx.navigateBack</code> 到其他页面时。</p><h3 id="页面事件处理函数" tabindex="-1"><a class="header-anchor" href="#页面事件处理函数" aria-hidden="true">#</a> 页面事件处理函数</h3><h4 id="onpagescroll-object-object" tabindex="-1"><a class="header-anchor" href="#onpagescroll-object-object" aria-hidden="true">#</a> onPageScroll(Object object)</h4><p>监听用户滑动页面事件。</p><p>参数 Object object:</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>scrollTop</td><td>Number</td><td>页面在垂直方向已滚动的距离(单位 px)</td></tr></tbody></table><div class="custom-container warning"><p class="custom-container-title">注意</p><p>请只在需要的时候才在 page 中定义此方法，不要定义空方法。以减少不必要的事件派发对渲染层-逻辑层通信的影响。注意: 请避免在 onPageScroll 中过于频繁的执行 setData 等引起逻辑层-渲染层通信的操作。尤其是每次传输大量数据，会影响通信耗时。</p></div><h4 id="onaddtofavorites-object-object" tabindex="-1"><a class="header-anchor" href="#onaddtofavorites-object-object" aria-hidden="true">#</a> onAddToFavorites(Object object)</h4><blockquote><p>本接口为 Beta 版本，安卓 7.0.15 版本起支持，暂只在安卓平台支持</p></blockquote><p>监听用户点击右上角菜单“收藏”按钮的行为，并自定义收藏内容。</p><p>参数 Object object:</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>webviewUrl</td><td>String</td><td>页面中包含 <code>&lt;web-view&gt;</code> 组件时，返回当前 <code>&lt;web-view&gt;</code> 的 url</td></tr></tbody></table><p>此事件处理函数需要 return 一个 Object，用于自定义收藏内容:</p><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td>自定义标题</td><td>页面标题或账号名称</td></tr><tr><td>imageUrl</td><td>自定义图片，显示图片长宽比为 1:1</td><td>页面截图</td></tr><tr><td>query</td><td>自定义 query 字段</td><td>当前页面的 query</td></tr></tbody></table><p>示例代码:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Page({\n  onAddToFavorites(res) {\n    // webview 页面返回 webviewUrl\n    console.log(&quot;WebviewUrl: &quot;, res.webviewUrl);\n    return {\n      title: &quot;自定义标题&quot;,\n      imageUrl: &quot;http://demo.png&quot;,\n      query: &quot;name=xxx&amp;age=xxx&quot;,\n    };\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="onshareappmessage-object-object" tabindex="-1"><a class="header-anchor" href="#onshareappmessage-object-object" aria-hidden="true">#</a> onShareAppMessage(Object object)</h4><p>监听用户点击页面内转发按钮(<code>&lt;button&gt;</code> 组件 <code>open-type=&quot;share&quot;</code>)或右上角菜单“转发”按钮的行为，并自定义转发内容。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮</p></div><p>参数 Object object:</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>from</td><td>String</td><td>转发事件来源。<br>button: 页面内转发按钮； <br> menu: 右上角转发菜单</td><td>1.2.4</td></tr><tr><td>target</td><td>Object</td><td>如果 from 值是 button，则 target 是触发这次转发事件的 button，否则为 <code>undefined</code></td><td>1.2.4</td></tr><tr><td>webViewUrl</td><td>String</td><td>页面中包含 <code>&lt;web-view&gt;</code> 组件时，返回当前 <code>&lt;web-view&gt;</code> 的 <code>url</code></td><td>1.6.4</td></tr></tbody></table><p>事件处理函数需要 return 一个 <code>Object</code>,用于自定义转发内容，返回内容如下:</p><h4 id="自定义转发内容" tabindex="-1"><a class="header-anchor" href="#自定义转发内容" aria-hidden="true">#</a> 自定义转发内容</h4><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th><th>最低版本</th></tr></thead><tbody><tr><td>title</td><td>转发标题</td><td>当前小程序名称</td><td></td></tr><tr><td>path</td><td>转发路径</td><td>当前页面 <code>path</code> ，必须是以 <code>/</code> 开头的完整路径</td><td></td></tr><tr><td>imageUrl</td><td>自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。<br>支持 PNG 及 JPG。显示图片长宽比是 5:4。</td><td>使用默认截图</td><td>1.5.0</td></tr></tbody></table><p>示例代码:</p>',28),q={href:"https://developers.weixin.qq.com/s/mffqUKmr6fZU",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("在开发者工具中预览效果"),y=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Page({\n  onShareAppMessage(res) {\n    if (res.from === &quot;button&quot;)\n      // 来自页面内转发按钮\n      console.log(res.target);\n\n    return {\n      title: &quot;自定义转发标题&quot;,\n      path: &quot;/page/user?id=123&quot;,\n    };\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="onsharetimeline" tabindex="-1"><a class="header-anchor" href="#onsharetimeline" aria-hidden="true">#</a> onShareTimeline()</h4><blockquote><p>基础库 2.11.3 开始支持</p><p>本接口为 Beta 版本，暂只在 Android 平台支持，详见分享到朋友圈 (Beta)</p></blockquote><p>监听右上角菜单“分享到朋友圈”按钮的行为，并自定义分享内容。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>只有定义了此事件处理函数，右上角菜单才会显示“分享到朋友圈”按钮。</p></div><h5 id="自定义转发内容-1" tabindex="-1"><a class="header-anchor" href="#自定义转发内容-1" aria-hidden="true">#</a> 自定义转发内容</h5><p>事件处理函数返回一个 Object，用于自定义分享内容，不支持自定义页面路径，返回内容如下:</p><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th><th>最低版本</th></tr></thead><tbody><tr><td>title</td><td>自定义标题，即朋友圈列表页上显示的标题</td><td>当前小程序名称</td><td></td></tr><tr><td>query</td><td>自定义页面路径中携带的参数，如 path?a=1&amp;b=2 的 “?” 后面部分</td><td>当前页面路径携带的参数</td><td></td></tr><tr><td>imageUrl</td><td>自定义图片路径，可以是本地文件或者网络图片。支持 PNG 及 JPG，显示图片长宽比是 1:1。</td><td>默认使用小程序 Logo</td><td></td></tr></tbody></table><h4 id="onpulldownrefresh" tabindex="-1"><a class="header-anchor" href="#onpulldownrefresh" aria-hidden="true">#</a> onPullDownRefresh()</h4><p>监听用户下拉刷新事件。</p>',10),k={class:"custom-container tip"},P=(0,a._)("p",{class:"custom-container-title"},"提示",-1),_=(0,a._)("p",null,[(0,a.Uk)("需要在 app.json 的 window 选项中或页面配置中开启 "),(0,a._)("code",null,"enablePullDownRefresh。")],-1),D=(0,a.Uk)("可以通过 "),O={href:"https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html",target:"_blank",rel:"noopener noreferrer"},U=(0,a._)("code",null,"wx.startPullDownRefresh",-1),T=(0,a.Uk)(" 触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。"),S=(0,a.Uk)("当处理完数据刷新后，"),R={href:"https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.stopPullDownRefresh.html",target:"_blank",rel:"noopener noreferrer"},I=(0,a._)("code",null,"wx.stopPullDownRefresh",-1),A=(0,a.Uk)(" 可以停止当前页面的下拉刷新。"),N=(0,a.uE)('<h4 id="onreachbottom" tabindex="-1"><a class="header-anchor" href="#onreachbottom" aria-hidden="true">#</a> onReachBottom()</h4><p>监听用户上拉触底事件。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以在 app.json 的 window 选项中或页面配置中设置触发距离 <code>onReachBottomDistance</code>。</p><p>在触发距离内滑动期间，本事件只会被触发一次。</p></div><h4 id="onresize-object-object" tabindex="-1"><a class="header-anchor" href="#onresize-object-object" aria-hidden="true">#</a> onResize(Object object)</h4><blockquote><p>基础库 2.4.0 开始支持</p></blockquote><p>小程序屏幕旋转时触发。</p><h4 id="ontabitemtap-object-object" tabindex="-1"><a class="header-anchor" href="#ontabitemtap-object-object" aria-hidden="true">#</a> onTabItemTap(Object object)</h4><p>点击 tab 时触发</p><p>Object 参数说明:</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>index</td><td>String</td><td>被点击 tabItem 的序号，从 0 开始</td><td>1.9.0</td></tr><tr><td>pagePath</td><td>String</td><td>被点击 tabItem 的页面路径</td><td>1.9.0</td></tr><tr><td>text</td><td>String</td><td>被点击 tabItem 的按钮文字</td><td>1.9.0</td></tr></tbody></table><p>示例代码:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Page({\n  onTabItemTap(item) {\n    console.log(item.index);\n    console.log(item.pagePath);\n    console.log(item.text);\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="组件事件处理函数" tabindex="-1"><a class="header-anchor" href="#组件事件处理函数" aria-hidden="true">#</a> 组件事件处理函数</h3><p><code>Page</code> 中还可以定义组件事件处理函数。在渲染层的组件中加入事件绑定，当事件被触发时，就会执行 <code>Page</code> 中定义的事件处理函数。</p><p>示例代码:</p>',15),B={href:"https://developers.weixin.qq.com/s/vUf6fKmX64Zn",target:"_blank",rel:"noopener noreferrer"},z=(0,a.Uk)("在开发者工具中预览效果"),C=(0,a.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>&lt;view bindtap=&quot;viewTap&quot;&gt; click me &lt;/view&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Page({\n  viewTap() {\n    console.log(&quot;view tap&quot;);\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="page-route" tabindex="-1"><a class="header-anchor" href="#page-route" aria-hidden="true">#</a> Page.route</h3><p>到当前页面的路径，类型为 <code>String</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Page({\n  onShow() {\n    console.log(this.route);\n  }\n});\nPage.prototype.setData(Object data, Function callback);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>setData</code> 函数用于将数据从逻辑层发送到视图层(异步)，同时改变对应的 <code>this.data</code> 的值(同步)。</p><p>参数说明</p><table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>描述</th><th>最低版本</th></tr></thead><tbody><tr><td>data</td><td>Object</td><td>是</td><td>这次要改变的数据</td><td></td></tr><tr><td>callback</td><td>Function</td><td>否</td><td>setData 引起的界面更新渲染完毕后的回调函数</td><td>1.5.0</td></tr></tbody></table><p><code>Object</code> 以 <code>key: value</code> 的形式表示，将 <code>this.data</code> 中的 <code>key</code> 对应的值改变成 <code>value。</code></p><p>其中 <code>key</code> 可以以数据路径的形式给出，支持改变数组中的某一项或对象的某个属性，如 <code>array[2].message</code>，<code>a.b.c.d</code>，并且不需要在 <code>this.data</code> 中预先定义。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><ol><li>直接修改 <code>this.data</code> 而不调用 <code>this.setData</code> 是无法改变页面的状态的，还会造成数据不一致。</li><li>仅支持设置可 JSON 化的数据。</li><li>单次设置的数据不能超过 1024kB，请尽量避免一次设置过多的数据。</li><li>请不要把 <code>data</code> 中任何一项的 <code>value</code> 设为 <code>undefined</code> ，否则这一项将不被设置并可能遗留一些潜在问题。</li></ol></div><p>示例代码:</p>',12),E={href:"https://developers.weixin.qq.com/s/HofnzKmb6fZe",target:"_blank",rel:"noopener noreferrer"},W=(0,a.Uk)("在开发者工具中预览效果"),F=(0,a.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>&lt;!--index.wxml--&gt;\n&lt;view&gt;{{text}}&lt;/view&gt;\n&lt;button bindtap=&quot;changeText&quot;&gt; Change normal data &lt;/button&gt;\n&lt;view&gt;{{num}}&lt;/view&gt;\n&lt;button bindtap=&quot;changeNum&quot;&gt; Change normal num &lt;/button&gt;\n&lt;view&gt;{{array[0].text}}&lt;/view&gt;\n&lt;button bindtap=&quot;changeItemInArray&quot;&gt; Change Array data &lt;/button&gt;\n&lt;view&gt;{{object.text}}&lt;/view&gt;\n&lt;button bindtap=&quot;changeItemInObject&quot;&gt; Change Object data &lt;/button&gt;\n&lt;view&gt;{{newField.text}}&lt;/view&gt;\n&lt;button bindtap=&quot;addNewField&quot;&gt; Add new data &lt;/button&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// index.js\nPage({\n  data: {\n    text: &quot;init data&quot;,\n    num: 0,\n    array: [{ text: &quot;init data&quot; }],\n    object: {\n      text: &quot;init data&quot;,\n    },\n  },\n  changeText() {\n    // this.data.text = &#39;changed data&#39; // 不要直接修改 this.data\n    // 应该使用 setData\n    this.setData({\n      text: &quot;changed data&quot;,\n    });\n  },\n  changeNum() {\n    // 或者，可以修改 this.data 之后马上用 setData 设置一下修改了的字段\n    this.data.num = 1;\n    this.setData({\n      num: this.data.num,\n    });\n  },\n  changeItemInArray() {\n    // 对于对象或数组字段，可以直接修改一个其下的子字段，这样做通常比修改整个对象或数组更好\n    this.setData({\n      &quot;array[0].text&quot;: &quot;changed data&quot;,\n    });\n  },\n  changeItemInObject() {\n    this.setData({\n      &quot;object.text&quot;: &quot;changed data&quot;,\n    });\n  },\n  addNewField() {\n    this.setData({\n      &quot;newField.text&quot;: &quot;new data&quot;,\n    });\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="pageobject-getcurrentpages" tabindex="-1"><a class="header-anchor" href="#pageobject-getcurrentpages" aria-hidden="true">#</a> PageObject[] getCurrentPages()</h2><p>获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>不要尝试修改页面栈，会导致路由以及页面状态错误。</li><li>不要在 <code>App.onLaunch</code> 的时候调用 <code>getCurrentPages()</code>，此时 <code>page</code> 还没有生成。</li></ul></div>',5),L={},M=(0,t(82831).Z)(L,[["render",function(e,n){const t=(0,a.up)("Badge"),L=(0,a.up)("ExternalLinkIcon"),M=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("p",null,[s,(0,a.Wm)(t,{text:"重要",type:"error"})]),(0,a.kq)(" more "),r,(0,a._)("p",null,[(0,a._)("a",d,[l,(0,a.Wm)(L)])]),i,(0,a._)("p",null,[o,(0,a.Wm)(M,{to:"/code/mini-app/guide/service/route.html"},{default:(0,a.w5)((()=>[p])),_:1})]),c,(0,a._)("div",b,[u,(0,a._)("p",null,[h,m,g,v,w,(0,a.Wm)(M,{to:"/code/mini-app/guide/service/lifetime.html"},{default:(0,a.w5)((()=>[x])),_:1})])]),j,(0,a._)("p",null,[(0,a._)("a",q,[f,(0,a.Wm)(L)])]),y,(0,a._)("div",k,[P,_,(0,a._)("p",null,[D,(0,a._)("a",O,[U,(0,a.Wm)(L)]),T]),(0,a._)("p",null,[S,(0,a._)("a",R,[I,(0,a.Wm)(L)]),A])]),N,(0,a._)("p",null,[(0,a._)("a",B,[z,(0,a.Wm)(L)])]),C,(0,a._)("p",null,[(0,a._)("a",E,[W,(0,a.Wm)(L)])]),F],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,a]of n)t[e]=a;return t}},49427:(e,n,t)=>{t.r(n),t.d(n,{data:()=>a});const a={key:"v-acff2abc",path:"/code/mini-app/guide/service/page.html",title:"Page",lang:"zh-CN",frontmatter:{title:"Page",icon:"page",category:["小程序"],summary:"注册小程序中的一个页面。接受一个 Object 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。 \n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/mini-app/guide/service/page.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"Page"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2021-03-21T09:22:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2021-03-21T09:22:34.000Z"}]]},excerpt:'<p>注册小程序中的一个页面。接受一个 Object 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。 <Badge text="重要" type="error" /></p>\n',headers:[{level:2,title:"参数",slug:"参数",children:[{level:3,title:"data",slug:"data",children:[]},{level:3,title:"生命周期回调函数",slug:"生命周期回调函数",children:[]},{level:3,title:"页面事件处理函数",slug:"页面事件处理函数",children:[]},{level:3,title:"组件事件处理函数",slug:"组件事件处理函数",children:[]},{level:3,title:"Page.route",slug:"page-route",children:[]}]},{level:2,title:"PageObject[] getCurrentPages()",slug:"pageobject-getcurrentpages",children:[]}],git:{createdTime:1604856934e3,updatedTime:1616318554e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:8}]},readingTime:{minutes:8.82,words:2646},filePathRelative:"code/mini-app/guide/service/page.md"}}}]);