"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[31154],{74455:(n,e,s)=>{s.r(e),s.d(e,{default:()=>g});var a=s(34086);const r=(0,a._)("p",null,"用 Vue.js + Vue Router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当您要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。",-1),t=(0,a.uE)('<p>下面是个基本例子:</p><h2 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n  &lt;h1&gt;Hello App!&lt;/h1&gt;\n  &lt;p&gt;\n    &lt;!-- 使用 router-link 组件来导航. --&gt;\n    &lt;!-- 通过传入 `to` 属性指定链接. --&gt;\n    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;\n    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;\n    &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;\n  &lt;/p&gt;\n  &lt;!-- 路由出口 --&gt;\n  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;\n  &lt;router-view /&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 1. 定义 (路由) 组件。\n// 可以从其他文件 import 进来\nconst Foo = { template: &quot;&lt;div&gt;foo&lt;/div&gt;&quot; };\nconst Bar = { template: &quot;&lt;div&gt;bar&lt;/div&gt;&quot; };\n\n// 2. 定义路由\n// 每个路由应该映射一个组件。其中&quot;component&quot; 可以是\n// 通过 Vue.extend() 创建的组件构造器，\n// 或者，只是一个组件配置对象。\n// 我们晚点再讨论嵌套路由。\nconst routes = [\n  { path: &quot;/foo&quot;, component: Foo },\n  { path: &quot;/bar&quot;, component: Bar },\n];\n\n// 3. 创建 router 实例，然后传 `routes` 配置\n// 您还可以传别的配置参数, 不过先这么简单着吧。\nconst router = VueRouter.createRouter({\n  history: VueRouter.createWebHashHistory(),\n  routes, // (缩写) 相当于 routes: routes\n});\n\n// 4. 创建和挂载根实例。\n// 记得要通过 router 配置参数注入路由，\n// 从而让整个应用都有路由功能\nconst app = Vue.createApp({}).use(router).$mount(&quot;#app&quot;);\n\n// 现在，应用已经启动了!\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>通过注入路由器，我们可以在任何组件内通过 <code>this.$router</code> 访问路由器，也可以通过 <code>this.$route</code> 访问当前路由:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// Home.vue\nexport default {\n  computed: {\n    username() {\n      // 我们很快就会看到 `params` 是什么\n      return this.$route.params.username;\n    },\n  },\n  methods: {\n    goToDashboard() {\n      if (isAuthenticated) {\n        this.$router.push(&quot;/dashboard&quot;);\n      } else {\n        this.$router.push(&quot;/login&quot;);\n      }\n    },\n  },\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>该文档通篇都常使用 <code>router</code> 实例。留意一下 <code>this.$router</code> 和 <code>router</code> 使用起来完全一样。我们使用 <code>this.$router</code> 的原因是我们并不想在每个独立需要封装路由的组件中都导入路由。</p>',8),l=(0,a.Uk)("要注意，当 "),p=(0,a._)("code",null,"<router-link>",-1),u=(0,a.Uk)(" 对应的路由匹配成功，将自动设置 class 属性值 "),o=(0,a._)("code",null,".router-link-active",-1),i=(0,a.Uk)("。查看"),c={href:"https://router.vuejs.org/zh/api/",target:"_blank",rel:"noopener noreferrer"},b=(0,a.Uk)("API 文档"),m=(0,a.Uk)("学习更多相关内容。"),d={},g=(0,s(82831).Z)(d,[["render",function(n,e){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a.kq)(" more "),t,(0,a._)("p",null,[l,p,u,o,i,(0,a._)("a",c,[b,(0,a.Wm)(s)]),m])],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}},58247:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-3cccf502",path:"/code/vue/router/demo.html",title:"案例",lang:"zh-CN",frontmatter:{title:"案例",icon:"discover",category:["Vue"],tag:["Vue Router","Demo"],summary:"用 Vue.js + Vue Router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当您要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/vue/router/demo.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"案例"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Vue Router"}],["meta",{property:"article:tag",content:"Demo"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>用 Vue.js + Vue Router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当您要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。</p>\n",headers:[{level:2,title:"HTML",slug:"html",children:[]},{level:2,title:"JavaScript",slug:"javascript",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:7}]},readingTime:{minutes:1.92,words:575},filePathRelative:"code/vue/router/demo.md"}}}]);