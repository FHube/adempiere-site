"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[93076],{721:(n,s,e)=>{e.r(s),e.d(s,{default:()=>t});const a=(0,e(34086).uE)('<p>当我们使用 jQuery 对象的方法时，由于 jQuery 对象可以操作一组 DOM，而且支持链式操作，所以用起来非常方便。</p><p>但是 jQuery 内置的方法永远不可能满足所有的需求。比如，我们想要高亮显示某些 DOM 元素，用 jQuery 可以这么实现:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;span.hl&quot;).css(&quot;backgroundColor&quot;, &quot;#fffceb&quot;).css(&quot;color&quot;, &quot;#d85030&quot;);\n\n$(&quot;p a.hl&quot;).css(&quot;backgroundColor&quot;, &quot;#fffceb&quot;).css(&quot;color&quot;, &quot;#d85030&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>总是写重复代码可不好，万一以后还要修改字体就更麻烦了，能不能统一起来，写个 <code>highlight()</code> 方法?</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;span.hl&quot;).highlight();\n\n$(&quot;p a.hl&quot;).highlight();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答案是肯定的。我们可以扩展 jQuery 来实现自定义方法。将来如果要修改高亮的逻辑，只需修改一处扩展代码。这种方式也称为编写 jQuery 插件。</p><h2 id="编写-jquery-插件" tabindex="-1"><a class="header-anchor" href="#编写-jquery-插件" aria-hidden="true">#</a> 编写 jQuery 插件</h2><p>给 jQuery 对象绑定一个新方法是通过扩展 <code>$.fn</code> 对象实现的。让我们来编写第一个扩展—— <code>highlight1()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$.fn.highlight1 = function () {\n  // this已绑定为当前jQuery对象:\n  this.css(&quot;backgroundColor&quot;, &quot;#fffceb&quot;).css(&quot;color&quot;, &quot;#d85030&quot;);\n  return this;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意到函数内部的 <code>this</code> 在调用时被绑定为 jQuery 对象，所以函数内部代码可以正常调用所有 jQuery 对象的方法。</p><p>对于如下的 HTML 结构:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;test-highlight1&quot;&gt;\n  &lt;p&gt;什么是&lt;span&gt;jQuery&lt;/span&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;span&gt;jQuery&lt;/span&gt;是目前最流行的&lt;span&gt;JavaScript&lt;/span&gt;库。&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>来测试一下 <code>highlight1()</code> 的效果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\n$(&quot;#test-highlight1 span&quot;).highlight1();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>细心的您可能发现了，为什么最后要 <code>return this</code> ;? 因为 jQuery 对象支持链式操作，我们自己写的扩展方法也要能继续链式下去:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;span.hl&quot;).highlight1().slideDown();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不然，用户调用的时候，就不得不把上面的代码拆成两行。</p><p>但是这个版本并不完美。有的用户希望高亮的颜色能自己来指定，怎么办?</p><p>我们可以给方法加个参数，让用户自己把参数用对象传进去。于是我们有了第二个版本的 <code>highlight2()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$.fn.highlight2 = function (options) {\n  // 要考虑到各种情况:\n  // options为undefined\n  // options只有部分key\n  const bgcolor = (options &amp;&amp; options.backgroundColor) || &quot;#fffceb&quot;;\n  const color = (options &amp;&amp; options.color) || &quot;#d85030&quot;;\n  this.css(&quot;backgroundColor&quot;, bgcolor).css(&quot;color&quot;, color);\n  return this;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>对于如下 HTML 结构:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;test-highlight2&quot;&gt;\n  &lt;p&gt;什么是&lt;span&gt;jQuery&lt;/span&gt; &lt;span&gt;Plugin&lt;/span&gt;&lt;/p&gt;\n  &lt;p&gt;\n    编写&lt;span&gt;jQuery&lt;/span&gt;\n    &lt;span&gt;Plugin&lt;/span&gt;可以用来扩展&lt;span&gt;jQuery&lt;/span&gt;的功能。\n  &lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>来实测一下带参数的 <code>highlight2()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\n$(&quot;#test-highlight2 span&quot;).highlight2({\n  backgroundColor: &quot;#00a8e6&quot;,\n  color: &quot;#ffffff&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对于默认值的处理，我们用了一个简单的 <code>&amp;&amp;</code> 和 <code>||</code> 短路操作符，总能得到一个有效的值。</p><p>另一种方法是使用 jQuery 提供的辅助方法 <code>$.extend(target, obj1, obj2, ...)</code>，它把多个 object 对象的属性合并到第一个 target 对象中，遇到同名属性，总是使用靠后的对象的值，也就是越往后优先级越高:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 把默认值和用户传入的options合并到对象{}中并返回:\nconst opts = $.extend(\n  {},\n  {\n    backgroundColor: &quot;#00a8e6&quot;,\n    color: &quot;#ffffff&quot;,\n  },\n  options\n);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>紧接着用户对 <code>highlight2()</code> 提出了意见: 每次调用都需要传入自定义的设置，能不能让我自己设定一个缺省值，以后的调用统一使用无参数的 <code>highlight2()</code>?</p><p>也就是说，我们设定的默认值应该能允许用户修改。</p><p>那默认值放哪比较合适? 放全局变量肯定不合适，最佳地点是 <code>$.fn.highlight2</code> 这个函数对象本身。</p><p>于是最终版的 <code>highlight()</code> 终于诞生了:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$.fn.highlight = function (options) {\n  // 合并默认值和用户设定值:\n  const opts = $.extend({}, $.fn.highlight.defaults, options);\n  this.css(&quot;backgroundColor&quot;, opts.backgroundColor).css(&quot;color&quot;, opts.color);\n  return this;\n};\n\n// 设定默认值:\n$.fn.highlight.defaults = {\n  color: &quot;#d85030&quot;,\n  backgroundColor: &quot;#fff8de&quot;,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这次用户终于满意了。用户使用时，只需一次性设定默认值:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$.fn.highlight.defaults.color = &quot;#fff&quot;;\n$.fn.highlight.defaults.backgroundColor = &quot;#000&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后就可以非常简单地调用 <code>highlight()</code> 了。</p><p>对如下的 HTML 结构:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;test-highlight&quot;&gt;\n  &lt;p&gt;如何编写&lt;span&gt;jQuery&lt;/span&gt; &lt;span&gt;Plugin&lt;/span&gt;&lt;/p&gt;\n  &lt;p&gt;\n    编写&lt;span&gt;jQuery&lt;/span&gt;\n    &lt;span&gt;Plugin&lt;/span\n    &gt;，要设置&lt;span&gt;默认值&lt;/span&gt;，并允许用户修改&lt;span&gt;默认值&lt;/span&gt;，或者运行时传入&lt;span&gt;其他值&lt;/span&gt;。\n  &lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>实测一下修改默认值的效果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\n$.fn.highlight.defaults.color = &quot;#659f13&quot;;\n$.fn.highlight.defaults.backgroundColor = &quot;#f2fae3&quot;;\n\n$(&quot;#test-highlight p:first-child span&quot;).highlight();\n\n$(&quot;#test-highlight p:last-child span&quot;).highlight({\n  color: &quot;#dd1144&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>最终，我们得出编写一个 jQuery 插件的原则:</p><ul><li>给 <code>$.fn</code> 绑定函数，实现插件的代码逻辑；</li><li>插件函数最后要 <code>return this</code> ;以支持链式调用；</li><li>插件函数要有默认值，绑定在 <code>$.fn.&lt;pluginName&gt;.defaults</code> 上；</li><li>用户在调用时可传入设定值以便覆盖默认值。</li></ul><h2 id="针对特定元素的扩展" tabindex="-1"><a class="header-anchor" href="#针对特定元素的扩展" aria-hidden="true">#</a> 针对特定元素的扩展</h2><p>我们知道 jQuery 对象的有些方法只能作用在特定 DOM 元素上，比如 <code>submit()</code> 方法只能针对 form。如果我们编写的扩展只能针对某些类型的 DOM 元素，应该怎么写?</p><p>还记得 jQuery 的选择器支持 <code>filter()</code> 方法来过滤吗? 我们可以借助这个方法来实现针对特定元素的扩展。</p><p>举个例子，现在我们要给所有指向外链的超链接加上跳转提示，怎么做?</p><p>先写出用户调用的代码:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;#main a&quot;).external();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后按照上面的方法编写一个 <code>external</code> 扩展:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$.fn.external = function () {\n  // return返回的each()返回结果，支持链式调用:\n  return this.filter(&quot;a&quot;).each(function () {\n    // 注意: each()内部的回调函数的this绑定为DOM本身!\n    const a = $(this);\n    const url = a.attr(&quot;href&quot;);\n    if (\n      url &amp;&amp;\n      (url.indexOf(&quot;http://&quot;) === 0 || url.indexOf(&quot;https://&quot;) === 0)\n    ) {\n      a.attr(&quot;href&quot;, &quot;#0&quot;)\n        .removeAttr(&quot;target&quot;)\n        .append(&#39; &lt;i class=&quot;uk-icon-external-link&quot;&gt;&lt;/i&gt;&#39;)\n        .click(function () {\n          if (confirm(&quot;您确定要前往&quot; + url + &quot;? &quot;)) {\n            window.open(url);\n          }\n        });\n    }\n  });\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>对如下的 HTML 结构:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>&lt;!-- HTML结构 --&gt;\n&lt;div id=&quot;test-external&quot;&gt;\n  &lt;p&gt;如何学习&lt;a href=&quot;https://jquery.com&quot;&gt;jQuery&lt;/a&gt;?&lt;/p&gt;\n  &lt;p&gt;\n    首先，您要学习&lt;a\n      href=&quot;/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot;\n      &gt;JavaScript&lt;/a\n    &gt;，并了解基本的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;\n      &gt;HTML&lt;/a\n    &gt;。\n  &lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>实测外链效果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\n$(&quot;#test-external a&quot;).external();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>扩展 jQuery 对象的功能十分简单，但是我们要遵循 jQuery 的原则，编写的扩展方法能支持链式调用、具备默认值和过滤特定元素，使得扩展方法看上去和 jQuery 本身的方法没有什么区别。</p>',55),l={},t=(0,e(82831).Z)(l,[["render",function(n,s){return a}]])},82831:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},11232:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-c7d79daa",path:"/code/website/jQuery/extend.html",title:"扩展",lang:"zh-CN",frontmatter:{title:"扩展",icon:"plugin",date:"2019-11-05T00:00:00.000Z",category:["jQuery"],summary:"当我们使用 jQuery 对象的方法时，由于 jQuery 对象可以操作一组 DOM，而且支持链式操作，所以用起来非常方便。 但是 jQuery 内置的方法永远不可能满足所有的需求。比如，我们想要高亮显示某些 DOM 元素，用 jQuery 可以这么实现: 总是写重复代码可不好，万一以后还要修改字体就更麻烦了，能不能统一起来，写个 highlight() 方",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/website/jQuery/extend.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"扩展"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-11-05T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"编写 jQuery 插件",slug:"编写-jquery-插件",children:[]},{level:2,title:"针对特定元素的扩展",slug:"针对特定元素的扩展",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:5.14,words:1543},filePathRelative:"code/website/jQuery/extend.md"}}}]);