"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7216],{98691:(e,n,t)=>{t.r(n),t.d(n,{default:()=>b});var s=t(34086);const a=(0,s._)("p",null,"数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。",-1),r=(0,s._)("p",null,"元组起源于函数编程语言(如 F#)，这些语言中会频繁使用元组。",-1),l=(0,s.uE)('<h2 id="简单的例子" tabindex="-1"><a class="header-anchor" href="#简单的例子" aria-hidden="true">#</a> 简单的例子</h2><p>定义一对值分别为 <code>string</code> 和 <code>number</code> 的元组:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let tom: [string, number] = [&quot;Tom&quot;, 25];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当赋值或访问一个已知索引的元素时，会得到正确的类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let tom: [string, number];\ntom[0] = &quot;Tom&quot;;\ntom[1] = 25;\n\ntom[0].slice(1);\ntom[1].toFixed(2);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>也可以只赋值其中一项:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let tom: [string, number];\ntom[0] = &quot;Tom&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let tom: [string, number];\ntom = [&quot;Tom&quot;, 25];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let tom: [string, number];\ntom = [&quot;Tom&quot;];\n\n// Property &#39;1&#39; is missing in type &#39;[string]&#39; but required in type &#39;[string, number]&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="越界的元素" tabindex="-1"><a class="header-anchor" href="#越界的元素" aria-hidden="true">#</a> 越界的元素</h2><p>当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let tom: [string, number];\ntom = [&quot;Tom&quot;, 25];\ntom.push(&quot;male&quot;);\ntom.push(true);\n\n// Argument of type &#39;true&#39; is not assignable to parameter of type &#39;string | number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',14),i={href:"http://www.typescriptlang.org/docs/handbook/basic-types.html#tuple",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)("Basic Types # Tuple"),o=(0,s.Uk)("("),c={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#%E5%85%83%E7%BB%84-tuple",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("中文版"),d=(0,s.Uk)(")"),m={},b=(0,t(82831).Z)(m,[["render",function(e,n){const t=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[a,r,(0,s.kq)(" more "),l,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",i,[p,(0,s.Wm)(t)]),o,(0,s._)("a",c,[u,(0,s.Wm)(t)]),d])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,s]of n)t[e]=s;return t}},95320:(e,n,t)=>{t.r(n),t.d(n,{data:()=>s});const s={key:"v-1127c682",path:"/code/language/typescript/advanced/tuple.html",title:"元组",lang:"zh-CN",frontmatter:{title:"元组",icon:"list",category:["TypeScript"],summary:"数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。\n元组起源于函数编程语言(如 F#)，这些语言中会频繁使用元组。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/advanced/tuple.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"元组"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-06-03T17:08:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-06-03T17:08:34.000Z"}]]},excerpt:"<p>数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。</p>\n<p>元组起源于函数编程语言(如 F#)，这些语言中会频繁使用元组。</p>\n",headers:[{level:2,title:"简单的例子",slug:"简单的例子",children:[]},{level:2,title:"越界的元素",slug:"越界的元素",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1591204114e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:1,words:299},filePathRelative:"code/language/typescript/advanced/tuple.md"}}}]);