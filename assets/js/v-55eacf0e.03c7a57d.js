"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[57945],{48176:(n,s,e)=>{e.r(s),e.d(s,{default:()=>_});var a=e(34086);const p={id:"注册小程序",tabindex:"-1"},r=(0,a._)("a",{class:"header-anchor",href:"#注册小程序","aria-hidden":"true"},"#",-1),l=(0,a.Uk)(" 注册小程序 "),i=(0,a._)("p",null,[(0,a.Uk)("每个小程序都需要在 "),(0,a._)("code",null,"app.js"),(0,a.Uk)(" 中调用 "),(0,a._)("code",null,"App"),(0,a.Uk)(" 方法注册小程序示例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。")],-1),b=(0,a.Uk)("详细的参数含义和使用请参考 "),c=(0,a.Uk)("App 参考文档"),t=(0,a.Uk)("。"),o=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// app.js\nApp({\n  onLaunch(options) {\n    // Do something initial when launch.\n  },\n  onShow(options) {\n    // Do something when show.\n  },\n  onHide() {\n    // Do something when hide.\n  },\n  onError(msg) {\n    console.log(msg);\n  },\n  globalData: &quot;I am global data&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>整个小程序只有一个 App 实例，是全部页面共享的。</p><p>通过 <code>getApp</code> 方法获取到全局唯一的 App 示例，获取 App 上的数据或调用注册在 App 上的函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// xxx.js\nconst appInstance = getApp();\nconsole.log(appInstance.globalData); // I am global data\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="注册页面" tabindex="-1"><a class="header-anchor" href="#注册页面" aria-hidden="true">#</a> 注册页面</h2><p>对于小程序中的每个页面，都需要在页面对应的 js 文件中进行注册，指定页面的初始数据、生命周期回调、事件处理函数等。</p>',6),m={id:"使用-page-构造器注册页面",tabindex:"-1"},u=(0,a._)("a",{class:"header-anchor",href:"#使用-page-构造器注册页面","aria-hidden":"true"},"#",-1),d=(0,a.Uk)(" 使用 Page 构造器注册页面 "),g=(0,a.uE)('<p>简单的页面可以使用 <code>Page()</code> 进行构造。</p><p>代码示例:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>//index.js\nPage({\n  data: {\n    text: &quot;This is page data.&quot;,\n  },\n  onLoad(options) {\n    // 页面创建时执行\n  },\n  onShow() {\n    // 页面出现在前台时执行\n  },\n  onReady() {\n    // 页面首次渲染完毕时执行\n  },\n  onHide() {\n    // 页面从前台变为后台时执行\n  },\n  onUnload() {\n    // 页面销毁时执行\n  },\n  onPullDownRefresh() {\n    // 触发下拉刷新时执行\n  },\n  onReachBottom() {\n    // 页面触底时执行\n  },\n  onShareAppMessage() {\n    // 页面被用户分享时执行\n  },\n  onPageScroll() {\n    // 页面滚动时执行\n  },\n  onResize() {\n    // 页面尺寸变化时执行\n  },\n  onTabItemTap(item) {\n    // tab 点击时执行\n    console.log(item.index);\n    console.log(item.pagePath);\n    console.log(item.text);\n  },\n  // 事件响应函数\n  viewTap() {\n    this.setData(\n      {\n        text: &quot;Set some data for updating view.&quot;,\n      },\n      () =&gt; {\n        // this is setData callback\n      }\n    );\n  },\n  // 自由数据\n  customData: {\n    hi: &quot;MINA&quot;,\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div>',3),h=(0,a.Uk)("详细的参数含义和使用请参考 "),v=(0,a.Uk)("Page 参考文档"),x=(0,a.Uk)("。"),f={id:"使用-component-构造器构造页面",tabindex:"-1"},k=(0,a._)("a",{class:"header-anchor",href:"#使用-component-构造器构造页面","aria-hidden":"true"},"#",-1),j=(0,a.Uk)(" 使用 Component 构造器构造页面 "),w=(0,a.uE)('<p><code>Page</code> 构造器适用于简单的页面。但对于复杂的页面， <code>Page</code> 构造器可能并不好用。</p><p>此时，可以使用 <code>Component</code> 构造器来构造页面。<code>Component</code> 构造器的主要区别是: 方法需要放在 <code>methods: { }</code> 里面。</p><p>代码示例:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Component({\n  data: {\n    text: &quot;This is page data.&quot;,\n  },\n  methods: {\n    onLoad(options) {\n      // 页面创建时执行\n    },\n    onPullDownRefresh() {\n      // 下拉刷新时执行\n    },\n    // 事件响应函数\n    viewTap() {\n      // ...\n    },\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>这种创建方式非常类似于 自定义组件 ，可以像自定义组件一样使用 <code>behaviors</code> 等高级特性。</p><p>具体细节请阅读 <code>Component</code> 构造器 章节。</p>',6),A={},_=(0,e(82831).Z)(A,[["render",function(n,s){const e=(0,a.up)("Badge"),A=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("h2",p,[r,l,(0,a.Wm)(e,{text:"重要",type:"error"})]),i,(0,a._)("p",null,[b,(0,a.Wm)(A,{to:"/code/mini-app/guide/service/app.html"},{default:(0,a.w5)((()=>[c])),_:1}),t]),o,(0,a._)("h3",m,[u,d,(0,a.Wm)(e,{text:"重要",type:"error"})]),g,(0,a._)("p",null,[h,(0,a.Wm)(A,{to:"/code/mini-app/guide/service/page.html"},{default:(0,a.w5)((()=>[v])),_:1}),x]),(0,a._)("h3",f,[k,j,(0,a.Wm)(e,{text:"初学无需了解",type:"grey"})]),w],64)}]])},82831:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},36532:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-55eacf0e",path:"/code/mini-app/guide/service/register.html",title:"注册",lang:"zh-CN",frontmatter:{title:"注册",icon:"config",category:["小程序"],summary:"注册小程序 每个小程序都需要在 app.js 中调用 App 方法注册小程序示例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。 详细的参数含义和使用请参考 App 参考文档。 整个小程序只有一个 App 实例，是全部页面共享的。 通过 getApp 方法获取到全局唯一的 App 示例，获取 App 上的数据或调用注册在 App 上的函数。 注册页面",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/mini-app/guide/service/register.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"注册"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2021-03-21T09:22:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2021-03-21T09:22:34.000Z"}]]},excerpt:"",headers:[{level:2,title:"注册小程序",slug:"注册小程序",children:[]},{level:2,title:"注册页面",slug:"注册页面",children:[{level:3,title:"使用 Page 构造器注册页面",slug:"使用-page-构造器注册页面",children:[]},{level:3,title:"使用 Component 构造器构造页面",slug:"使用-component-构造器构造页面",children:[]}]}],git:{createdTime:1604856934e3,updatedTime:1616318554e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:2.09,words:627},filePathRelative:"code/mini-app/guide/service/register.md"}}}]);