"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[91791],{73870:(n,e,s)=>{s.r(e),s.d(e,{default:()=>t});var a=s(34086);const r=(0,a._)("p",null,"ES6 标准新增了一种新的函数: Arrow Function (箭头函数)。",-1),i=(0,a._)("p",null,"为什么叫 Arrow Function ? 因为它的定义用的就是一个箭头:",-1),l=(0,a._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,a._)("pre",{class:"language-javascript"},[(0,a._)("code",null,"(x) => x * x;\n")]),(0,a._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),c=(0,a.uE)('<p>上面的箭头函数相当于:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function (x) {\n  return x * x;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种像上面的，只包含一个表达式，连 <code>{ ... }</code> 和 <code>return</code> 都省略掉了。还有一种可以包含多条语句，这时候就不能省略 <code>{ ... }</code> 和 <code>return</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>(x) =&gt; {\n  if (x &gt; 0) return x * x;\n  else return -x * x;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果参数不是一个，就需要用括号 <code>()</code> 括起来:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 两个参数:\n(x, y) =&gt; x * x + y * y\n\n// 无参数:\n() =&gt; 3.14\n\n// 可变参数:\n(x, y, ...rest) =&gt; {\n  let i;\n  let sum = x + y;\n\n  for (i = 0; i &lt; rest.length; i++)\n    sum += rest[i];\n\n  return sum;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// SyntaxError:\n(x) =&gt; {\n  foo: x;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因为和函数体的 <code>{ ... }</code> 有语法冲突，所以要改为:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// ok:\n(x) =&gt; ({ foo: x });\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="箭头函数的-this" tabindex="-1"><a class="header-anchor" href="#箭头函数的-this" aria-hidden="true">#</a> 箭头函数的 this</h2><p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别: 箭头函数内部的 <code>this</code> 是词法作用域，由上下文确定。</p><p>回顾前面的例子，由于 JavaScript 函数对 <code>this</code> 绑定的错误处理，下面的例子无法得到预期结果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const obj = {\n  birth: 1990,\n  getAge() {\n    const b = this.birth; // 1990\n    const fn = function () {\n      return new Date().getFullYear() - this.birth; // this 指向 window 或 undefined\n    };\n\n    return fn();\n  },\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>现在，箭头函数完全修复了 <code>this</code> 的指向，<code>this</code> 总是指向词法作用域，也就是外层调用者 <code>obj</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const obj = {\n  birth: 1990,\n  getAge() {\n    const b = this.birth; // 1990\n    const fn = () =&gt; new Date().getFullYear() - this.birth; // this 指向 obj 对象\n\n    return fn();\n  },\n};\n\nobj.getAge(); // 25\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果使用箭头函数，以前的那种 hack 写法:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const that = this;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就不再需要了。</p><p>由于 <code>this</code> 在箭头函数中已经按照词法作用域绑定了，所以，用 <code>call()</code> 或者 <code>apply()</code> 调用箭头函数时，无法对 <code>this</code> 进行绑定，即传入的第一个参数被忽略:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const obj = {\n  birth: 1990,\n  getAge(year) {\n    const b = this.birth; // 1990\n    const fn = (y) =&gt; y - this.birth; // this.birth 仍是 1990\n\n    return fn.call({ birth: 2000 }, year);\n  },\n};\n\nobj.getAge(2015); // 25\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',21),p={},t=(0,s(82831).Z)(p,[["render",function(n,e){return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,i,l,(0,a.kq)(" more "),c],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}},5175:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-7ba4ff44",path:"/code/language/js/function/arrow-function.html",title:"箭头函数",lang:"zh-CN",frontmatter:{title:"箭头函数",icon:"arrow",date:"2019-10-03T00:00:00.000Z",category:["JavaScript"],summary:"ES6 标准新增了一种新的函数: Arrow Function (箭头函数)。\n为什么叫 Arrow Function ? 因为它的定义用的就是一个箭头:\n(x) =&gt; x * x;\n1",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/function/arrow-function.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"箭头函数"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-03T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:'<p>ES6 标准新增了一种新的函数: Arrow Function (箭头函数)。</p>\n<p>为什么叫 Arrow Function ? 因为它的定义用的就是一个箭头:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>(x) =&gt; x * x;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>',headers:[{level:2,title:"箭头函数的 this",slug:"箭头函数的-this",children:[]}],git:{createdTime:1604686203e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:1.85,words:554},filePathRelative:"code/language/js/function/arrow-function.md"}}}]);