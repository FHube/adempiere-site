"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4408],{10077:(n,e,a)=>{a.r(e),a.d(e,{default:()=>o});var s=a(34086);const r=(0,s._)("h2",{id:"变量作用域",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#变量作用域","aria-hidden":"true"},"#"),(0,s.Uk)(" 变量作用域")],-1),l=(0,s.Uk)("请看 "),c=(0,s.Uk)("let 命令"),p=(0,s.uE)('<h2 id="函数作用域" tabindex="-1"><a class="header-anchor" href="#函数作用域" aria-hidden="true">#</a> 函数作用域</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>作用域(scope)指的是变量存在的范围。在 ES5 的规范中，JavaScript 只有两种作用域: 一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域，本教程不涉及。</p><p>对于顶层函数来说，函数外部声明的变量就是全局变量(global variable)，它可以在函数内部读取。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let v = 1;\n\nfunction f() {\n  console.log(v);\n}\n\nf();\n// 1\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面的代码表明，函数 <code>f</code> 内部可以读取全局变量 <code>v</code>。</p><p>在函数内部定义的变量，外部无法读取，称为“局部变量”(local variable)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function f() {\n  let v = 1;\n}\n\nv; // ReferenceError: v is not defined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，变量 <code>v</code> 在函数内部定义，所以是一个局部变量，函数之外就无法读取。</p><p>函数内部定义的变量，会在该作用域内覆盖同名全局变量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let v = 1;\n\nfunction f() {\n  let v = 2;\n  console.log(v);\n}\n\nf(); // 2\nv; // 1\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，变量 <code>v</code> 同时在函数的外部和内部有定义。结果，在函数内部定义，局部变量 <code>v</code> 覆盖了全局变量 <code>v</code>。</p><p>注意，对于 <code>var</code> 命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>if (true) {\n  var x = 5;\n}\nconsole.log(x); // 5\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码中，变量 <code>x</code> 在条件判断区块之中声明，结果就是一个全局变量，可以在区块之外读取。</p><h3 id="函数内部的变量提升" tabindex="-1"><a class="header-anchor" href="#函数内部的变量提升" aria-hidden="true">#</a> 函数内部的变量提升</h3><p>与全局作用域一样，函数作用域内部也会产生“变量提升”现象。<code>var</code> 命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function foo(x) {\n  if (x &gt; 100) {\n    var tmp = x - 100;\n  }\n}\n\n// 等同于\nfunction foo(x) {\n  var tmp;\n  if (x &gt; 100) {\n    tmp = x - 100;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="函数本身的作用域" tabindex="-1"><a class="header-anchor" href="#函数本身的作用域" aria-hidden="true">#</a> 函数本身的作用域</h3><p>函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var a = 1;\nvar x = function () {\n  console.log(a);\n};\n\nfunction f() {\n  var a = 2;\n  x();\n}\n\nf(); // 1\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，函数 <code>x</code> 是在函数 <code>f</code> 的外部声明的，所以它的作用域绑定外层，内部变量 <code>a</code> 不会到函数 <code>f</code> 体内取值，所以输出 <code>1</code>，而不是 <code>2</code>。</p><p>总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。</p><p>很容易犯错的一点是，如果函数 <code>A</code> 调用函数 <code>B</code>，却没考虑到函数 <code>B</code> 不会引用函数 <code>A</code> 的内部变量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var x = function () {\n  console.log(a);\n};\n\nfunction y(f) {\n  var a = 2;\n  f();\n}\n\ny(x);\n// ReferenceError: a is not defined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码将函数 <code>x</code> 作为参数，传入函数 <code>y</code>。但是，函数 <code>x</code> 是在函数 <code>y</code> 体外声明的，作用域绑定外层，因此找不到函数 <code>y</code> 的内部变量 <code>a</code>，导致报错。</p><p>同样的，函数体内部声明的函数，作用域绑定函数体内部。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function foo() {\n  var x = 1;\n  function bar() {\n    console.log(x);\n  }\n  return bar;\n}\n\nvar x = 2;\nvar f = foo();\nf(); // 1\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，函数 <code>foo</code> 内部声明了一个函数 <code>bar</code>，<code>bar</code> 的作用域绑定 <code>foo</code>。当我们在 <code>foo</code> 外部取出 <code>bar</code> 执行时，变量 <code>x</code> 指向的是 <code>foo</code> 内部的 <code>x</code>，而不是 <code>foo</code> 外部的 <code>x</code>。正是这种机制，构成了下文要讲解的“闭包”现象。</p><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h2><p>全局变量会绑定到 <code>window</code> 上，不同的 JavaScript 文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p><p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 唯一的全局变量MYAPP:\nconst MYAPP = {};\n\n// 其他变量:\nMYAPP.name = &quot;myapp&quot;;\nMYAPP.version = 1.0;\n\n// 其他函数:\nMYAPP.foo = function () {\n  return &quot;foo&quot;;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>把自己的代码全部放入唯一的命名空间 <code>MYAPP</code> 中，会大大减少全局变量冲突的可能。</p><p>许多著名的 JavaScript 库都是这么干的: jQuery，YUI，underscore 等等。</p>',35),i={},o=(0,a(82831).Z)(i,[["render",function(n,e){const a=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s._)("p",null,[l,(0,s.Wm)(a,{to:"/code/language/js/es6/let.html"},{default:(0,s.w5)((()=>[c])),_:1})]),p],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const a=n.__vccOpts||n;for(const[n,s]of e)a[n]=s;return a}},7044:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-ee259a78",path:"/code/language/js/function/scope.html",title:"函数作用域",lang:"zh-CN",frontmatter:{title:"函数作用域",icon:"locate",date:"2019-10-02T00:00:00.000Z",category:["JavaScript"],summary:"变量作用域 请看 let 命令 函数作用域 定义 作用域(scope)指的是变量存在的范围。在 ES5 的规范中，JavaScript 只有两种作用域: 一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域，本教程不涉及。 对于顶层函数来说，函数外部声明的变量就是全局变量(glo",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/function/scope.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"函数作用域"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-02T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"变量作用域",slug:"变量作用域",children:[]},{level:2,title:"函数作用域",slug:"函数作用域",children:[{level:3,title:"定义",slug:"定义",children:[]},{level:3,title:"函数内部的变量提升",slug:"函数内部的变量提升",children:[]},{level:3,title:"函数本身的作用域",slug:"函数本身的作用域",children:[]}]},{level:2,title:"命名空间",slug:"命名空间",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4}]},readingTime:{minutes:3.6,words:1080},filePathRelative:"code/language/js/function/scope.md"}}}]);