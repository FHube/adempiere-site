"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[50003],{55264:(n,e,s)=>{s.r(e),s.d(e,{default:()=>P});var a=s(34086);const r={href:"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html",target:"_blank",rel:"noopener noreferrer"},t=(0,a.Uk)("函数是 JavaScript 中的一等公民"),l=(0,a.uE)('<h2 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明" aria-hidden="true">#</a> 函数声明</h2><p>在 JavaScript 中，有两种常见的定义函数的方式——函数声明(Function Declaration)和函数表达式(Function Expression):</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 函数声明(Function Declaration)\nfunction sum(x, y) {\n  return x + y;\n}\n\n// 函数表达式(Function Expression)\nlet mySum = function (x, y) {\n  return x + y;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sum(x: number, y: number): number {\n  return x + y;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，<strong>输入多余的(或者少于要求的)参数，是不被允许的</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sum(x: number, y: number): number {\n  return x + y;\n}\nsum(1, 2, 3);\n\n// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sum(x: number, y: number): number {\n  return x + y;\n}\nsum(1);\n\n// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式" aria-hidden="true">#</a> 函数表达式</h2><p>如果要我们现在写一个对函数表达式(Function Expression)的定义，可能会写成这样:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let mySum = function (x: number, y: number): number {\n  return x + y;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 <code>mySum</code> 添加类型，则应该是这样:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let mySum: (x: number, y: number) =&gt; number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意不要混淆了 TypeScript 中的 <code>=&gt;</code> 和 ES6 中的 <code>=&gt;</code>。</p><p>在 TypeScript 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>',15),i=(0,a.Uk)("在 ES6 中，"),p=(0,a._)("code",null,"=>",-1),u=(0,a.Uk)(" 叫做箭头函数，应用十分广泛，可以参考 "),c={href:"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("ES6 中的箭头函数"),b=(0,a.Uk)("。"),m=(0,a.uE)('<h2 id="用接口定义函数的形状" tabindex="-1"><a class="header-anchor" href="#用接口定义函数的形状" aria-hidden="true">#</a> 用接口定义函数的形状</h2><p>我们也可以使用接口的方式来定义一个函数需要符合的形状:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function (source: string, subString: string) {\n  return source.search(subString) !== -1;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="可选参数" tabindex="-1"><a class="header-anchor" href="#可选参数" aria-hidden="true">#</a> 可选参数</h2><p>前面提到，输入多余的(或者少于要求的)参数，是不允许的。那么如何定义可选的参数呢?</p><p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function buildName(firstName: string, lastName?: string) {\n  if (lastName) {\n    return firstName + &quot; &quot; + lastName;\n  } else {\n    return firstName;\n  }\n}\nlet tomcat = buildName(&quot;Tom&quot;, &quot;Cat&quot;);\nlet tom = buildName(&quot;Tom&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>需要注意的是，可选参数必须接在必需参数后面。换句话说，<strong>可选参数后面不允许再出现必需参数了</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function buildName(firstName?: string, lastName: string) {\n  if (firstName) {\n    return firstName + &quot; &quot; + lastName;\n  } else {\n    return lastName;\n  }\n}\nlet tomcat = buildName(&quot;Tom&quot;, &quot;Cat&quot;);\nlet tom = buildName(undefined, &quot;Tom&quot;);\n\n// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="参数默认值" tabindex="-1"><a class="header-anchor" href="#参数默认值" aria-hidden="true">#</a> 参数默认值</h2><p>在 ES6 中，我们允许给函数的参数添加默认值，<strong>TypeScript 会将添加了默认值的参数识别为可选参数</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function buildName(firstName: string, lastName: string = &quot;Cat&quot;) {\n  return firstName + &quot; &quot; + lastName;\n}\nlet tomcat = buildName(&quot;Tom&quot;, &quot;Cat&quot;);\nlet tom = buildName(&quot;Tom&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时就不受「可选参数必须接在必需参数后面」的限制了:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function buildName(firstName: string = &quot;Tom&quot;, lastName: string) {\n  return firstName + &quot; &quot; + lastName;\n}\nlet tomcat = buildName(&quot;Tom&quot;, &quot;Cat&quot;);\nlet cat = buildName(undefined, &quot;Cat&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',14),d=(0,a.Uk)("关于默认参数，可以参考 "),g={href:"http://es6.ruanyifeng.com/#docs/function#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},h=(0,a.Uk)("ES6 中函数参数的默认值"),f=(0,a.Uk)("。"),y=(0,a.uE)('<h2 id="剩余参数" tabindex="-1"><a class="header-anchor" href="#剩余参数" aria-hidden="true">#</a> 剩余参数</h2><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数(rest 参数):</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function push(array, ...items) {\n  items.forEach(function (item) {\n    array.push(item);\n  });\n}\n\nlet a = [];\npush(a, 1, 2, 3);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>事实上，<code>items</code> 是一个数组。所以我们可以用数组的类型来定义它:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function push(array: any[], ...items: any[]) {\n  items.forEach(function (item) {\n    array.push(item);\n  });\n}\n\nlet a = [];\npush(a, 1, 2, 3);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',5),v=(0,a.Uk)("注意，rest 参数只能是最后一个参数，关于 rest 参数，可以参考 "),q={href:"http://es6.ruanyifeng.com/#docs/function#rest%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("ES6 中的 rest 参数"),x=(0,a.Uk)("。"),E=(0,a.uE)('<h2 id="重载" tabindex="-1"><a class="header-anchor" href="#重载" aria-hidden="true">#</a> 重载</h2><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p><p>比如，我们需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>&#39;hello&#39;</code> 的时候，输出反转的字符串 <code>&#39;olleh&#39;</code>。</p><p>利用联合类型，我们可以这么实现:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function reverse(x: number | string): number | string {\n  if (typeof x === &quot;number&quot;) {\n    return Number(x.toString().split(&quot;&quot;).reverse().join(&quot;&quot;));\n  } else if (typeof x === &quot;string&quot;) {\n    return x.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。</p><p>这时，我们可以使用重载定义多个 <code>reverse</code> 的函数类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number | string): number | string {\n  if (typeof x === &quot;number&quot;) {\n    return Number(x.toString().split(&quot;&quot;).reverse().join(&quot;&quot;));\n  } else if (typeof x === &quot;string&quot;) {\n    return x.split(&quot;&quot;).reverse().join(&quot;&quot;);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上例中，我们重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p><p>注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',11),_={href:"http://www.typescriptlang.org/docs/handbook/functions.html",target:"_blank",rel:"noopener noreferrer"},S=(0,a.Uk)("Functions"),N=(0,a.Uk)("("),B={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("中文版"),U=(0,a.Uk)(")"),F={href:"http://www.typescriptlang.org/docs/handbook/interfaces.html#function-types",target:"_blank",rel:"noopener noreferrer"},A=(0,a.Uk)("Functions # Function Types"),w=(0,a.Uk)("("),C={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},W=(0,a.Uk)("中文版"),j=(0,a.Uk)(")"),D={href:"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/",target:"_blank",rel:"noopener noreferrer"},z=(0,a.Uk)("JS 函数式编程指南"),J={href:"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},Z=(0,a.Uk)("ES6 中的箭头函数"),H={href:"http://es6.ruanyifeng.com/#docs/function#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},I=(0,a.Uk)("ES6 中函数参数的默认值"),L={href:"http://es6.ruanyifeng.com/#docs/function#rest%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},M=(0,a.Uk)("ES6 中的 rest 参数"),O={},P=(0,s(82831).Z)(O,[["render",function(n,e){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",r,[t,(0,a.Wm)(s)])])]),(0,a.kq)(" more "),l,(0,a._)("p",null,[i,p,u,(0,a._)("a",c,[o,(0,a.Wm)(s)]),b]),m,(0,a._)("blockquote",null,[(0,a._)("p",null,[d,(0,a._)("a",g,[h,(0,a.Wm)(s)]),f])]),y,(0,a._)("p",null,[v,(0,a._)("a",q,[k,(0,a.Wm)(s)]),x]),E,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",_,[S,(0,a.Wm)(s)]),N,(0,a._)("a",B,[T,(0,a.Wm)(s)]),U]),(0,a._)("li",null,[(0,a._)("a",F,[A,(0,a.Wm)(s)]),w,(0,a._)("a",C,[W,(0,a.Wm)(s)]),j]),(0,a._)("li",null,[(0,a._)("a",D,[z,(0,a.Wm)(s)])]),(0,a._)("li",null,[(0,a._)("a",J,[Z,(0,a.Wm)(s)])]),(0,a._)("li",null,[(0,a._)("a",H,[I,(0,a.Wm)(s)])]),(0,a._)("li",null,[(0,a._)("a",L,[M,(0,a.Wm)(s)])])])],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}},87082:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-54dad760",path:"/code/language/typescript/basics/type-of-function.html",title:"函数的类型",lang:"zh-CN",frontmatter:{title:"函数的类型",icon:"function",category:["TypeScript"],summary:"\n函数是 JavaScript 中的一等公民\n\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/type-of-function.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"函数的类型"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-11-08T17:25:55.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-11-08T17:25:55.000Z"}]]},excerpt:'<blockquote>\n<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html" target="_blank" rel="noopener noreferrer">函数是 JavaScript 中的一等公民<ExternalLinkIcon/></a></p>\n</blockquote>\n',headers:[{level:2,title:"函数声明",slug:"函数声明",children:[]},{level:2,title:"函数表达式",slug:"函数表达式",children:[]},{level:2,title:"用接口定义函数的形状",slug:"用接口定义函数的形状",children:[]},{level:2,title:"可选参数",slug:"可选参数",children:[]},{level:2,title:"参数默认值",slug:"参数默认值",children:[]},{level:2,title:"剩余参数",slug:"剩余参数",children:[]},{level:2,title:"重载",slug:"重载",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1604856355e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3}]},readingTime:{minutes:4.57,words:1372},filePathRelative:"code/language/typescript/basics/type-of-function.md"}}}]);