"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[33585],{50605:(n,s,e)=>{e.r(s),e.d(s,{default:()=>x});var a=e(34086);const r=(0,a._)("p",null,"枚举(Enum)类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。",-1),l=(0,a.uE)('<h2 id="简单的例子" tabindex="-1"><a class="header-anchor" href="#简单的例子" aria-hidden="true">#</a> 简单的例子</h2><p>枚举使用 <code>enum</code> 关键字来定义:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Days {\n  Sun,\n  Mon,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>枚举成员会被赋值为从 <code>0</code> 开始递增的数字，同时也会对枚举值到枚举名进行反向映射:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Days {\n  Sun,\n  Mon,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat,\n}\n\nconsole.log(Days[&quot;Sun&quot;] === 0); // true\nconsole.log(Days[&quot;Mon&quot;] === 1); // true\nconsole.log(Days[&quot;Tue&quot;] === 2); // true\nconsole.log(Days[&quot;Sat&quot;] === 6); // true\n\nconsole.log(Days[0] === &quot;Sun&quot;); // true\nconsole.log(Days[1] === &quot;Mon&quot;); // true\nconsole.log(Days[2] === &quot;Tue&quot;); // true\nconsole.log(Days[6] === &quot;Sat&quot;); // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>事实上，上面的例子会被编译为:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var Days;\n(function (Days) {\n  Days[(Days[&quot;Sun&quot;] = 0)] = &quot;Sun&quot;;\n  Days[(Days[&quot;Mon&quot;] = 1)] = &quot;Mon&quot;;\n  Days[(Days[&quot;Tue&quot;] = 2)] = &quot;Tue&quot;;\n  Days[(Days[&quot;Wed&quot;] = 3)] = &quot;Wed&quot;;\n  Days[(Days[&quot;Thu&quot;] = 4)] = &quot;Thu&quot;;\n  Days[(Days[&quot;Fri&quot;] = 5)] = &quot;Fri&quot;;\n  Days[(Days[&quot;Sat&quot;] = 6)] = &quot;Sat&quot;;\n})(Days || (Days = {}));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="手动赋值" tabindex="-1"><a class="header-anchor" href="#手动赋值" aria-hidden="true">#</a> 手动赋值</h2><p>我们也可以给枚举项手动赋值:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Days {\n  Sun = 7,\n  Mon = 1,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat,\n}\n\nconsole.log(Days[&quot;Sun&quot;] === 7); // true\nconsole.log(Days[&quot;Mon&quot;] === 1); // true\nconsole.log(Days[&quot;Tue&quot;] === 2); // true\nconsole.log(Days[&quot;Sat&quot;] === 6); // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面的例子中，未手动赋值的枚举项会接着上一个枚举项递增。</p><p>如果未手动赋值的枚举项与手动赋值的重复了，TypeScript 是不会察觉到这一点的:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Days {\n  Sun = 3,\n  Mon = 1,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat,\n}\n\nconsole.log(Days[&quot;Sun&quot;] === 3); // true\nconsole.log(Days[&quot;Wed&quot;] === 3); // true\nconsole.log(Days[3] === &quot;Sun&quot;); // false\nconsole.log(Days[3] === &quot;Wed&quot;); // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面的例子中，递增到 <code>3</code> 的时候与前面的 <code>Sun</code> 的取值重复了，但是 TypeScript 并没有报错，导致 <code>Days[3]</code> 的值先是 <code>&quot;Sun&quot;</code>，而后又被 <code>&quot;Wed&quot;</code> 覆盖了。编译的结果是:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var Days;\n(function (Days) {\n  Days[(Days[&quot;Sun&quot;] = 3)] = &quot;Sun&quot;;\n  Days[(Days[&quot;Mon&quot;] = 1)] = &quot;Mon&quot;;\n  Days[(Days[&quot;Tue&quot;] = 2)] = &quot;Tue&quot;;\n  Days[(Days[&quot;Wed&quot;] = 3)] = &quot;Wed&quot;;\n  Days[(Days[&quot;Thu&quot;] = 4)] = &quot;Thu&quot;;\n  Days[(Days[&quot;Fri&quot;] = 5)] = &quot;Fri&quot;;\n  Days[(Days[&quot;Sat&quot;] = 6)] = &quot;Sat&quot;;\n})(Days || (Days = {}));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>所以使用的时候需要注意，最好不要出现这种覆盖的情况。</p><p>手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 (编译出的 js 仍然是可用的):</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Days {\n  Sun = 7,\n  Mon,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat = &lt;any&gt;&quot;S&quot;,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var Days;\n(function (Days) {\n  Days[(Days[&quot;Sun&quot;] = 7)] = &quot;Sun&quot;;\n  Days[(Days[&quot;Mon&quot;] = 8)] = &quot;Mon&quot;;\n  Days[(Days[&quot;Tue&quot;] = 9)] = &quot;Tue&quot;;\n  Days[(Days[&quot;Wed&quot;] = 10)] = &quot;Wed&quot;;\n  Days[(Days[&quot;Thu&quot;] = 11)] = &quot;Thu&quot;;\n  Days[(Days[&quot;Fri&quot;] = 12)] = &quot;Fri&quot;;\n  Days[(Days[&quot;Sat&quot;] = &quot;S&quot;)] = &quot;Sat&quot;;\n})(Days || (Days = {}));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当然，手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 <code>1</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Days {\n  Sun = 7,\n  Mon = 1.5,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat,\n}\n\nconsole.log(Days[&quot;Sun&quot;] === 7); // true\nconsole.log(Days[&quot;Mon&quot;] === 1.5); // true\nconsole.log(Days[&quot;Tue&quot;] === 2.5); // true\nconsole.log(Days[&quot;Sat&quot;] === 6.5); // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="常数项和计算所得项" tabindex="-1"><a class="header-anchor" href="#常数项和计算所得项" aria-hidden="true">#</a> 常数项和计算所得项</h2><p>枚举项有两种类型: 常数项(constant member)和计算所得项(computed member)。</p><p>前面我们所举的例子都是常数项，一个典型的计算所得项的例子:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Color {\n  Red,\n  Green,\n  Blue = &quot;blue&quot;.length,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的例子中，<code>&quot;blue&quot;.length</code> 就是一个计算所得项。</p><p>上面的例子不会报错，但是<strong>如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Color {\n  Red = &quot;red&quot;.length,\n  Green,\n  Blue,\n}\n\n// index.ts(1,33): error TS1061: Enum member must have initializer.\n// index.ts(1,40): error TS1061: Enum member must have initializer.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',28),p=(0,a.Uk)("下面是常数项和计算所得项的完整定义，部分引用自"),u={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Enums.html",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("中文手册 - 枚举"),t=(0,a.Uk)(":"),c=(0,a.uE)('<p>当满足以下条件时，枚举成员被当作是常数:</p><ul><li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 <code>1</code>。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 <code>0</code>。</li><li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式: <ul><li>数字字面量</li><li>引用之前定义的常数枚举成员(可以是在不同的枚举类型中定义的)如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li><li>带括号的常数枚举表达式</li><li><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</li><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</li></ul></li></ul><p>所有其它情况的枚举成员被当作是需要计算得出的值。</p><h2 id="常数枚举" tabindex="-1"><a class="header-anchor" href="#常数枚举" aria-hidden="true">#</a> 常数枚举</h2><p>常数枚举是使用 <code>const enum</code> 定义的枚举类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>const enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nlet directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p><p>上例的编译结果是:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>假如包含了计算成员，则会在编译阶段报错:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>const enum Color {\n  Red,\n  Green,\n  Blue = &quot;blue&quot;.length,\n}\n\n// index.ts(1,38): error TS2474: In &#39;const&#39; enum declarations member initializer must be constant expression.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="外部枚举" tabindex="-1"><a class="header-anchor" href="#外部枚举" aria-hidden="true">#</a> 外部枚举</h2><p>外部枚举(Ambient Enums)是使用 <code>declare enum</code> 定义的枚举类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>declare enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nlet directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>之前提到过，<code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</p><p>上例的编译结果是:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>外部枚举与声明语句一样，常出现在声明文件中。</p><p>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>declare const enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nlet directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>编译结果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var directions = [0 /* Up */, 1 /* Down */, 2 /* Left */, 3 /* Right */];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>',22),o=(0,a.Uk)("TypeScript 的枚举类型的概念"),b={href:"https://msdn.microsoft.com/zh-cn/library/sbbt4032.aspx",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("来源于 C#"),m=(0,a.Uk)("。"),g=(0,a._)("h2",{id:"参考",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),(0,a.Uk)(" 参考")],-1),q={href:"http://www.typescriptlang.org/docs/handbook/enums.html",target:"_blank",rel:"noopener noreferrer"},y=(0,a.Uk)("Enums"),h=(0,a.Uk)("("),D={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Enums.html",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("中文版"),S=(0,a.Uk)(")"),f={href:"https://msdn.microsoft.com/zh-cn/library/sbbt4032.aspx",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("C# Enum"),k={},x=(0,e(82831).Z)(k,[["render",function(n,s){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a.kq)(" more "),l,(0,a._)("p",null,[p,(0,a._)("a",u,[i,(0,a.Wm)(e)]),t]),c,(0,a._)("blockquote",null,[(0,a._)("p",null,[o,(0,a._)("a",b,[d,(0,a.Wm)(e)]),m])]),g,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",q,[y,(0,a.Wm)(e)]),h,(0,a._)("a",D,[v,(0,a.Wm)(e)]),S]),(0,a._)("li",null,[(0,a._)("a",f,[T,(0,a.Wm)(e)])])])],64)}]])},82831:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},6596:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-8b0e3c32",path:"/code/language/typescript/advanced/enum.html",title:"枚举",lang:"zh-CN",frontmatter:{title:"枚举",icon:"enum",category:["TypeScript"],summary:"枚举(Enum)类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/advanced/enum.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"枚举"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-11-08T17:25:55.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-11-08T17:25:55.000Z"}]]},excerpt:"<p>枚举(Enum)类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。</p>\n",headers:[{level:2,title:"简单的例子",slug:"简单的例子",children:[]},{level:2,title:"手动赋值",slug:"手动赋值",children:[]},{level:2,title:"常数项和计算所得项",slug:"常数项和计算所得项",children:[]},{level:2,title:"常数枚举",slug:"常数枚举",children:[]},{level:2,title:"外部枚举",slug:"外部枚举",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1604856355e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:4.95,words:1485},filePathRelative:"code/language/typescript/advanced/enum.md"}}}]);