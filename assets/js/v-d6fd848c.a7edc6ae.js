"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3612],{37768:(a,e,n)=>{n.r(e),n.d(e,{default:()=>u});var s=n(34086);const l=(0,s.uE)('<p>编程免不了要写配置文件，怎么写配置也是一门学问。</p><p>YAML 是专门用来写配置文件的语言，非常简洁和强大。</p><h2 id="yaml-介绍" tabindex="-1"><a class="header-anchor" href="#yaml-介绍" aria-hidden="true">#</a> yaml 介绍</h2><p>YAML 语言(发音 /ˈjæməl/ )的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。</p><p>YAML 的全称是 YAML Ain’t Markup Language。</p><p>它的基本语法规则如下。</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用 Tab 键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li></ul><p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p><p>YAML 支持的数据结构有三种。</p><ul><li>对象: 键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)</li><li>数组: 一组按次序排列的值，又称为序列(sequence) / 列表(list)</li><li>纯量(scalars): 单个的、不可再分的值</li></ul><h2 id="如何打开或编辑-yaml" tabindex="-1"><a class="header-anchor" href="#如何打开或编辑-yaml" aria-hidden="true">#</a> 如何打开或编辑 yaml</h2>',11),r=(0,s.Uk)("推荐使用 VS Code，具体详见"),i=(0,s.Uk)("VS Code 简单介绍"),p=(0,s.Uk)("。"),c=(0,s.uE)('<h2 id="数据结构介绍" tabindex="-1"><a class="header-anchor" href="#数据结构介绍" aria-hidden="true">#</a> 数据结构介绍</h2><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>对象的一组键值对，使用冒号结构表示。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>animal: pets\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  animal: &quot;pets&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>hash: { name: Steve, foo: bar }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{ hash: { name: &#39;Steve&#39;, foo: &#39;bar&#39; } }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>一组连词线开头的行，构成一个数组。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>- Cat\n- Dog\n- Goldfish\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>[&quot;Cat&quot;, &quot;Dog&quot;, &quot;Goldfish&quot;];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>- - Cat\n  - Dog\n  - Goldfish\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>[[&quot;Cat&quot;, &quot;Dog&quot;, &quot;Goldfish&quot;]];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数组也可以采用行内表示法。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>animal: [Cat, Dog]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  animal: [&quot;Cat&quot;, &quot;Dog&quot;];\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="复合结构" tabindex="-1"><a class="header-anchor" href="#复合结构" aria-hidden="true">#</a> 复合结构</h3><p>对象和数组可以结合使用，形成复合结构。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>languages:\n  - Ruby\n  - Perl\n  - Python\n\nwebsites:\n  YAML: yaml.org\n  Ruby: ruby-lang.org\n  Python: python.org\n  Perl: use.perl.org\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>{\n  languages: [&quot;Ruby&quot;, &quot;Perl&quot;, &quot;Python&quot;],\n  websites:\n    {\n      YAML: &quot;yaml.org&quot;,\n      Ruby: &quot;ruby-lang.org&quot;,\n      Python: &quot;python.org&quot;,\n      Perl: &quot;use.perl.org&quot;,\n    },\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="纯量" tabindex="-1"><a class="header-anchor" href="#纯量" aria-hidden="true">#</a> 纯量</h3><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><p>数值直接以字面量的形式表示。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>number: 12.30\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  number: 12.3;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>布尔值用 <code>true</code> 和 <code>false</code> 表示。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>isSet: true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  isSet: true;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>null</code> 用 <code>~</code> 表示。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>parent: ~\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  parent: null;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>时间采用 ISO8601 格式。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>iso8601: 2001-12-14t21:59:43.10-05:00\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  iso8601: new Date(&quot;2001-12-14t21:59:43.10-05:00&quot;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>日期采用复合 iso8601 格式的年、月、日表示。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>date: 1976-07-31\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  date: new Date(&quot;1976-07-31&quot;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>YAML 允许使用两个感叹号，强制转换数据类型。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>e: !!str 123\nf: !!str true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{ e: &#39;123&#39;, f: &#39;true&#39; }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>字符串是最常见，也是最复杂的一种数据类型。</p><p>字符串默认不使用引号表示。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>str: 这是一行字符串\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  str: &quot;这是一行字符串&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>str: &quot;内容: 字符串&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  str: &quot;内容: 字符串&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>单引号和双引号都可以使用，双引号不会对特殊字符转义。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>s1: &#39;内容\\n字符串&#39;\ns2: &quot;内容\\n字符串&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{ s1: &#39;内容\\\\n字符串&#39;, s2: &#39;内容\\n字符串&#39; }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>str: &quot;labor&#39;s day&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  str: &quot;labor&#39;s day&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>str: 这是一段\n  多行\n  字符串\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>转为 JavaScript 如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  str: &quot;这是一段 多行 字符串&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>多行字符串可以使用 <code>|</code> 保留换行符，也可以使用 <code>&gt;</code> 折叠换行。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>this: |\n  Foo\n  Bar\nthat: &gt;\n  Foo\n  Bar\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>转为 JavaScript 代码如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{ this: &#39;Foo\\nBar\\n&#39;, that: &#39;Foo Bar\\n&#39; }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>+</code> 表示保留文字块末尾的换行，<code>-</code> 表示删除字符串末尾的换行。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>s1: |\n  Foo\n\ns2: |+\n  Foo\n\ns3: |-\n  Foo\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>转为 JavaScript 代码如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{ s1: &#39;Foo\\n&#39;, s2: &#39;Foo\\n\\n\\n&#39;, s3: &#39;Foo&#39; }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><p>锚点 <code>&amp;</code> 和别名 <code>*</code>，可以用来引用。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>defaults: &amp;defaults\n  adapter: postgres\n  host: localhost\n\ndevelopment:\n  database: myapp_development\n  &lt;&lt;: *defaults\n\ntest:\n  database: myapp_test\n  &lt;&lt;: *defaults\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>等同于下面的代码。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>defaults:\n  adapter: postgres\n  host: localhost\n\ndevelopment:\n  database: myapp_development\n  adapter: postgres\n  host: localhost\n\ntest:\n  database: myapp_test\n  adapter: postgres\n  host: localhost\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>&amp;</code> 用来建立锚点(defaults)，<code>&lt;&lt;</code> 表示合并到当前数据，<code>*</code> 用来引用锚点。</p><p>下面是另一个例子。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>- &amp;showell Steve\n- Clark\n- Brian\n- Oren\n- *showell\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>转为 JavaScript 代码如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>[&quot;Steve&quot;, &quot;Clark&quot;, &quot;Brian&quot;, &quot;Oren&quot;, &quot;Steve&quot;];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="函数和正则表达式的转换" tabindex="-1"><a class="header-anchor" href="#函数和正则表达式的转换" aria-hidden="true">#</a> 函数和正则表达式的转换</h2><p>这是 JS-YAML 库特有的功能，可以把函数和正则表达式转为字符串。(官方 yaml 标准里不包含这个部分)</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code># example.yml\n\nfn: function () { return 1 }\nreg: /test/\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>解析上面的 yml 文件的代码如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var yaml = require(&quot;js-yaml&quot;);\nvar fs = require(&quot;fs&quot;);\n\ntry {\n  var doc = yaml.load(fs.readFileSync(&quot;./example.yml&quot;, &quot;utf8&quot;));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>从 JavaScript 对象还原到 yaml 文件的代码如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var yaml = require(&quot;js-yaml&quot;);\nvar fs = require(&quot;fs&quot;);\n\nvar obj = {\n  fn: function () {\n    return 1;\n  },\n  reg: /test/,\n};\n\ntry {\n  fs.writeFileSync(&quot;./example.yml&quot;, yaml.dump(obj), &quot;utf8&quot;);\n} catch (e) {\n  console.log(e);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',102),d={},u=(0,n(82831).Z)(d,[["render",function(a,e){const n=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[l,(0,s._)("p",null,[r,(0,s.Wm)(n,{to:"/software/vscode/simple.html"},{default:(0,s.w5)((()=>[i])),_:1}),p]),c],64)}]])},82831:(a,e)=>{e.Z=(a,e)=>{const n=a.__vccOpts||a;for(const[a,s]of e)n[a]=s;return n}},20047:(a,e,n)=>{n.r(e),n.d(e,{data:()=>s});const s={key:"v-d6fd848c",path:"/code/language/yaml/",title:"YAML 教程",lang:"zh-CN",frontmatter:{title:"YAML 教程",icon:"yaml",date:"2020-07-26T00:00:00.000Z",category:["YAML"],summary:"编程免不了要写配置文件，怎么写配置也是一门学问。 YAML 是专门用来写配置文件的语言，非常简洁和强大。 yaml 介绍 YAML 语言(发音 /ˈjæməl/ )的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。 YAML 的全称是 YAML Ain’t Markup Language。 它的基本语法规则如下。 大小写敏感; 使用缩进表示层",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/yaml/"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"YAML 教程"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2020-07-26T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"yaml 介绍",slug:"yaml-介绍",children:[]},{level:2,title:"如何打开或编辑 yaml",slug:"如何打开或编辑-yaml",children:[]},{level:2,title:"数据结构介绍",slug:"数据结构介绍",children:[{level:3,title:"对象",slug:"对象",children:[]},{level:3,title:"数组",slug:"数组",children:[]},{level:3,title:"复合结构",slug:"复合结构",children:[]},{level:3,title:"纯量",slug:"纯量",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]}]},{level:2,title:"引用",slug:"引用",children:[]},{level:2,title:"函数和正则表达式的转换",slug:"函数和正则表达式的转换",children:[]}],git:{createdTime:1644163298e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:4.43,words:1329},filePathRelative:"code/language/yaml/README.md"}}}]);