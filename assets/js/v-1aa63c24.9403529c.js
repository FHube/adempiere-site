"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[75088],{16855:(n,s,e)=>{e.r(s),e.d(s,{default:()=>x});var a=e(34086);const l=(0,a._)("p",null,[(0,a.Uk)("Python 内建了 "),(0,a._)("code",null,"map()"),(0,a.Uk)(" 和 "),(0,a._)("code",null,"reduce()"),(0,a.Uk)(" 函数。")],-1),r=(0,a.Uk)("如果您读过 Google 的那篇大名鼎鼎的论文 "),t={href:"http://research.google.com/archive/mapreduce.html",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("“MapReduce: Simplified Data Processing on Large Clusters”"),c=(0,a.Uk)("，您就能大概明白 map / reduce 的概念。"),m=(0,a._)("blockquote",null,[(0,a._)("p",null,"访问需要科学上网。")],-1),i=(0,a._)("p",null,[(0,a.Uk)("我们先看 map。"),(0,a._)("code",null,"map()"),(0,a.Uk)(" 函数接收两个参数，一个是函数，一个是 "),(0,a._)("code",null,"Iterable"),(0,a.Uk)("，map 将传入的函数依次作用到序列的每个元素，并把结果作为新的 "),(0,a._)("code",null,"Iterator"),(0,a.Uk)(" 返回。")],-1),o=(0,a._)("p",null,[(0,a.Uk)("举例说明，比如我们有一个函数 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mi",null,"f"),(0,a._)("mo",{stretchy:"false"},"("),(0,a._)("mi",null,"x"),(0,a._)("mo",{stretchy:"false"},")"),(0,a._)("mo",null,"="),(0,a._)("msup",null,[(0,a._)("mi",null,"x"),(0,a._)("mn",null,"2")])]),(0,a._)("annotation",{encoding:"application/x-tex"},"f(x)=x^2")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),(0,a._)("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),(0,a._)("span",{class:"mopen"},"("),(0,a._)("span",{class:"mord mathnormal"},"x"),(0,a._)("span",{class:"mclose"},")"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,a._)("span",{class:"mrel"},"="),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.8141em"}}),(0,a._)("span",{class:"mord"},[(0,a._)("span",{class:"mord mathnormal"},"x"),(0,a._)("span",{class:"msupsub"},[(0,a._)("span",{class:"vlist-t"},[(0,a._)("span",{class:"vlist-r"},[(0,a._)("span",{class:"vlist",style:{height:"0.8141em"}},[(0,a._)("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[(0,a._)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,a._)("span",{class:"sizing reset-size6 size3 mtight"},[(0,a._)("span",{class:"mord mtight"},"2")])])])])])])])])])]),(0,a.Uk)(" ，要把这个函数作用在一个 list "),(0,a._)("code",null,"[1, 2, 3, 4, 5, 6, 7, 8, 9]"),(0,a.Uk)(" 上，就可以用 "),(0,a._)("code",null,"map()"),(0,a.Uk)(" 实现如下:")],-1),u=(0,a.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>            f(x) = x * x\n\n                  │\n                  │\n  ┌───┬───┬───┬───┼───┬───┬───┬───┐\n  │   │   │   │   │   │   │   │   │\n  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼\n\n[ 1   2   3   4   5   6   7   8   9 ]\n\n  │   │   │   │   │   │   │   │   │\n  │   │   │   │   │   │   │   │   │\n  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼\n\n[ 1   4   9  16  25  36  49  64  81 ]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>现在，我们用 Python 代码实现:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; def f(x):\n...     return x * x\n...\n&gt;&gt;&gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n&gt;&gt;&gt; list(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',3),d=(0,a._)("p",null,[(0,a._)("code",null,"map()"),(0,a.Uk)(" 传入的第一个参数是 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mi",null,"f")]),(0,a._)("annotation",{encoding:"application/x-tex"},"f")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),(0,a._)("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f")])])]),(0,a.Uk)(" ，即函数对象本身。由于结果 "),(0,a._)("code",null,"r"),(0,a.Uk)(" 是一个 Iterator，Iterator 是惰性序列，因此通过 "),(0,a._)("code",null,"list()"),(0,a.Uk)(" 函数让它把整个序列都计算出来并返回一个 list。")],-1),b=(0,a.uE)('<p>您可能会想，不需要 <code>map()</code> 函数，写一个循环，也可以计算出结果:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>L = []\nfor n in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n    L.append(f(n))\nprint(L)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),g=(0,a._)("p",null,[(0,a.Uk)("的确可以，但是，从上面的循环代码，能一眼看明白“把 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mi",null,"f"),(0,a._)("mo",{stretchy:"false"},"("),(0,a._)("mi",null,"x"),(0,a._)("mo",{stretchy:"false"},")")]),(0,a._)("annotation",{encoding:"application/x-tex"},"f(x)")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),(0,a._)("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),(0,a._)("span",{class:"mopen"},"("),(0,a._)("span",{class:"mord mathnormal"},"x"),(0,a._)("span",{class:"mclose"},")")])])]),(0,a.Uk)(" 作用在 list 的每一个元素并把结果生成一个新的 list”吗?")],-1),h=(0,a._)("p",null,[(0,a.Uk)("所以，"),(0,a._)("code",null,"map()"),(0,a.Uk)(" 作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mi",null,"f"),(0,a._)("mo",{stretchy:"false"},"("),(0,a._)("mi",null,"x"),(0,a._)("mo",{stretchy:"false"},")"),(0,a._)("mo",null,"="),(0,a._)("msup",null,[(0,a._)("mi",null,"x"),(0,a._)("mn",null,"2")])]),(0,a._)("annotation",{encoding:"application/x-tex"},"f(x)=x^2")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),(0,a._)("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),(0,a._)("span",{class:"mopen"},"("),(0,a._)("span",{class:"mord mathnormal"},"x"),(0,a._)("span",{class:"mclose"},")"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),(0,a._)("span",{class:"mrel"},"="),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.8141em"}}),(0,a._)("span",{class:"mord"},[(0,a._)("span",{class:"mord mathnormal"},"x"),(0,a._)("span",{class:"msupsub"},[(0,a._)("span",{class:"vlist-t"},[(0,a._)("span",{class:"vlist-r"},[(0,a._)("span",{class:"vlist",style:{height:"0.8141em"}},[(0,a._)("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[(0,a._)("span",{class:"pstrut",style:{height:"2.7em"}}),(0,a._)("span",{class:"sizing reset-size6 size3 mtight"},[(0,a._)("span",{class:"mord mtight"},"2")])])])])])])])])])]),(0,a.Uk)(" ，还可以计算任意复杂的函数，比如，把这个 list 所有数字转为字符串:")],-1),_=(0,a.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>只需要一行代码。</p><p>再看 <code>reduce</code> 的用法。<code>reduce</code> 把一个函数作用在一个序列 <code>[x1, x2, x3, ...]</code> 上，这个函数必须接收两个参数，<code>reduce</code> 把结果继续和序列的下一个元素做累积计算，其效果就是:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>比方说对一个序列求和，就可以用 reduce 实现:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; def add(x, y):\n...     return x + y\n...\n&gt;&gt;&gt; reduce(add, [1, 3, 5, 7, 9])\n25\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当然求和运算可以直接用 Python 内建函数 <code>sum()</code>，没必要动用 <code>reduce</code>。</p><p>但是如果要把序列 <code>[1, 3, 5, 7, 9]</code> 变换成整数 13579，<code>reduce</code> 就可以派上用场:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; def fn(x, y):\n...     return x *10 + y\n...\n&gt;&gt;&gt; reduce(fn, [1, 3, 5, 7, 9])\n13579\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个例子本身没多大用处，但是，如果考虑到字符串 <code>str</code> 也是一个序列，对上面的例子稍加改动，配合 <code>map()</code>，我们就可以写出把 <code>str</code> 转换为 <code>int</code> 的函数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; def fn(x, y):\n...     return x* 10 + y\n...\n&gt;&gt;&gt; def char2num(s):\n...     digits = {&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9}\n...     return digits[s]\n...\n&gt;&gt;&gt; reduce(fn, map(char2num, &#39;13579&#39;))\n13579\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>整理成一个 <code>str2int</code> 的函数就是:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>from functools import reduce\n\nDIGITS = {&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9}\n\ndef str2int(s):\n    def fn(x, y):\n        return x * 10 + y\n    def char2num(s):\n        return DIGITS[s]\n    return reduce(fn, map(char2num, s))\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>还可以用 lambda 函数进一步简化成:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>from functools import reduce\n\nDIGITS = {&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9}\n\ndef char2num(s):\n    return DIGITS[s]\n\ndef str2int(s):\n    return reduce(lambda x, y: x * 10 + y, map(char2num, s))\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>也就是说，假设 Python 没有提供 <code>int()</code> 函数，您完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码!</p><p>lambda 函数的用法在后面介绍。</p>',17),y={},x=(0,e(82831).Z)(y,[["render",function(n,s){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[r,(0,a._)("a",t,[p,(0,a.Wm)(e)]),c]),m,(0,a.kq)(" more "),i,o,u,d,b,g,h,_],64)}]])},82831:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},76802:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-1aa63c24",path:"/code/language/python/functional-programming/high-order-function/map-and-reduce.html",title:"map / reduce",lang:"zh-CN",frontmatter:{title:"map / reduce",icon:"map",author:"廖雪峰",date:"2020-05-31T00:00:00.000Z",category:["Python"],summary:"Python 内建了 map() 和 reduce() 函数。\n如果您读过 Google 的那篇大名鼎鼎的论文 “MapReduce: Simplified Data Processing on Large Clusters”，您就能大概明白 map / reduce 的概念。\n\n访问需要科学上网。\n\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/functional-programming/high-order-function/map-and-reduce.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"map / reduce"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-31T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:'<p>Python 内建了 <code v-pre>map()</code> 和 <code v-pre>reduce()</code> 函数。</p>\n<p>如果您读过 Google 的那篇大名鼎鼎的论文 <a href="http://research.google.com/archive/mapreduce.html" target="_blank" rel="noopener noreferrer">“MapReduce: Simplified Data Processing on Large Clusters”<ExternalLinkIcon/></a>，您就能大概明白 map / reduce 的概念。</p>\n<blockquote>\n<p>访问需要科学上网。</p>\n</blockquote>\n',headers:[],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:6},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:3.14,words:943},filePathRelative:"code/language/python/functional-programming/high-order-function/map-and-reduce.md"}}}]);