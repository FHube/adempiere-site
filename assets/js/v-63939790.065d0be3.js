"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[88729],{48711:(e,n,a)=>{a.r(n),a.d(n,{default:()=>i});const s=(0,a(34086).uE)('<p>Python 的 <code>functools</code> 模块提供了很多有用的功能，其中一个就是偏函数 (Partial function) 。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>要注意，这里的偏函数和数学意义上的偏函数不一样。</p></div><p>在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下:</p><p><code>int()</code> 函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code> 函数默认按十进制转换:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; int(&#39;12345&#39;)\n12345\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但 <code>int()</code> 函数还提供额外的 <code>base</code> 参数，默认值为 <code>10</code>。如果传入 <code>base</code> 参数，就可以做 N 进制的转换:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; int(&#39;12345&#39;, base=8)\n5349\n&gt;&gt;&gt; int(&#39;12345&#39;, 16)\n74565\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>假设要转换大量的二进制字符串，每次都传入 <code>int(x, base=2)</code> 非常麻烦，于是，我们想到，可以定义一个 <code>int2()</code> 的函数，默认把 <code>base=2</code> 传进去:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def int2(x, base=2):\n    return int(x, base)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样，我们转换二进制就非常方便了:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; int2(&#39;1000000&#39;)\n64\n&gt;&gt;&gt; int2(&#39;1010101&#39;)\n85\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>functools.partial</code> 就是帮助我们创建一个偏函数的，不需要我们自己定义 <code>int2()</code>，可以直接使用下面的代码创建一个新的函数 <code>int2</code>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; import functools\n&gt;&gt;&gt; int2 = functools.partial(int, base=2)\n&gt;&gt;&gt; int2(&#39;1000000&#39;)\n64\n&gt;&gt;&gt; int2(&#39;1010101&#39;)\n85\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>所以，简单总结 <code>functools.partial</code> 的作用就是，把一个函数的某些参数给固定住 (也就是设置默认值) ，返回一个新的函数，调用这个新函数会更简单。</p><p>注意到上面的新的 <code>int2</code> 函数，仅仅是把 <code>base</code> 参数重新设定默认值为 <code>2</code>，但也可以在函数调用时传入其他值:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; int2(&#39;1000000&#39;, base=10)\n1000000\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code> 和 <code>**kw</code> 这 3 个参数，当传入:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>int2 = functools.partial(int, base=2)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>实际上固定了 <code>int()</code> 函数的关键字参数 <code>base</code>，也就是:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>int2(&#39;10010&#39;)\n相当于:\n\nkw = { &#39;base&#39;: 2 }\nint(&#39;10010&#39;, **kw)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当传入:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>max2 = functools.partial(max, 10)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>实际上会把 10 作为 <code>*args</code> 的一部分自动加到左边，也就是:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>max2(5, 6, 7)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>相当于:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>args = (10, 5, 6, 7)\nmax(*args)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结果为 <code>10</code>。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>当函数的参数个数太多，需要简化时，使用 <code>functools.partial</code> 可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>',29),t={},i=(0,a(82831).Z)(t,[["render",function(e,n){return s}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},10991:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-63939790",path:"/code/language/python/functional-programming/parital-function.html",title:"偏函数",lang:"zh-CN",frontmatter:{title:"偏函数",icon:"plugin",author:"廖雪峰",date:"2021-03-15T00:00:00.000Z",category:["Python"],summary:"Python 的 functools 模块提供了很多有用的功能，其中一个就是偏函数 (Partial function) 。 要注意，这里的偏函数和数学意义上的偏函数不一样。 在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下: int() 函数可以把字符串转换为整数，当仅传入字符串时，int()",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/functional-programming/parital-function.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"偏函数"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2021-03-15T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1615823008e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.01,words:603},filePathRelative:"code/language/python/functional-programming/parital-function.md"}}}]);