"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9319],{22700:(e,n,s)=>{s.r(n),s.d(n,{default:()=>i});const a=(0,s(34086).uE)('<p>Python 内建的 <code>filter()</code> 函数用于过滤序列。</p><p>和 <code>map()</code> 类似，<code>filter()</code> 也接收一个函数和一个序列。和 <code>map()</code> 不同的是，<code>filter()</code> 把传入的函数依次作用于每个元素，然后根据返回值是 <code>True</code> 还是 <code>False</code> 决定保留还是丢弃该元素。</p><p>例如，在一个 list 中，删掉偶数，只保留奇数，可以这么写:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def is_odd(n):\n    return n % 2 == 1\n\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# 结果: [1, 5, 9, 15]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>把一个序列中的空字符串删掉，可以这么写:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def not_empty(s):\n    return s and s.strip()\n\nlist(filter(not_empty, [&#39;A&#39;, &#39;&#39;, &#39;B&#39;, None, &#39;C&#39;, &#39;  &#39;]))\n# 结果: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可见用 <code>filter()</code> 这个高阶函数，关键在于正确实现一个“筛选”函数。</p><p>注意到 <code>filter()</code> 函数返回的是一个 Iterator，也就是一个惰性序列，所以要强迫 <code>filter()</code> 完成计算结果，需要用 <code>list()</code> 函数获得所有结果并返回 list。</p><h2 id="用-filter-求素数" tabindex="-1"><a class="header-anchor" href="#用-filter-求素数" aria-hidden="true">#</a> 用 filter 求素数</h2><p>计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单:</p><p>首先，列出从 2 开始的所有自然数，构造一个序列:</p><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...</p><p>取序列的第一个数 2，它一定是素数，然后用 2 把序列的 2 的倍数筛掉:</p><p>3, <s>4</s>, 5, <s>6</s>, 7, <s>8</s>, 9, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, 15, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, ...</p><p>取新序列的第一个数 3，它一定是素数，然后用 3 把序列的 3 的倍数筛掉:</p><p>5, <s>6</s>, 7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, ...</p><p>取新序列的第一个数 5，然后用 5 把序列的 5 的倍数筛掉:</p><p>7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, ...</p><p>不断筛下去，就可以得到所有的素数。</p><p>用 Python 来实现这个算法，可以先构造一个从 3 开始的奇数序列:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def _odd_iter():\n    n = 1\n    while True:\n        n = n + 2\n        yield n\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意这是一个生成器，并且是一个无限序列。</p><p>然后定义一个筛选函数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def _not_divisible(n):\n    return lambda x: x % n &gt; 0\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后，定义一个生成器，不断返回下一个素数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>def primes():\n    yield 2\n    it = _odd_iter() # 初始序列\n    while True:\n        n = next(it) # 返回序列的第一个数\n        yield n\n        it = filter(_not_divisible(n), it) # 构造新序列\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个生成器先返回第一个素数 2，然后，利用 <code>filter()</code> 不断产生筛选后的新的序列。</p><p>由于 <code>primes()</code> 也是一个无限序列，所以调用时需要设置一个退出循环的条件:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code># 打印1000以内的素数\n\nfor n in primes():\n    if n &lt; 1000:\n        print(n)\n    else:\n        break\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意到 Iterator 是惰性计算的序列，所以我们可以用 Python 表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p><code>filter()</code> 的作用是从一个序列中筛出符合条件的元素。由于 <code>filter()</code> 使用了惰性计算，所以只有在取 <code>filter()</code> 结果的时候，才会真正筛选并每次返回下一个筛出的元素。</p>',32),r={},i=(0,s(82831).Z)(r,[["render",function(e,n){return a}]])},82831:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}},66433:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-39354ab9",path:"/code/language/python/functional-programming/high-order-function/filter.html",title:"filter",lang:"zh-CN",frontmatter:{title:"filter",icon:"filter",author:"廖雪峰",date:"2020-05-31T00:00:00.000Z",category:["Python"],summary:"Python 内建的 filter() 函数用于过滤序列。 和 map() 类似，filter() 也接收一个函数和一个序列。和 map() 不同的是，filter() 把传入的函数依次作用于每个元素，然后根据返回值是 True 还是 False 决定保留还是丢弃该元素。 例如，在一个 list 中，删掉偶数，只保留奇数，可以这么写: 把一个序列中的空字符串",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/functional-programming/high-order-function/filter.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"filter"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-31T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"用 filter 求素数",slug:"用-filter-求素数",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.68,words:804},filePathRelative:"code/language/python/functional-programming/high-order-function/filter.md"}}}]);