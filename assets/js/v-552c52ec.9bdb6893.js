"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[55028],{57578:(e,n,r)=>{r.r(n),r.d(n,{default:()=>m});var s=r(34086);const t=(0,s._)("p",null,"联合类型(Union Types)表示取值可以为多种类型中的一种。",-1),a=(0,s.uE)('<h2 id="简单的例子" tabindex="-1"><a class="header-anchor" href="#简单的例子" aria-hidden="true">#</a> 简单的例子</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myFavoriteNumber: string | number;\nmyFavoriteNumber = &quot;seven&quot;;\nmyFavoriteNumber = 7;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myFavoriteNumber: string | number;\nmyFavoriteNumber = true;\n\n// index.ts(2,1): error TS2322: Type &#39;boolean&#39; is not assignable to type &#39;string | number&#39;.\n//   Type &#39;boolean&#39; is not assignable to type &#39;number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>联合类型使用 <code>|</code> 分隔每个类型。</p><p>这里的 <code>let myFavoriteNumber: string | number</code> 的含义是，允许 <code>myFavoriteNumber</code> 的类型是 <code>string</code> 或者 <code>number</code>，但是不能是其他类型。</p><h2 id="访问联合类型的属性或方法" tabindex="-1"><a class="header-anchor" href="#访问联合类型的属性或方法" aria-hidden="true">#</a> 访问联合类型的属性或方法</h2><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们<strong>只能访问此联合类型的所有类型里共有的属性或方法</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function getLength(something: string | number): number {\n  return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &#39;string | number&#39;.\n//   Property &#39;length&#39; does not exist on type &#39;number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上例中，<code>length</code> 不是 <code>string</code> 和 <code>number</code> 的共有属性，所以会报错。</p><p>访问 <code>string</code> 和 <code>number</code> 的共有属性是没问题的:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function getString(something: string | number): string {\n  return something.toString();\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myFavoriteNumber: string | number;\nmyFavoriteNumber = &quot;seven&quot;;\nconsole.log(myFavoriteNumber.length); // 5\nmyFavoriteNumber = 7;\nconsole.log(myFavoriteNumber.length); // 编译时报错\n\n// index.ts(5,30): error TS2339: Property &#39;length&#39; does not exist on type &#39;number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上例中，第二行的 <code>myFavoriteNumber</code> 被推断成了 <code>string</code>，访问它的 <code>length</code> 属性不会报错。</p><p>而第四行的 <code>myFavoriteNumber</code> 被推断成了 <code>number</code>，访问它的 <code>length</code> 属性时就报错了。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',16),i={href:"http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types",target:"_blank",rel:"noopener noreferrer"},o=(0,s.Uk)("Advanced Types # Union Types"),p=(0,s.Uk)("("),l={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("中文版"),d=(0,s.Uk)(")"),u={},m=(0,r(82831).Z)(u,[["render",function(e,n){const r=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s.kq)(" more "),a,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",i,[o,(0,s.Wm)(r)]),p,(0,s._)("a",l,[c,(0,s.Wm)(r)]),d])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const r=e.__vccOpts||e;for(const[e,s]of n)r[e]=s;return r}},90858:(e,n,r)=>{r.r(n),r.d(n,{data:()=>s});const s={key:"v-552c52ec",path:"/code/language/typescript/basics/union-types.html",title:"联合类型",lang:"zh-CN",frontmatter:{title:"联合类型",icon:"structure",category:["TypeScript"],summary:"联合类型(Union Types)表示取值可以为多种类型中的一种。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/union-types.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"联合类型"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-06-03T17:08:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-06-03T17:08:34.000Z"}]]},excerpt:"<p>联合类型(Union Types)表示取值可以为多种类型中的一种。</p>\n",headers:[{level:2,title:"简单的例子",slug:"简单的例子",children:[]},{level:2,title:"访问联合类型的属性或方法",slug:"访问联合类型的属性或方法",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1591204114e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:1.29,words:387},filePathRelative:"code/language/typescript/basics/union-types.md"}}}]);