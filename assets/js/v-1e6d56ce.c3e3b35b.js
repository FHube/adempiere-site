"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[61859],{43828:(e,n,a)=>{a.r(n),a.d(n,{default:()=>l});const s=(0,a(34086).uE)('<p>取一个 list 或 tuple 的部分元素是非常常见的操作。比如，一个 list 如下:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L = [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>取前 3 个元素，应该怎么做?</p><p>笨办法:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [L[0], L[1], L[2]]\n[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>之所以是笨办法是因为扩展一下，取前 N 个元素就没辙了。</p><p>取前 N 个元素，也就是索引为 0-(N-1)的元素，可以用循环:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; r = []\n&gt;&gt;&gt; n = 3\n&gt;&gt;&gt; for i in range(n):\n...     r.append(L[i])\n...\n&gt;&gt;&gt; r\n[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python 提供了切片(Slice)操作符，能大大简化这种操作。</p><p>对应上面的问题，取前 3 个元素，用一行代码就可以完成切片:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[0:3]\n[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>L[0:3]</code> 表示，从索引 0 开始取，直到索引 3 为止，但不包括索引 3。即索引 0，1，2，正好是 3 个元素。</p><p>如果第一个索引是 0，还可以省略:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[:3]\n[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]\n也可以从索引1开始，取出2个元素出来:\n&gt;&gt;&gt; L[1:3]\n[&#39;Sarah&#39;, &#39;Tracy&#39;]\n类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试:\n&gt;&gt;&gt; L[-2:]\n[&#39;Bob&#39;, &#39;Jack&#39;]\n&gt;&gt;&gt; L[-2:-1]\n[&#39;Bob&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>记住倒数第一个元素的索引是 <code>-1</code>。</p><p>切片操作十分有用。我们先创建一个 0-99 的数列:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L = list(range(100))\n&gt;&gt;&gt; L\n[0, 1, 2, 3, ..., 99]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以通过切片轻松取出某一段数列。比如前 10 个数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[:10]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>后 10 个数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[-10:]\n[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>前 11-20 个数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[10:20]\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>前 10 个数，每两个取一个:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[:10:2]\n[0, 2, 4, 6, 8]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>所有数，每 5 个取一个:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[::5]\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>甚至什么都不写，只写 <code>[:]</code> 就可以原样复制一个 list:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; L[:]\n[0, 1, 2, 3, ..., 99]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>tuple 也是一种 list，唯一区别是 tuple 不可变。因此，tuple 也可以用切片操作，只是操作的结果仍是 tuple:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; [0, 1, 2, 3, 4, 5](:3)\n(0, 1, 2)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>字符串 <code>&#39;xxx&#39;</code> 也可以看成是一种 list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; &#39;ABCDEFG&#39;[:3]\n&#39;ABC&#39;\n&gt;&gt;&gt; &#39;ABCDEFG&#39;[::2]\n&#39;ACEG&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在很多编程语言中，针对字符串提供了很多各种截取函数(例如，substring)，其实目的就是对字符串切片。Python 没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>有了切片操作，很多地方循环就不再需要了。Python 的切片非常灵活，一行代码就可以实现很多行循环才能完成的操作。</p>',36),r={},l=(0,a(82831).Z)(r,[["render",function(e,n){return s}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},16587:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-1e6d56ce",path:"/code/language/python/advance/slice.html",title:"切片",lang:"zh-CN",frontmatter:{title:"切片",icon:"stack",author:"廖雪峰",date:"2020-05-28T00:00:00.000Z",category:["Python"],summary:"取一个 list 或 tuple 的部分元素是非常常见的操作。比如，一个 list 如下: 取前 3 个元素，应该怎么做? 笨办法: 之所以是笨办法是因为扩展一下，取前 N 个元素就没辙了。 取前 N 个元素，也就是索引为 0-(N-1)的元素，可以用循环: 对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python 提供了切片(Slice)操作符，",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/advance/slice.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"切片"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-28T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.49,words:747},filePathRelative:"code/language/python/advance/slice.md"}}}]);