"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[65541],{63512:(e,s,a)=>{a.r(s),a.d(s,{default:()=>d});var n=a(34086);const r=(0,n._)("p",null,[(0,n.Uk)("JavaScript 的字符串就是用 "),(0,n._)("code",null,"''"),(0,n.Uk)(" 或 "),(0,n._)("code",null,'""'),(0,n.Uk)(" 括起来的字符表示。")],-1),c=(0,n.uE)('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>请注意，<code>&#39;&#39;</code> 或 <code>&quot;&quot;</code> 本身只是一种表示方式，不是字符串的一部分，因此，字符串 <code>&#39;abc&#39;</code> 只有 <code>a</code>，<code>b</code>，<code>c</code> 这 3 个字符。</p></div><p>如果 <code>&#39;</code> 本身也是一个字符，那就可以用 <code>&quot;&quot;</code> 括起来，比如 <code>&quot;I&#39;m OK&quot;</code> 包含的字符是 <code>I</code>，<code>&#39;</code>，<code>m</code>，<code>空格</code>，<code>O</code>，<code>K</code> 这 6 个字符。</p><p>如果字符串内部既包含 <code>&#39;</code> 又包含 <code>&quot;</code> 怎么办? 可以用转义字符 <code>\\</code> 来标识，比如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&#39;I\\&#39;m \\&quot;OK\\&quot;!&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>表示的字符串内容是: <code>I&#39;m &quot;OK&quot;!</code></p><p>转义字符 <code>\\</code> 可以转义很多字符，比如 <code>\\n</code> 表示换行，<code>\\t</code> 表示制表符，字符 <code>\\</code> 本身也要转义，所以 <code>\\\\</code> 表示的字符就是 <code>\\</code>。</p><p>ASCII 字符可以以 <code>\\x##</code> 形式的十六进制表示，例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;\\x41&quot;; // 完全等同于 &#39;A&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>还可以用 <code>\\u####</code> 表示一个 Unicode 字符:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;\\u4e2d\\u6587&quot;; // 完全等同于 &#39;中文&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串" aria-hidden="true">#</a> 多行字符串</h2><p>由于多行字符串用 <code>\\n</code> 写起来比较费事，所以最新的 ES6 标准新增了一种多行字符串的表示方法，用反引号 <code>`</code> 表示:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>`这是一个\n多行\n字符串`;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>反引号在键盘的 <code>ESC</code> 下方，数字键 1 的左边。</p></div><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h2><p>要把多个字符串连接起来，可以用 <code>+</code> 号连接:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const name = &quot;小明&quot;;\nconst age = 20;\nconst message = &quot;您好, &quot; + name + &quot;, 您今年&quot; + age + &quot;岁了!&quot;;\n\nalert(message);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果有很多变量需要连接，用 <code>+</code> 号就比较麻烦。ES6 新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const name = &quot;小明&quot;;\nconst age = 20;\nconst message = `您好, ${name}, 您今年${age}岁了!`;\n\nalert(message);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="操作字符串" tabindex="-1"><a class="header-anchor" href="#操作字符串" aria-hidden="true">#</a> 操作字符串</h2><p>字符串常见的操作如下:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = &quot;Hello, world!&quot;;\n\ns.length; // 13\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>要获取字符串某个指定位置的字符，使用类似 <code>Array</code> 的下标操作，索引号从 <code>0</code> 开始:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = &quot;Hello, world!&quot;;\n\ns[0]; // &#39;H&#39;\ns[6]; // &#39; &#39;\ns[7]; // &#39;w&#39;\ns[12]; // &#39;!&#39;\ns[13]; // undefined 超出范围的索引不会报错，但一律返回 undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是也没有任何效果:</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let s = &quot;Test&quot;;\n\ns[0] = &quot;X&quot;;\nalert(s); // s 仍然为 &#39;Test&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>JavaScript 为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串:</p><ul><li><p>toUpperCase</p><p><code>toUpperCase()</code> 把一个字符串全部变为大写:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = &quot;Hello&quot;;\ns.toUpperCase(); // 返回 &#39;HELLO&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>toLowerCase</p><p><code>toLowerCase()</code> 把一个字符串全部变为小写:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = &quot;Hello&quot;;\nconst lower = s.toLowerCase(); // 返回 &#39;hello&#39; 并赋值给变量 lower\n\nlower; // &#39;hello&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>indexOf</p><p><code>indexOf()</code> 会搜索指定字符串第一次出现的位置:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = &quot;hello, world&quot;;\n\ns.indexOf(&quot;world&quot;); // 返回 7\ns.indexOf(&quot;World&quot;); // 没有找到指定的子串，返回 -1\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>substring</p><p><code>substring()</code> 返回指定索引区间的子串:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = &quot;hello, world&quot;;\n\ns.substring(0, 5); // 从索引 0 开始到 5(不包括 5)，返回 &#39;hello&#39;\ns.substring(7); // 从索引 7 开始到结束，返回 &#39;world&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="更多介绍" tabindex="-1"><a class="header-anchor" href="#更多介绍" aria-hidden="true">#</a> 更多介绍</h2>',29),l=(0,n.Uk)("更系统的介绍详见 "),o=(0,n.Uk)("数据结构 / 字符串"),i={},d=(0,a(82831).Z)(i,[["render",function(e,s){const a=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[r,(0,n.kq)(" more "),c,(0,n._)("p",null,[l,(0,n.Wm)(a,{to:"/code/language/js/types/string.html"},{default:(0,n.w5)((()=>[o])),_:1})])],64)}]])},82831:(e,s)=>{s.Z=(e,s)=>{const a=e.__vccOpts||e;for(const[e,n]of s)a[e]=n;return a}},23673:(e,s,a)=>{a.r(s),a.d(s,{data:()=>n});const n={key:"v-03b28006",path:"/code/language/js/guide/string.html",title:"字符串",lang:"zh-CN",frontmatter:{title:"字符串",icon:"string",date:"2019-09-16T00:00:00.000Z",category:["JavaScript"],tag:["快速上手"],summary:"JavaScript 的字符串就是用 '' 或 &quot;&quot; 括起来的字符表示。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/guide/string.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"字符串"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"快速上手"}],["meta",{property:"article:published_time",content:"2019-09-16T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>JavaScript 的字符串就是用 <code v-pre>''</code> 或 <code v-pre>&quot;&quot;</code> 括起来的字符表示。</p>\n",headers:[{level:2,title:"多行字符串",slug:"多行字符串",children:[]},{level:2,title:"模板字符串",slug:"模板字符串",children:[]},{level:2,title:"操作字符串",slug:"操作字符串",children:[]},{level:2,title:"更多介绍",slug:"更多介绍",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:8}]},readingTime:{minutes:2.67,words:801},filePathRelative:"code/language/js/guide/string.md"}}}]);