"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[80023],{16506:(e,a,n)=>{n.r(a),n.d(a,{default:()=>d});var s=n(34086);const r=(0,s._)("p",null,"ES6 新引入的 Map 与 Set 是对数组和对象欠缺功能的一种补充。",-1),c=(0,s.uE)('<h2 id="map-的引入" tabindex="-1"><a class="header-anchor" href="#map-的引入" aria-hidden="true">#</a> Map 的引入</h2><p>JavaScript 的默认对象表示方式 <code>{}</code> 可以视为其他语言中的 <code>Map</code> 或 <code>Dictionary</code> 的数据结构，即一组键值对。</p><p>但是 JavaScript 的对象有个小问题，就是键必须是字符串。但实际上 Number 或者其他数据类型作为键也是非常合理的。</p><p>为了解决这个问题，最新的 ES6 规范引入了新的数据类型 <code>Map</code>。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p><code>Map</code> 是一组键值对的结构，具有极快的查找速度。</p><p>举个例子，假设要根据同学的名字查找对应的成绩，如果用 Array 实现，需要两个 Array:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const names = [&quot;Michael&quot;, &quot;Bob&quot;, &quot;Tracy&quot;];\nconst scores = [95, 75, 85];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>给定一个名字，要查找对应的成绩，就先要在 <code>names</code> 中找到对应的位置，再从 <code>scores</code> 取出对应的成绩，Array 越长，耗时越长。</p><p>如果用 Map 实现，只需要一个 <code>“名字”-“成绩”</code> 的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用 JavaScript 写一个 <code>Map</code> 如下:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map([\n  [&quot;Michael&quot;, 95],\n  [&quot;Bob&quot;, 75],\n  [&quot;Tracy&quot;, 85],\n]);\n\nm.get(&quot;Michael&quot;); // 95\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>初始化 <code>Map</code> 需要一个二维数组，或者直接初始化一个空 <code>Map</code>。<code>Map</code> 具有以下方法:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map(); // 空Map\n\nm.set(&quot;Adam&quot;, 67); // 添加新的key-value\nm.set(&quot;Bob&quot;, 59);\nm.has(&quot;Adam&quot;); // 是否存在key &#39;Adam&#39;: true\nm.get(&quot;Adam&quot;); // 67\nm.delete(&quot;Adam&quot;); // 删除key &#39;Adam&#39;\nm.get(&quot;Adam&quot;); // undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于一个 <code>key</code> 只能对应一个 <code>value</code> ，所以，多次对一个 <code>key</code> 放入 <code>value</code>，后面的值会把前面的值冲掉:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map();\n\nm.set(&quot;Adam&quot;, 67);\nm.set(&quot;Adam&quot;, 88);\nm.get(&quot;Adam&quot;); // 88\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><p><code>Set</code> 和 <code>Map</code> 类似，也是一组 <code>key</code> 的集合，但不存储 <code>value</code>。由于 <code>key</code> 不能重复，所以，在 <code>Set</code> 中，没有重复的 <code>key</code>。</p><p>要创建一个 <code>Set</code>，需要提供一个 <code>Array</code> 作为输入，或者直接创建一个空 <code>Set</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s1 = new Set(); // 空Set\nconst s2 = new Set([1, 2, 3]); // 含1, 2, 3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>重复元素在 <code>Set</code> 中自动被过滤:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = new Set([1, 2, 3, 3, &quot;3&quot;]);\n\ns; // Set {1, 2, 3, &quot;3&quot;}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意数字 <code>3</code> 和字符串 <code>&#39;3&#39;</code> 是不同的元素。</p><p>通过 <code>add(key)</code> 方法可以添加元素到 <code>Set</code> 中，可以重复添加，但不会有效果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>s.add(4);\ns; // Set {1, 2, 3, 4}\ns.add(4);\ns; // 仍然是 Set {1, 2, 3, 4}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过 <code>delete(key)</code> 方法可以删除元素:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = new Set([1, 2, 3]);\n\ns; // Set {1, 2, 3}\ns.delete(3);\ns; // Set {1, 2}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>Map 和 Set 是 ES6 标准新增的数据类型，请根据浏览器的支持情况决定是否要使用。</p>',28),t={},d=(0,n(82831).Z)(t,[["render",function(e,a){return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s.kq)(" more "),c],64)}]])},82831:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}},81247:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-19e36b6e",path:"/code/language/js/guide/map-and-set.html",title:"Map 和 Set",lang:"zh-CN",frontmatter:{title:"Map 和 Set",icon:"map",date:"2019-09-19T00:00:00.000Z",category:["JavaScript"],summary:"ES6 新引入的 Map 与 Set 是对数组和对象欠缺功能的一种补充。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/guide/map-and-set.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"Map 和 Set"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-09-19T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>ES6 新引入的 Map 与 Set 是对数组和对象欠缺功能的一种补充。</p>\n",headers:[{level:2,title:"Map 的引入",slug:"map-的引入",children:[]},{level:2,title:"Map",slug:"map",children:[]},{level:2,title:"Set",slug:"set",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1604856355e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:2.25,words:674},filePathRelative:"code/language/js/guide/map-and-set.md"}}}]);