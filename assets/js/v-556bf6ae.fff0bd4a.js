"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[82415],{3778:(n,s,e)=>{e.r(s),e.d(s,{default:()=>i});var a=e(34086);const r=(0,a._)("p",null,"从 ES6 开始，JavaScript 引入了解构赋值，可以同时对一组变量进行赋值。",-1),p=(0,a.uE)('<p>什么是解构赋值? 我们先看看传统的做法，如何把一个数组的元素分别赋值给几个变量:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const array = [&quot;hello&quot;, &quot;JavaScript&quot;, &quot;ES6&quot;];\nconst x = array[0];\nconst y = array[1];\nconst z = array[2];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在，在 ES6 中，可以使用解构赋值，直接对多个变量同时赋值:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\n// 如果浏览器支持解构赋值就不会报错:\nconst [x, y, z] = [&quot;hello&quot;, &quot;JavaScript&quot;, &quot;ES6&quot;];\n\n// x, y, z分别被赋值为数组对应元素:\nconsole.log(&quot;x = &quot; + x + &quot;, y = &quot; + y + &quot;, z = &quot; + z);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意，对数组元素进行解构赋值时，多个变量要用 <code>[...]</code> 括起来。</p><p>如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const [x, [y, z]] = [&quot;hello&quot;, [&quot;JavaScript&quot;, &quot;ES6&quot;]];\n\nx; // &#39;hello&#39;\ny; // &#39;JavaScript&#39;\nz; // &#39;ES6&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>解构赋值还可以忽略某些元素:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const [, , z] = [&quot;hello&quot;, &quot;JavaScript&quot;, &quot;ES6&quot;]; // 忽略前两个元素，只对 z 赋值第三个元素\nz; // &#39;ES6&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nconst person = {\n  name: &quot;小明&quot;,\n  age: 20,\n  gender: &quot;male&quot;,\n  passport: &quot;G-12345678&quot;,\n  school: &quot;No.4 middle school&quot;,\n};\nconst { name, age, passport } = person;\n\n// name, age, passport 分别被赋值为对应属性:\nconsole.log(`name = ${name}, age = ${age}, passport = ${passport}`);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const person = {\n  name: &quot;小明&quot;,\n  age: 20,\n  gender: &quot;male&quot;,\n  passport: &quot;G-12345678&quot;,\n  school: &quot;No.4 middle school&quot;,\n  address: {\n    city: &quot;Beijing&quot;,\n    street: &quot;No.1 Road&quot;,\n    zipcode: &quot;100001&quot;,\n  },\n};\nconst {\n  name,\n  address: { city, zip },\n} = person;\n\nname; // &#39;小明&#39;\ncity; // &#39;Beijing&#39;\nzip; // undefined, 因为属性名是 zipcode 而不是 zip\n// 注意: address 不是变量，而是为了让 city 和 zip 获得嵌套的 address 对象的属性:\naddress; // Uncaught ReferenceError: address is not defined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为 <code>undefined</code>，这和引用一个不存在的属性获得 <code>undefined</code> 是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const person = {\n  name: &quot;小明&quot;,\n  age: 20,\n  gender: &quot;male&quot;,\n  passport: &quot;G-12345678&quot;,\n  school: &quot;No.4 middle school&quot;,\n};\n\n// 把 passport 属性赋值给变量 id:\nconst { name, passport: id } = person;\n\nname; // &#39;小明&#39;\nid; // &#39;G-12345678&#39;\n// 注意: passport 不是变量，而是为了让变量 id 获得 passport 属性:\npassport; // Uncaught ReferenceError: passport is not defined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>解构赋值还可以使用默认值，这样就避免了不存在的属性返回 <code>undefined</code> 的问题:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const person = {\n  name: &quot;小明&quot;,\n  age: 20,\n  gender: &quot;male&quot;,\n  passport: &quot;G-12345678&quot;,\n};\n\n// 如果 person 对象没有 single 属性，默认赋值为 true:\nconst { name, single = true } = person;\n\nname; // &#39;小明&#39;\nsingle; // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 声明变量:\nlet x, y;\n\n// 解构赋值:\n{x, y} = { name: &#39;小明&#39;, x: 100, y: 200};\n// 语法错误: Uncaught SyntaxError: Unexpected token =\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这是因为 JavaScript 引擎把 <code>{</code> 开头的语句当作了块处理，于是 <code>=</code> 不再合法。解决方法是用小括号括起来:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>({ x, y } = { name: &quot;小明&quot;, x: 100, y: 200 });\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>解构赋值在很多时候可以大大简化代码。例如，交换两个变量 x 和 y 的值，可以这么写，不再需要临时变量:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let x = 1,\n  y = 2;\n\n[x, y] = [y, x];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>快速获取当前页面的域名和路径:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const { hostname: domain, pathname: path } = location;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个 Date 对象:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function buildDate({ year, month, day, hour = 0, minute = 0, second = 0 }) {\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它的方便之处在于传入的对象只需要 <code>year</code>、<code>month</code> 和 <code>day</code> 这三个属性:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>buildDate({ year: 2017, month: 1, day: 1 });\n// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>也可以传入 <code>hour</code>、<code>minute</code> 和 <code>second</code> 属性:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>buildDate({ year: 2017, month: 1, day: 1, hour: 20, minute: 15 });\n// Sun Jan 01 2017 20:15:00 GMT+0800 (CST)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用解构赋值可以减少代码量，但是，需要在支持 ES6 解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括 Chrome，Firefox，Edge 等。</p>',33),l={},i=(0,e(82831).Z)(l,[["render",function(n,s){return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a.kq)(" more "),p],64)}]])},82831:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},36888:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-556bf6ae",path:"/code/language/js/function/destructuring.html",title:"解构赋值",lang:"zh-CN",frontmatter:{title:"解构赋值",icon:"structure",date:"2019-10-03T00:00:00.000Z",category:["JavaScript"],summary:"从 ES6 开始，JavaScript 引入了解构赋值，可以同时对一组变量进行赋值。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/function/destructuring.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"解构赋值"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-10-03T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"<p>从 ES6 开始，JavaScript 引入了解构赋值，可以同时对一组变量进行赋值。</p>\n",headers:[{level:2,title:"使用场景",slug:"使用场景",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4}]},readingTime:{minutes:3.74,words:1122},filePathRelative:"code/language/js/function/destructuring.md"}}}]);