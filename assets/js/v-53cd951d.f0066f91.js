"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3851],{19314:(n,e,s)=>{s.r(e),s.d(e,{default:()=>m});var a=s(34086);const l=(0,a._)("p",null,[(0,a.Uk)("要计算 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mn",null,"1"),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"2"),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"3")]),(0,a._)("annotation",{encoding:"application/x-tex"},"1+2+3")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"1"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"2"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.6444em"}}),(0,a._)("span",{class:"mord"},"3")])])]),(0,a.Uk)(" ，我们可以直接写表达式:")],-1),r=(0,a.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; 1 + 2 + 3\n6\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),t=(0,a._)("p",null,[(0,a.Uk)("要计算 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mn",null,"1"),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"2"),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"3"),(0,a._)("mo",null,"+"),(0,a._)("mi",{mathvariant:"normal"},"."),(0,a._)("mi",{mathvariant:"normal"},"."),(0,a._)("mi",{mathvariant:"normal"},"."),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"10")]),(0,a._)("annotation",{encoding:"application/x-tex"},"1+2+3+...+10")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"1"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"2"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"3"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"..."),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.6444em"}}),(0,a._)("span",{class:"mord"},"10")])])]),(0,a.Uk)(" ，勉强也能写出来。")],-1),i=(0,a._)("p",null,[(0,a.Uk)("但是，要计算 "),(0,a._)("span",{class:"katex"},[(0,a._)("span",{class:"katex-mathml"},[(0,a._)("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[(0,a._)("semantics",null,[(0,a._)("mrow",null,[(0,a._)("mn",null,"1"),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"2"),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"3"),(0,a._)("mo",null,"+"),(0,a._)("mi",{mathvariant:"normal"},"."),(0,a._)("mi",{mathvariant:"normal"},"."),(0,a._)("mi",{mathvariant:"normal"},"."),(0,a._)("mo",null,"+"),(0,a._)("mn",null,"10000")]),(0,a._)("annotation",{encoding:"application/x-tex"},"1+2+3+...+10000")])])]),(0,a._)("span",{class:"katex-html","aria-hidden":"true"},[(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"1"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"2"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"3"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),(0,a._)("span",{class:"mord"},"..."),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),(0,a._)("span",{class:"mbin"},"+"),(0,a._)("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),(0,a._)("span",{class:"base"},[(0,a._)("span",{class:"strut",style:{height:"0.6444em"}}),(0,a._)("span",{class:"mord"},"10000")])])]),(0,a.Uk)(" ，直接写表达式就不可能了。")],-1),p=(0,a.uE)('<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p><p>Python 的循环有两种，一种是 <code>for...in</code> 循环，依次把 list 或 tuple 中的每个元素迭代出来，看例子:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>names = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]\nfor name in names:\n    print(name)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行这段代码，会依次打印 <code>names</code> 的每一个元素:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Michael\nBob\nTracy\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以 <code>for x in ...</code> 循环就是把每个元素代入变量 <code>x</code>，然后执行缩进块的语句。</p><p>再比如我们想计算 1-10 的整数之和，可以用一个 <code>sum</code> 变量做累加:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>sum = 0\nfor x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    sum = sum + x\nprint(sum)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果要计算 1-100 的整数之和，从 1 写到 100 有点困难，幸好 Python 提供一个 <code>range()</code> 函数，可以生成一个整数序列，再通过 <code>list()</code> 函数可以转换为 list。比如 <code>range(5)</code> 生成的序列是从 0 开始小于 5 的整数:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>&gt;&gt;&gt; list(range(5))\n[0, 1, 2, 3, 4]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>range(101)</code> 就可以生成 0-100 的整数序列，计算如下:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code># -*- coding: utf-8 -*-\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>请自行运行上述代码，看看结果是不是当年高斯同学心算出的 5050。</p><p>第二种循环是 <code>while</code> 循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算 100 以内所有奇数之和，可以用 <code>while</code> 循环实现:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>sum = 0\nn = 99\nwhile n &gt; 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在循环内部变量 <code>n</code> 不断自减，直到变为 <code>-1</code> 时，不再满足 <code>while</code> 条件，循环退出。</p><h2 id="break" tabindex="-1"><a class="header-anchor" href="#break" aria-hidden="true">#</a> break</h2><p>在循环中，<code>break</code> 语句可以提前退出循环。例如，本来要循环打印 1 ～ 100 的数字:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n = 1\nwhile n &lt;= 100:\n    print(n)\n    n = n + 1\nprint(&#39;END&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的代码可以打印出 1~100。</p><p>如果要提前结束循环，可以用 <code>break</code> 语句:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n = 1\nwhile n &lt;= 100:\n    if n &gt; 10: # 当n = 11时，条件满足，执行break语句\n        break # break语句会结束当前循环\n    print(n)\n    n = n + 1\nprint(&#39;END&#39;)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>执行上面的代码可以看到，打印出 1~10 后，紧接着打印 <code>END</code>，程序结束。</p><p>可见 <code>break</code> 的作用是提前结束循环。</p><h2 id="continue" tabindex="-1"><a class="header-anchor" href="#continue" aria-hidden="true">#</a> continue</h2><p>在循环过程中，也可以通过 <code>continue</code> 语句，跳过当前的这次循环，直接开始下一次循环。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n = 0\nwhile n &lt; 10:\n    n = n + 1\n    print(n)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的程序可以打印出 1 ～ 10。但是，如果我们想只打印奇数，可以用 <code>continue</code> 语句跳过某些循环:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n = 0\nwhile n &lt; 10:\n    n = n + 1\n    if n % 2 == 0: # 如果n是偶数，执行continue语句\n        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行\n    print(n)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>执行上面的代码可以看到，打印的不再是 1 ～ 10，而是 1，3，5，7，9。</p><p>可见 <code>continue</code> 的作用是提前结束本轮循环，并直接开始下一轮循环。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>循环是让计算机做重复任务的有效的方法。</p><p><code>break</code> 语句可以在循环过程中直接退出循环，而 <code>continue</code> 语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合 <code>if</code> 语句使用。</p><p>要特别注意，不要滥用 <code>break</code> 和 <code>continue</code> 语句。<code>break</code> 和 <code>continue</code> 会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到 <code>break</code> 和 <code>continue</code> 语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉 <code>break</code> 和 <code>continue</code> 语句。</p><p>有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用 <code>Ctrl + C</code> 退出程序，或者强制结束 Python 进程。</p>',36),c={},m=(0,s(82831).Z)(c,[["render",function(n,e){return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,r,t,i,p],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}},17397:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-53cd951d",path:"/code/language/python/guide/loop.html",title:"循环",lang:"zh-CN",frontmatter:{title:"循环",icon:"loop",author:"廖雪峰",date:"2020-05-24T00:00:00.000Z",category:["Python"],summary:"要计算 $1+2+3$ ，我们可以直接写表达式: 要计算 $1+2+3+...+10$ ，勉强也能写出来。 但是，要计算 $1+2+3+...+10000$ ，直接写表达式就不可能了。 为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。 Python 的循环有两种，一种是 for...in 循环，依次把 list 或 tuple 中的每个元素迭代出",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/python/guide/loop.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"循环"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"廖雪峰"}],["meta",{property:"article:published_time",content:"2020-05-24T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[{level:2,title:"break",slug:"break",children:[]},{level:2,title:"continue",slug:"continue",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:3.38,words:1014},filePathRelative:"code/language/python/guide/loop.md"}}}]);