"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[65111],{80190:(e,a,s)=>{s.r(a),s.d(a,{default:()=>b});var n=s(34086);const l={class:"custom-container tip"},c=(0,n._)("p",{class:"custom-container-title"},"提示",-1),r=(0,n.Uk)("此教程与快速上手章节中的 "),i=(0,n.Uk)("布尔值介绍"),d=(0,n.Uk)(" 完全相同。"),t=(0,n.uE)('<p>布尔值代表“真”和“假”两个状态。“真”用关键字 <code>true</code> 表示，“假”用关键字 <code>false</code> 表示。布尔值只有这两个值。</p><p>下列运算符会返回布尔值:</p><ul><li>前置逻辑运算符: <code>!</code> (Not)</li><li>相等运算符: <code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code></li><li>比较运算符: <code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></li></ul><p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为 <code>false</code>，其他值都视为 <code>true</code>。</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>(空字符串)</li></ul><p>布尔值往往用于程序流程的控制，请看一个例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>if (&quot;&quot;) {\n  console.log(&quot;true&quot;);\n}\n// 没有任何输出\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码中，<code>if</code> 命令后面的判断条件，预期应该是一个布尔值，所以 JavaScript 自动将空字符串，转为布尔值 <code>false</code>，导致程序不会进入代码块，所以没有任何输出。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>注意，空数组(<code>[]</code>)和空对象(<code>{}</code>)对应的布尔值，都是 <code>true</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>if ([]) {\n  console.log(&quot;true&quot;);\n}\n// true\n\nif ({}) {\n  console.log(&quot;true&quot;);\n}\n// true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>当我们对 <code>Number</code> 做比较时，可以通过比较运算符得到一个布尔值:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>2 &gt; 5; // false\n5 &gt;= 2; // true\n7 == 7; // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>实际上，JavaScript 允许对任意数据类型做比较:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>false == 0; // true\nfalse === 0; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>要特别注意相等运算符 <code>==</code>。JavaScript 在设计时，有两种比较运算符:</p><ul><li><p>第一种是 <code>==</code> 比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p></li><li><p>第二种是 <code>===</code> 比较，它不会自动转换数据类型，如果数据类型不一致，返回 <code>false</code>，如果一致，再比较。</p></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>由于 JavaScript 这个设计缺陷，不要使用 <code>==</code> 比较，始终坚持使用 <code>===</code> 比较。</p></div><p>另一个例外是 <code>NaN</code> 这个特殊的 <code>Number</code> 与所有其他值都不相等，包括它自己:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>NaN === NaN; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>唯一能判断 <code>NaN</code> 的方法是通过 <code>isNaN()</code> 函数:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>isNaN(NaN); // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最后要注意浮点数的相等比较:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>1 / 3 === 1 - 2 / 3; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这不是 JavaScript 的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符" aria-hidden="true">#</a> 布尔运算符</h2><h3 id="与运算符" tabindex="-1"><a class="header-anchor" href="#与运算符" aria-hidden="true">#</a> 与运算符 <code>&amp;&amp;</code></h3><p><code>&amp;&amp;</code> 运算是与运算，从左至右运行时，检测到有任一表达式为 <code>false</code> 时，即停止执行输出该表达式的值，否则输出最后一个表达式的值。</p><p>也就是所只有所有表达式都为“真”时， <code>&amp;&amp;</code> 才会输出真值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>true &amp;&amp; true; // 这个&amp;&amp;语句计算结果为true\ntrue &amp;&amp; false; // 这个&amp;&amp;语句计算结果为false\nfalse &amp;&amp; true &amp;&amp; false; // 这个&amp;&amp;语句计算结果为false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="或运算符" tabindex="-1"><a class="header-anchor" href="#或运算符" aria-hidden="true">#</a> 或运算符 <code>||</code></h3><p><code>||</code> 运算是或运算，从左至右运行时，检测到有任一表达式为 <code>true</code> 时，即停止执行输出该表达式的值，否则输出最后一个表达式的值。</p><p>也就是所只有所有表达式都为“假”时， <code>||</code> 才会输出假值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>false || false; // 这个||语句计算结果为false\ntrue || false; // 这个||语句计算结果为true\nfalse || true || false; // 这个||语句计算结果为true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="非运算符" tabindex="-1"><a class="header-anchor" href="#非运算符" aria-hidden="true">#</a> 非运算符 <code>!</code></h3><p><code>!</code> 运算是非运算，它是一个单目运算符，把 <code>true</code> 变成 <code>false</code>，<code>false</code> 变成 <code>true</code>:</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>!</code> 会等待其后的表达式运算完毕，之后将其转换为 Boolean 后给出一个相反的值。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>!true; // 结果为false\n!false; // 结果为true\n!(2 &gt; 5); // 结果为true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>布尔值经常用在条件判断中，比如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let age = 15;\n\nif (age &gt;= 18) alert(&quot;adult&quot;);\nelse alert(&quot;teenager&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h3>',41),o=(0,n.Uk)("详见 "),p=(0,n.Uk)("if / 三元运算符"),u=(0,n.Uk)(" 章节"),m={},b=(0,s(82831).Z)(m,[["render",function(e,a){const s=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[(0,n._)("div",l,[c,(0,n._)("p",null,[r,(0,n.Wm)(s,{to:"/code/language/js/guide/boolean.html"},{default:(0,n.w5)((()=>[i])),_:1}),d])]),(0,n.kq)(" more "),t,(0,n._)("p",null,[o,(0,n.Wm)(s,{to:"/code/language/js/guide/condition.html#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6"},{default:(0,n.w5)((()=>[p])),_:1}),u])],64)}]])},82831:(e,a)=>{a.Z=(e,a)=>{const s=e.__vccOpts||e;for(const[e,n]of a)s[e]=n;return s}},6279:(e,a,s)=>{s.r(a),s.d(a,{data:()=>n});const n={key:"v-43d08d42",path:"/code/language/js/types/boolean.html",title:"布尔值",lang:"zh-CN",frontmatter:{title:"布尔值",icon:"boolean",date:"2019-09-21T00:00:00.000Z",category:["JavaScript"],summary:"提示\n此教程与快速上手章节中的 布尔值介绍 完全相同。\n\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/types/boolean.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"布尔值"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-09-21T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:'<div class="custom-container tip"><p class="custom-container-title">提示</p>\n<p>此教程与快速上手章节中的 <RouterLink to="/code/language/js/guide/boolean.html">布尔值介绍</RouterLink> 完全相同。</p>\n</div>\n',headers:[{level:2,title:"比较运算符",slug:"比较运算符",children:[]},{level:2,title:"布尔运算符",slug:"布尔运算符",children:[{level:3,title:"与运算符 &&",slug:"与运算符",children:[]},{level:3,title:"或运算符 ||",slug:"或运算符",children:[]},{level:3,title:"非运算符 !",slug:"非运算符",children:[]},{level:3,title:"三元运算符",slug:"三元运算符",children:[]}]}],git:{createdTime:1591204114e3,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:7}]},readingTime:{minutes:3.22,words:965},filePathRelative:"code/language/js/types/boolean.md"}}}]);