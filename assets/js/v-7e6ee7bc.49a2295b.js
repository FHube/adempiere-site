"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[82636],{63767:(e,n,a)=>{a.r(n),a.d(n,{default:()=>r});var t=a(34086);const s=(0,t._)("p",null,"在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。",-1),i=(0,t.uE)('<h2 id="响应-send-按钮" tabindex="-1"><a class="header-anchor" href="#响应-send-按钮" aria-hidden="true">#</a> 响应“Send”按钮</h2><p>您可按照以下步骤，向 MainActivity 类添加一个在用户点按 Send 按钮时调用的方法：</p><ol><li><p>在 app &gt; java &gt; com.example.myfirstapp &gt; MainActivity 文件中，添加以下 sendMessage() 方法桩：</p><p>:::: code-group</p><p>::: coude-group-item Kotlin</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n\n    /** Called when the user taps the Send button */\n    fun sendMessage(view: View) {\n        // Do something in response to button\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>:::</p><p>::: coude-group-item Java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>public class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    /** Called when the user taps the Send button */\n    public void sendMessage(View view) {\n        // Do something in response to button\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>:::</p><p>::::</p><p>您可能会看到一条错误，因为 Android Studio 无法解析用作方法参数的 View 类。若要清除错误，请点击 View 声明，将光标置于其上，然后按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Enter</code>）进行快速修复。如果出现一个菜单，请选择 Import class。</p></li><li><p>返回到 activity_main.xml 文件，并从该按钮调用此方法:</p><ol><li>选择布局编辑器中的相应按钮。</li><li>在 Attributes 窗口中，找到 onClick 属性，并从其下拉列表中选择 <code>sendMessage [MainActivity]</code>。</li></ol><p>现在，当用户点按该按钮时，系统将调用 <code>sendMessage()</code> 方法。</p><p>请注意此方法中提供的详细信息。系统需要这些信息来识别此方法是否与 android:onClick 属性兼容。具体来说，此方法具有以下特性：</p><ol><li>公开。</li><li>返回值为空，或在 Kotlin 中为隐式 Unit。</li><li>View 是唯一的参数。这是您在第 1 步结束时点击的 View 对象。</li></ol></li><li><p>接下来，填写此方法，以读取文本字段的内容，并将该文本传递给另一个 activity。</p></li></ol><h2 id="构建一个-intent" tabindex="-1"><a class="header-anchor" href="#构建一个-intent" aria-hidden="true">#</a> 构建一个 intent</h2><p><code>Intent</code> 是在相互独立的组件（如两个 activity）之间提供运行时绑定功能的对象。Intent 表示应用执行某项操作的意图。您可以使用 intent 执行多种任务，但在本课中，您的 intent 将用于启动另一个 activity。</p><p>在 MainActivity 中，添加 EXTRA_MESSAGE 常量和 sendMessage() 代码，如下所示：</p><p>:::: code-group</p><p>::: coude-group-item Kotlin</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>const val EXTRA_MESSAGE = &quot;com.example.myfirstapp.MESSAGE&quot;\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n\n    /** Called when the user taps the Send button */\n    fun sendMessage(view: View) {\n        val editText = findViewById&lt;EditText&gt;(R.id.editTextTextPersonName)\n        val message = editText.text.toString()\n        val intent = Intent(this, DisplayMessageActivity::class.java).apply {\n            putExtra(EXTRA_MESSAGE, message)\n        }\n        startActivity(intent)\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>:::</p><p>::: coude-group-item Java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>public class MainActivity extends AppCompatActivity {\n    public static final String EXTRA_MESSAGE = &quot;com.example.myfirstapp.MESSAGE&quot;;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    /** Called when the user taps the Send button */\n    public void sendMessage(View view) {\n        Intent intent = new Intent(this, DisplayMessageActivity.class);\n        EditText editText = (EditText) findViewById(R.id.editTextTextPersonName);\n        String message = editText.getText().toString();\n        intent.putExtra(EXTRA_MESSAGE, message);\n        startActivity(intent);\n    }\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>:::</p><p>::::</p><p>预计 Android Studio 会再次遇到 Cannot resolve symbol 错误。如需清除这些错误，请按 Alt+Enter（在 Mac 上则按 Option+Return）。您最后应导入以下内容：</p><p>:::: code-group</p><p>::: coude-group-item Kotlin</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>import androidx.appcompat.app.AppCompatActivity\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.EditText\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>:::</p><p>::: coude-group-item Java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>import androidx.appcompat.app.AppCompatActivity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>:::</p><p>::::</p><p>DisplayMessageActivity 仍有错误，但没有关系。您将在下一部分中修复该错误。</p><p>sendMessage() 将发生以下情况：</p><ul><li><p>Intent 构造函数会获取两个参数：Context 和 Class。</p><p>首先使用 Context 参数，因为 Activity 类是 Context 的子类。</p><p>在本例中，系统将 Intent, 传递到的应用组件的 Class 参数是要启动的 activity。</p></li><li><p>putExtra() 方法将 EditText 的值添加到 intent。Intent 能够以称为“extra”的键值对形式携带数据类型。</p><p>您的键是一个公共常量 EXTRA_MESSAGE，因为下一个 activity 将使用该键检索文本值。为 intent extra 定义键时，最好使用应用的软件包名称作为前缀。这样可以确保这些键是独一无二的，这在您的应用需要与其他应用进行交互时会很重要。</p></li><li><p>startActivity() 方法将启动一个由 Intent 指定的 DisplayMessageActivity 实例。接下来，您需要创建该类。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>导航架构组件允许您使用导航编辑器将一个 activity 与另一个 activity 相关联。建立这种关联后，您可以利用 API 在用户触发关联的操作（例如，用户点击某个按钮时）时启动第二个 activity。如需了解详情，请参阅导航。</p></div><h2 id="创建第二个-activity" tabindex="-1"><a class="header-anchor" href="#创建第二个-activity" aria-hidden="true">#</a> 创建第二个 activity</h2><p>若要创建第二个 activity，请按以下步骤操作：</p><ol><li>在 Project 窗口中，右键点击 app 文件夹，然后依次选择 New &gt; Activity &gt; Empty Activity。</li><li>在 Configure Activity 窗口中，输入“DisplayMessageActivity”作为 Activity Name。将所有其他属性保留为默认设置，然后点击 Finish。</li></ol><p>Android Studio 会自动执行下列三项操作：</p><ol><li>创建 DisplayMessageActivity 文件。</li><li>创建 DisplayMessageActivity 文件对应的布局文件 activity_display_message.xml。</li><li>在 AndroidManifest.xml 中添加所需的 <code>&lt;activity&gt;</code> 元素。</li></ol><p>如果您运行应用并点按第一个 activity 上的按钮，将启动第二个 activity，但它为空。这是因为第二个 activity 使用模板提供的空布局。</p><h2 id="添加文本视图" tabindex="-1"><a class="header-anchor" href="#添加文本视图" aria-hidden="true">#</a> 添加文本视图</h2><p>新 activity 包含一个空白布局文件。请按以下步骤操作，在显示消息的位置添加一个文本视图：</p><ol><li>打开 app &gt; res &gt; layout &gt; activity_display_message.xml 文件。</li><li>点击工具栏中的 Enable Autoconnection to Parent 。系统将启用 Autoconnect。参见图 1。</li><li>在 Palette 面板中，点击 Text，将 TextView 拖动到布局中，然后将其放置在靠近布局顶部中心的位置，使其贴靠到出现的垂直线上。Autoconnect 将添加左侧和右侧约束条件，以便将该视图放置在水平中心位置。</li><li>再创建一个从文本视图顶部到布局顶部的约束条件，使该视图如图 1 中所示。</li></ol><p>或者，您可以对文本样式进行一些调整，方法是在 Attributes 窗口的 Common Attributes 面板中展开 textAppearance，然后更改 textSize 和 textColor 等属性。</p><h2 id="显示消息" tabindex="-1"><a class="header-anchor" href="#显示消息" aria-hidden="true">#</a> 显示消息</h2><p>在此步骤中，您将修改第二个 activity 以显示第一个 activity 传递的消息。</p><ol><li><p>在 DisplayMessageActivity 中，将以下代码添加到 <code>onCreate()</code> 方法中：</p><p>:::: code-group</p><p>::: coude-group-item Kotlin</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_display_message)\n\n    // Get the Intent that started this activity and extract the string\n    val message = intent.getStringExtra(EXTRA_MESSAGE)\n\n    // Capture the layout&#39;s TextView and set the string as its text\n    val textView = findViewById&lt;TextView&gt;(R.id.textView).apply {\n        text = message\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>:::</p><p>::: coude-group-item Java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_display_message);\n\n    // Get the Intent that started this activity and extract the string\n    Intent intent = getIntent();\n    String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);\n\n    // Capture the layout&#39;s TextView and set the string as its text\n    TextView textView = findViewById(R.id.textView);\n    textView.setText(message);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>:::</p><p>::::</p></li><li><p>按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Return</code>）导入其他所需的类：</p><p>:::: code-group</p><p>::: coude-group-item Kotlin</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>import androidx.appcompat.app.AppCompatActivity\nimport android.content.Intent\nimport android.os.Bundle\nimport android.widget.TextView\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>:::</p><p>::: coude-group-item Java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>import androidx.appcompat.app.AppCompatActivity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.widget.TextView;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>:::</p><p>::::</p></li></ol><h2 id="添加向上导航功能" tabindex="-1"><a class="header-anchor" href="#添加向上导航功能" aria-hidden="true">#</a> 添加向上导航功能</h2><p>在您的应用中，不是主入口点的每个屏幕（所有不是主屏幕的屏幕）都必须提供导航功能，以便将用户引导至应用层次结构中的逻辑父级屏幕。为此，请在应用栏中添加向上按钮。</p><p>若要添加向上按钮，您需要在 <code>AndroidManifest.xml</code> 文件中声明哪个 activity 是逻辑父级。打开 app &gt; manifests &gt; AndroidManifest.xml 文件，找到 DisplayMessageActivity 的 <code>&lt;activity&gt;</code> 标记，然后将其替换为以下代码：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>&lt;activity android:name=&quot;.DisplayMessageActivity&quot;\n          android:parentActivityName=&quot;.MainActivity&quot;&gt;\n    &lt;!-- The meta-data tag is required if you support API level 15 and lower --&gt;\n    &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.MainActivity&quot; /&gt;\n&lt;/activity&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Android 系统现在会自动向应用栏添加向上按钮。</p><h2 id="运行应用" tabindex="-1"><a class="header-anchor" href="#运行应用" aria-hidden="true">#</a> 运行应用</h2><p>点击工具栏中的 Apply Changes 以运行应用。当应用打开后，在文本字段中输入一条消息，点按 Send 即会看到该消息显示在第二个 activity 中。</p>',47),p={},r=(0,a(82831).Z)(p,[["render",function(e,n){return(0,t.wg)(),(0,t.iD)(t.HY,null,[s,(0,t.kq)(" more "),i],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,t]of n)a[e]=t;return a}},2051:(e,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-7e6ee7bc",path:"/code/Android/get-started/activity.html",title:"启动另一个 activity",lang:"zh-CN",frontmatter:{title:"启动另一个 activity",icon:"info",date:"2022-04-01T00:00:00.000Z",category:["Android","快速上手"],tag:["快速上手"],summary:"在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/Android/get-started/activity.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"启动另一个 activity"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-04-01T16:05:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"快速上手"}],["meta",{property:"article:published_time",content:"2022-04-01T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-04-01T16:05:53.000Z"}]]},excerpt:"<p>在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。</p>\n",headers:[{level:2,title:"响应“Send”按钮",slug:"响应-send-按钮",children:[]},{level:2,title:"构建一个 intent",slug:"构建一个-intent",children:[]},{level:2,title:"创建第二个 activity",slug:"创建第二个-activity",children:[]},{level:2,title:"添加文本视图",slug:"添加文本视图",children:[]},{level:2,title:"显示消息",slug:"显示消息",children:[]},{level:2,title:"添加向上导航功能",slug:"添加向上导航功能",children:[]},{level:2,title:"运行应用",slug:"运行应用",children:[]}],git:{createdTime:1648829153e3,updatedTime:1648829153e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:6.17,words:1851},filePathRelative:"code/Android/get-started/activity.md"}}}]);