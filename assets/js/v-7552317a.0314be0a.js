"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[63423],{63769:(e,n,s)=>{s.r(n),s.d(n,{default:()=>S});var r=s(34086);const a=(0,r.uE)('<p>我们从一个简单的例子开始。</p><p>将以下代码复制到 <code>hello.ts</code> 中:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sayHello(person: string) {\n  return &quot;Hello, &quot; + person;\n}\n\nlet user = &quot;Tom&quot;;\nconsole.log(sayHello(user));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后执行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tsc hello.ts\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这时候会生成一个编译好的文件 <code>hello.js</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function sayHello(person) {\n  return &quot;Hello, &quot; + person;\n}\nvar user = &quot;Tom&quot;;\nconsole.log(sayHello(user));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>TypeScript 中，使用 <code>:</code> 指定变量的类型，<code>:</code> 的前后有没有空格都可以。</p><p>上述例子中，我们用 <code>:</code> 指定 <code>person</code> 参数类型为 <code>string</code>。但是编译为 js 之后，并没有什么检查的代码被插入进来。</p><p><strong>TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。</strong></p>',10),t=(0,r._)("code",null,"let",-1),l=(0,r.Uk)(" 是 ES6 中的关键字，和 "),o=(0,r._)("code",null,"var",-1),p=(0,r.Uk)(" 类似，用于定义一个局部变量，可以参阅 "),c={href:"http://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},i=(0,r.Uk)("let 和 const 命令"),u=(0,r.Uk)("。"),d=(0,r.uE)('<p>下面尝试把这段代码编译一下:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function sayHello(person: string) {\n  return &quot;Hello, &quot; + person;\n}\n\nlet user = [0, 1, 2];\nconsole.log(sayHello(user));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>编辑器中会提示错误，编译的时候也会出错:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>index.ts(6,22): error TS2345: Argument of type &#39;number[]&#39; is not assignable to parameter of type &#39;string&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是还是生成了 js 文件:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function sayHello(person) {\n  return &quot;Hello, &quot; + person;\n}\nvar user = [0, 1, 2];\nconsole.log(sayHello(user));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>TypeScript 编译的时候即使报错了，还是会生成编译结果</strong>，我们仍然可以使用这个编译之后的文件。</p>',7),m=(0,r.Uk)("如果要在报错的时候终止 js 文件的生成，可以在 "),b=(0,r._)("code",null,"tsconfig.json",-1),g=(0,r.Uk)(" 中配置 "),h=(0,r._)("code",null,"noEmitOnError",-1),y=(0,r.Uk)(" 即可。关于 "),v=(0,r._)("code",null,"tsconfig.json",-1),f=(0,r.Uk)("，请参阅"),k={href:"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html",target:"_blank",rel:"noopener noreferrer"},_=(0,r.Uk)("官方手册"),H=(0,r.Uk)("("),T={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html",target:"_blank",rel:"noopener noreferrer"},j=(0,r.Uk)("中文版"),q=(0,r.Uk)(")。"),U={},S=(0,s(82831).Z)(U,[["render",function(e,n){const s=(0,r.up)("ExternalLinkIcon");return(0,r.wg)(),(0,r.iD)(r.HY,null,[a,(0,r._)("blockquote",null,[(0,r._)("p",null,[t,l,o,p,(0,r._)("a",c,[i,(0,r.Wm)(s)]),u])]),d,(0,r._)("p",null,[m,b,g,h,y,v,f,(0,r._)("a",k,[_,(0,r.Wm)(s)]),H,(0,r._)("a",T,[j,(0,r.Wm)(s)]),q])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,r]of n)s[e]=r;return s}},77782:(e,n,s)=>{s.r(n),s.d(n,{data:()=>r});const r={key:"v-7552317a",path:"/code/language/typescript/intro/hello-typescript.html",title:"Hello TypeScript",lang:"zh-CN",frontmatter:{title:"Hello TypeScript",icon:"creative",category:["TypeScript"],tag:["快速上手"],summary:"我们从一个简单的例子开始。 将以下代码复制到 hello.ts 中: 然后执行 这时候会生成一个编译好的文件 hello.js: TypeScript 中，使用 : 指定变量的类型，: 的前后有没有空格都可以。 上述例子中，我们用 : 指定 person 参数类型为 string。但是编译为 js 之后，并没有什么检查的代码被插入进来。 TypeScript",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/intro/hello-typescript.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"Hello TypeScript"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"快速上手"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:"",headers:[],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:2}]},readingTime:{minutes:1.25,words:374},filePathRelative:"code/language/typescript/intro/hello-typescript.md"}}}]);