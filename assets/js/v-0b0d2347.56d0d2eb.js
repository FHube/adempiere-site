"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[35430],{83824:(e,n,s)=>{s.r(n),s.d(n,{default:()=>g});var a=s(34086);const r=(0,a.uE)('<h1 id="set-和-map-数据结构" tabindex="-1"><a class="header-anchor" href="#set-和-map-数据结构" aria-hidden="true">#</a> Set 和 Map 数据结构</h1><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用来生成 Set 数据结构。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const s = new Set();\n\n[2, 3, 5, 4, 5, 2, 2].forEach((x) =&gt; s.add(x));\n\nfor (let i of s) {\n  console.log(i);\n}\n// 2 3 5 4\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码通过 <code>add</code> 方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p><p>Set 函数可以接受一个数组(或者具有 iterable 接口的其他数据结构)作为参数，用来初始化。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set];\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size; // 5\n\n// 例三\nconst set = new Set(document.querySelectorAll(&quot;div&quot;));\nset.size; // 56\n\n// 类似于\nconst set = new Set();\ndocument.querySelectorAll(&quot;div&quot;).forEach((div) =&gt; set.add(div));\nset.size; // 56\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面代码中，例一和例二都是 <code>Set</code> 函数接受数组作为参数，例三是接受类似数组的对象作为参数。</p><p>上面代码也展示了一种去除数组重复成员的方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 去除数组的重复成员\n[...new Set(array)];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>向 Set 加入值的时候，不会发生类型转换，所以 <code>5</code> 和 <code>&quot;5&quot;</code> 是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符(<code>===</code>)，主要的区别是 <code>NaN</code> 等于自身，而精确相等运算符认为 <code>NaN</code> 不等于自身。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let set = new Set();\nlet a = NaN;\nlet b = NaN;\nset.add(a);\nset.add(b);\nset; // Set {NaN}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码向 Set 实例添加了两个 <code>NaN</code>，但是只能加入一个。这表明，在 Set 内部，两个 <code>NaN</code> 是相等。</p><p>另外，两个对象总是不相等的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let set = new Set();\n\nset.add({});\nset.size; // 1\n\nset.add({});\nset.size; // 2\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码表示，由于两个空对象不相等，所以它们被视为两个值。</p><h3 id="set-实例的属性和方法" tabindex="-1"><a class="header-anchor" href="#set-实例的属性和方法" aria-hidden="true">#</a> Set 实例的属性和方法</h3><p>Set 结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>: 构造函数，默认就是 <code>Set</code> 函数。</li><li><code>Set.prototype.size</code>: 返回 <code>Set</code> 实例的成员总数。</li></ul><p>Set 实例的方法分为两大类: 操作方法(用于操作数据)和遍历方法(用于遍历成员)。下面先介绍四个操作方法。</p><ul><li><code>add(value)</code>: 添加某个值，返回 Set 结构本身。</li><li><code>delete(value)</code>: 删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>: 返回一个布尔值，表示该值是否为 <code>Set</code> 的成员。</li><li><code>clear()</code>: 清除所有成员，没有返回值。</li></ul><p>上面这些属性和方法的实例如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>s.add(1).add(2).add(2);\n// 注意2被加入了两次\n\ns.size; // 2\n\ns.has(1); // true\ns.has(2); // true\ns.has(3); // false\n\ns.delete(2);\ns.has(2); // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>下面是一个对比，看看在判断是否包括一个键上面，<code>Object</code> 结构和 <code>Set</code> 结构的写法不同。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 对象的写法\nconst properties = {\n  width: 1,\n  height: 1,\n};\n\nif (properties[someName]) {\n  // do something\n}\n\n// Set的写法\nconst properties = new Set();\n\nproperties.add(&quot;width&quot;);\nproperties.add(&quot;height&quot;);\n\nif (properties.has(someName)) {\n  // do something\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>Array.from</code> 方法可以将 Set 结构转为数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const items = new Set([1, 2, 3, 4, 5]);\nconst array = Array.from(items);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这就提供了去除数组重复成员的另一种方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function dedupe(array) {\n  return Array.from(new Set(array));\n}\n\ndedupe([1, 1, 2, 3]); // [1, 2, 3]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="遍历操作" tabindex="-1"><a class="header-anchor" href="#遍历操作" aria-hidden="true">#</a> 遍历操作</h3><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p><ul><li><code>keys()</code>: 返回键名的遍历器</li><li><code>values()</code>: 返回键值的遍历器</li><li><code>entries()</code>: 返回键值对的遍历器</li><li><code>forEach()</code>: 使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，<code>Set</code> 的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><ol><li><p><code>keys()</code>，<code>values()</code>，<code>entries()</code></p><p><code>keys</code> 方法、<code>values</code> 方法、<code>entries</code> 方法返回的都是遍历器对象(详见《Iterator 对象》一章)。由于 Set 结构没有键名，只有键值(或者说键名和键值是同一个值)，所以 <code>keys</code> 方法和 <code>values</code> 方法的行为完全一致。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let set = new Set([&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// [&quot;red&quot;, &quot;red&quot;]\n// [&quot;green&quot;, &quot;green&quot;]\n// [&quot;blue&quot;, &quot;blue&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>上面代码中，<code>entries</code> 方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。</p><p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的 <code>values</code> 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Set.prototype[Symbol.iterator] === Set.prototype.values;\n// true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这意味着，可以省略 <code>values</code> 方法，直接用 <code>for...of</code> 循环遍历 Set。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let set = new Set([&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]);\n\nfor (let x of set) {\n  console.log(x);\n}\n// red\n// green\n// blue\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><code>forEach()</code></p><p>Set 结构的实例与数组一样，也拥有 <code>forEach</code> 方法，用于对每个成员执行某种操作，没有返回值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>set = new Set([1, 4, 9]);\nset.forEach((value, key) =&gt; console.log(key + &quot; : &quot; + value));\n// 1 : 1\n// 4 : 4\n// 9 : 9\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码说明，<code>forEach</code> 方法的参数就是一个处理函数。该函数的参数与数组的 <code>forEach</code> 一致，依次为键值、键名、集合本身(上例省略了该参数)。这里需要注意，Set 结构的键名就是键值(两者是同一个值)，因此第一个参数与第二个参数的值永远都是一样的。</p><p>另外，<code>forEach</code> 方法还可以有第二个参数，表示绑定处理函数内部的 <code>this</code> 对象。</p></li><li><p>遍历的应用</p><p>扩展运算符(<code>...</code>)内部使用 <code>for...of</code> 循环，所以也可以用于 Set 结构。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let set = new Set([&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]);\nlet arr = [...set];\n// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];\n// [3, 5, 2]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而且，数组的 <code>map</code> 和 <code>filter</code> 方法也可以间接用于 Set 了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let set = new Set([1, 2, 3]);\nset = new Set([...set].map((x) =&gt; x * 2));\n// 返回Set结构: {2, 4, 6}\n\nlet set = new Set([1, 2, 3, 4, 5]);\nset = new Set([...set].filter((x) =&gt; x % 2 == 0));\n// 返回Set结构: {2, 4}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因此使用 Set 可以很容易地实现并集(Union)、交集(Intersect)和差集(Difference)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let a = new Set([1, 2, 3]);\nlet b = new Set([4, 3, 2]);\n\n// 并集\nlet union = new Set([...a, ...b]);\n// Set {1, 2, 3, 4}\n\n// 交集\nlet intersect = new Set([...a].filter((x) =&gt; b.has(x)));\n// set {2, 3}\n\n// 差集\nlet difference = new Set([...a].filter((x) =&gt; !b.has(x)));\n// Set {1}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用 <code>Array.from</code> 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 方法一\nlet set = new Set([1, 2, 3]);\nset = new Set([...set].map((val) =&gt; val * 2));\n// set的值是2, 4, 6\n\n// 方法二\nlet set = new Set([1, 2, 3]);\nset = new Set(Array.from(set, (val) =&gt; val * 2));\n// set的值是2, 4, 6\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码提供了两种方法，直接在遍历操作中改变原来的 Set 结构。</p></li></ol><h2 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset" aria-hidden="true">#</a> WeakSet</h2><h3 id="含义" tabindex="-1"><a class="header-anchor" href="#含义" aria-hidden="true">#</a> 含义</h3><p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。</p><p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const ws = new WeakSet();\nws.add(1);\n// TypeError: Invalid value used in weak set\nws.add(Symbol());\n// TypeError: invalid value used in weak set\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码试图向 WeakSet 添加一个数值和 <code>Symbol</code> 值，结果报错，因为 WeakSet 只能放置对象。</p><p>其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><p>这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为 <code>0</code>，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。</p><p>由于上面这个特点，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。</p><p>这些特点同样适用于本章后面要介绍的 WeakMap 结构。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>WeakSet 是一个构造函数，可以使用 <code>new</code> 命令，创建 WeakSet 数据结构。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const ws = new WeakSet();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。(实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。)该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [\n  [1, 2],\n  [3, 4],\n];\nconst ws = new WeakSet(a);\n// WeakSet {[1, 2], [3, 4]}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>a</code> 是一个数组，它有两个成员，也都是数组。将 <code>a</code> 作为 WeakSet 构造函数的参数，<code>a</code> 的成员会自动成为 WeakSet 的成员。</p><p>注意，是 <code>a</code> 数组的成员成为 WeakSet 的成员，而不是 <code>a</code> 数组本身。这意味着，数组的成员只能是对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const b = [3, 4];\nconst ws = new WeakSet(b);\n// Uncaught TypeError: Invalid value used in weak set(…)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中，数组 <code>b</code> 的成员不是对象，加入 WeaKSet 就会报错。</p><p>WeakSet 结构有以下三个方法。</p><ul><li><strong>WeakSet.prototype.add(value)</strong>: 向 WeakSet 实例添加一个新成员。</li><li><strong>WeakSet.prototype.delete(value)</strong>: 清除 WeakSet 实例的指定成员。</li><li><strong>WeakSet.prototype.has(value)</strong>: 返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul><p>下面是一个例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const ws = new WeakSet();\nconst obj = {};\nconst foo = {};\n\nws.add(window);\nws.add(obj);\n\nws.has(window); // true\nws.has(foo); // false\n\nws.delete(window);\nws.has(window); // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>WeakSet 没有 <code>size</code> 属性，没有办法遍历它的成员。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ws.size; // undefined\nws.forEach; // undefined\n\nws.forEach(function (item) {\n  console.log(&quot;WeakSet has &quot; + item);\n});\n// TypeError: undefined is not a function\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码试图获取 <code>size</code> 和 <code>forEach</code> 属性，结果都不能成功。</p><p>WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。</p><p>下面是 WeakSet 的另一个例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const foos = new WeakSet();\nclass Foo {\n  constructor() {\n    foos.add(this);\n  }\n  method() {\n    if (!foos.has(this)) {\n      throw new TypeError(&quot;Foo.prototype.method 只能在Foo的实例上调用!&quot;);\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码保证了 <code>Foo</code> 的实例方法，只能在 <code>Foo</code> 的实例上调用。这里使用 WeakSet 的好处是，<code>foos</code> 对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑 <code>foos</code>，也不会出现内存泄漏。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><h3 id="含义和基本用法" tabindex="-1"><a class="header-anchor" href="#含义和基本用法" aria-hidden="true">#</a> 含义和基本用法</h3><p>JavaScript 的对象(Object)，本质上是键值对的集合(Hash 结构)，但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const data = {};\nconst element = document.getElementById(&quot;myDiv&quot;);\n\ndata[element] = &quot;metadata&quot;;\ndata[&quot;[object HTMLDivElement]&quot;]; // &quot;metadata&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码原意是将一个 DOM 节点作为对象 <code>data</code> 的键，但是由于对象只接受字符串作为键名，所以 <code>element</code> 被自动转为字符串 <code>[object HTMLDivElement]</code>。</p><p>为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值(包括对象)都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果您需要“键值对”的数据结构，Map 比 Object 更合适。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map();\nconst o = { p: &quot;Hello World&quot; };\n\nm.set(o, &quot;content&quot;);\nm.get(o); // &quot;content&quot;\n\nm.has(o); // true\nm.delete(o); // true\nm.has(o); // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码使用 Map 结构的 <code>set</code> 方法，将对象 <code>o</code> 当作 <code>m</code> 的一个键，然后又使用 <code>get</code> 方法读取这个键，接着使用 <code>delete</code> 方法删除了这个键。</p><p>上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map([\n  [&quot;name&quot;, &quot;张三&quot;],\n  [&quot;title&quot;, &quot;Author&quot;],\n]);\n\nmap.size; // 2\nmap.has(&quot;name&quot;); // true\nmap.get(&quot;name&quot;); // &quot;张三&quot;\nmap.has(&quot;title&quot;); // true\nmap.get(&quot;title&quot;); // &quot;Author&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码在新建 Map 实例时，就指定了两个键 <code>name</code> 和 <code>title</code>。</p><p><code>Map</code> 构造函数接受数组作为参数，实际上执行的是下面的算法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const items = [\n  [&quot;name&quot;, &quot;张三&quot;],\n  [&quot;title&quot;, &quot;Author&quot;],\n];\n\nconst map = new Map();\n\nitems.forEach(([key, value]) =&gt; map.set(key, value));\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构(详见《Iterator》一章)都可以当作 <code>Map</code> 构造函数的参数。这就是说，<code>Set</code> 和 <code>Map</code> 都可以用来生成新的 Map。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const set = new Set([\n  [&quot;foo&quot;, 1],\n  [&quot;bar&quot;, 2],\n]);\nconst m1 = new Map(set);\nm1.get(&quot;foo&quot;); // 1\n\nconst m2 = new Map([[&quot;baz&quot;, 3]]);\nconst m3 = new Map(m2);\nm3.get(&quot;baz&quot;); // 3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码中，我们分别使用 Set 对象和 Map 对象，当作 <code>Map</code> 构造函数的参数，结果都生成了新的 Map 对象。</p><p>如果对同一个键多次赋值，后面的值将覆盖前面的值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map();\n\nmap.set(1, &quot;aaa&quot;).set(1, &quot;bbb&quot;);\n\nmap.get(1); // &quot;bbb&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码对键 <code>1</code> 连续赋值两次，后一次的值覆盖前一次的值。</p><p>如果读取一个未知的键，则返回 <code>undefined</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>new Map().get(&quot;asfddfsasadf&quot;);\n// undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map();\n\nmap.set([&quot;a&quot;], 555);\nmap.get([&quot;a&quot;]); // undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码的 <code>set</code> 和 <code>get</code> 方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此 <code>get</code> 方法无法读取该键，返回 <code>undefined</code>。</p><p>同理，同样的值的两个实例，在 Map 结构中被视为两个键。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map();\n\nconst k1 = [&quot;a&quot;];\nconst k2 = [&quot;a&quot;];\n\nmap.set(k1, 111).set(k2, 222);\n\nmap.get(k1); // 111\nmap.get(k2); // 222\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，变量 <code>k1</code> 和 <code>k2</code> 的值是一样的，但是它们在 Map 结构中被视为两个键。</p><p>由上可知，Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞(clash)的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p><p>如果 Map 的键是一个简单类型的值(数字、字符串、布尔值)，则只要两个值严格相等，Map 将其视为一个键，比如 <code>0</code> 和 <code>-0</code> 就是一个键，布尔值 <code>true</code> 和字符串 <code>true</code> 则是两个不同的键。另外，<code>undefined</code> 和 <code>null</code> 也是两个不同的键。虽然 <code>NaN</code> 不严格相等于自身，但 Map 将其视为同一个键。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let map = new Map();\n\nmap.set(-0, 123);\nmap.get(+0); // 123\n\nmap.set(true, 1);\nmap.set(&quot;true&quot;, 2);\nmap.get(true); // 1\n\nmap.set(undefined, 3);\nmap.set(null, 4);\nmap.get(undefined); // 3\n\nmap.set(NaN, 123);\nmap.get(NaN); // 123\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="实例的属性和操作方法" tabindex="-1"><a class="header-anchor" href="#实例的属性和操作方法" aria-hidden="true">#</a> 实例的属性和操作方法</h3><p>Map 结构的实例有以下属性和操作方法。</p><ol><li><p><code>size</code> 属性</p><p><code>size</code> 属性返回 Map 结构的成员总数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map();\nmap.set(&quot;foo&quot;, true);\nmap.set(&quot;bar&quot;, false);\n\nmap.size; // 2\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><code>set(key, value)</code></p><p><code>set</code> 方法设置键名 <code>key</code> 对应的键值为 <code>value</code>，然后返回整个 Map 结构。如果 <code>key</code> 已经有值，则键值会被更新，否则就新生成该键。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map();\n\nm.set(&quot;edition&quot;, 6); // 键是字符串\nm.set(262, &quot;standard&quot;); // 键是数值\nm.set(undefined, &quot;nah&quot;); // 键是 undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>set</code> 方法返回的是当前的 <code>Map</code> 对象，因此可以采用链式写法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let map = new Map().set(1, &quot;a&quot;).set(2, &quot;b&quot;).set(3, &quot;c&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>get(key)</code></p><p><code>get</code> 方法读取 <code>key</code> 对应的键值，如果找不到 <code>key</code>，返回 <code>undefined</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map();\n\nconst hello = function () {\n  console.log(&quot;hello&quot;);\n};\nm.set(hello, &quot;Hello ES6!&quot;); // 键是函数\n\nm.get(hello); // Hello ES6!\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><code>has(key)</code></p><p><code>has</code> 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map();\n\nm.set(&quot;edition&quot;, 6);\nm.set(262, &quot;standard&quot;);\nm.set(undefined, &quot;nah&quot;);\n\nm.has(&quot;edition&quot;); // true\nm.has(&quot;years&quot;); // false\nm.has(262); // true\nm.has(undefined); // true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><code>delete(key)</code></p><p><code>delete</code> 方法删除某个键，返回 <code>true</code>。如果删除失败，返回 <code>false</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const m = new Map();\nm.set(undefined, &quot;nah&quot;);\nm.has(undefined); // true\n\nm.delete(undefined);\nm.has(undefined); // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><code>clear()</code></p><p><code>clear</code> 方法清除所有成员，没有返回值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let map = new Map();\nmap.set(&quot;foo&quot;, true);\nmap.set(&quot;bar&quot;, false);\n\nmap.size; // 2\nmap.clear();\nmap.size; // 0\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h3 id="遍历方法" tabindex="-1"><a class="header-anchor" href="#遍历方法" aria-hidden="true">#</a> 遍历方法</h3><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p><ul><li><code>keys()</code>: 返回键名的遍历器。</li><li><code>values()</code>: 返回键值的遍历器。</li><li><code>entries()</code>: 返回所有成员的遍历器。</li><li><code>forEach()</code>: 遍历 Map 的所有成员。</li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map([\n  [&quot;F&quot;, &quot;no&quot;],\n  [&quot;T&quot;, &quot;yes&quot;],\n]);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// &quot;F&quot;\n// &quot;T&quot;\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// &quot;no&quot;\n// &quot;yes&quot;\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// &quot;F&quot; &quot;no&quot;\n// &quot;T&quot; &quot;yes&quot;\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// &quot;F&quot; &quot;no&quot;\n// &quot;T&quot; &quot;yes&quot;\n\n// 等同于使用map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value);\n}\n// &quot;F&quot; &quot;no&quot;\n// &quot;T&quot; &quot;yes&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>上面代码最后的那个例子，表示 Map 结构的默认遍历器接口(<code>Symbol.iterator</code> 属性)，就是 <code>entries</code> 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>map[Symbol.iterator] === map.entries;\n// true\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Map 结构转为数组结构，比较快速的方法是使用扩展运算符(<code>...</code>)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new Map([\n  [1, &#39;one&#39;],\n  [2, &#39;two&#39;],\n  [3, &#39;three&#39;],\n]);\n\n[...map.keys()]\n// [1, 2, 3]\n\n[...map.values()]\n// [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]\n\n[...map.entries()]\n// [[1,&#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;]]\n\n[...map]\n// [[1,&#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;]]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>结合数组的 <code>map</code> 方法、<code>filter</code> 方法，可以实现 Map 的遍历和过滤(Map 本身没有 <code>map</code> 和 <code>filter</code> 方法)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map0 = new Map().set(1, &quot;a&quot;).set(2, &quot;b&quot;).set(3, &quot;c&quot;);\n\nconst map1 = new Map([...map0].filter(([k, v]) =&gt; k &lt; 3));\n// 产生 Map 结构 {1 =&gt; &#39;a&#39;, 2 =&gt; &#39;b&#39;}\n\nconst map2 = new Map([...map0].map(([k, v]) =&gt; [k * 2, &quot;_&quot; + v]));\n// 产生 Map 结构 {2 =&gt; &#39;_a&#39;, 4 =&gt; &#39;_b&#39;, 6 =&gt; &#39;_c&#39;}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此外，Map 还有一个 <code>forEach</code> 方法，与数组的 <code>forEach</code> 方法类似，也可以实现遍历。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>map.forEach(function (value, key, map) {\n  console.log(&quot;Key: %s, Value: %s&quot;, key, value);\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>forEach</code> 方法还可以接受第二个参数，用来绑定 <code>this</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const reporter = {\n  report: function (key, value) {\n    console.log(&quot;Key: %s, Value: %s&quot;, key, value);\n  },\n};\n\nmap.forEach(function (value, key, map) {\n  this.report(key, value);\n}, reporter);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，<code>forEach</code> 方法的回调函数的 <code>this</code>，就指向 <code>reporter</code>。</p><h3 id="与其他数据结构的互相转换" tabindex="-1"><a class="header-anchor" href="#与其他数据结构的互相转换" aria-hidden="true">#</a> 与其他数据结构的互相转换</h3><ol><li><p>Map 转为数组</p><p>前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符(<code>...</code>)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const myMap = new Map().set(true, 7).set({ foo: 3 }, [&quot;abc&quot;]);\n[...myMap];\n// [ [ true, 7 ], [ { foo: 3 }, [ &#39;abc&#39; ] ] ]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>数组 转为 Map</p><p>将数组传入 Map 构造函数，就可以转为 Map。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>new Map([\n  [true, 7],\n  [{ foo: 3 }, [&quot;abc&quot;]],\n]);\n// Map {\n//   true =&gt; 7,\n//   Object {foo: 3} =&gt; [&#39;abc&#39;]\n// }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>Map 转为对象</p><p>如果所有 Map 的键都是字符串，它可以无损地转为对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function strMapToObj(strMap) {\n  let obj = Object.create(null);\n  for (let [k, v] of strMap) {\n    obj[k] = v;\n  }\n  return obj;\n}\n\nconst myMap = new Map().set(&quot;yes&quot;, true).set(&quot;no&quot;, false);\nstrMapToObj(myMap);\n// { yes: true, no: false }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p></li><li><p>对象转为 Map</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function objToStrMap(obj) {\n  let strMap = new Map();\n  for (let k of Object.keys(obj)) {\n    strMap.set(k, obj[k]);\n  }\n  return strMap;\n}\n\nobjToStrMap({ yes: true, no: false });\n// Map {&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>Map 转为 JSON</p><p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function strMapToJson(strMap) {\n  return JSON.stringify(strMapToObj(strMap));\n}\n\nlet myMap = new Map().set(&quot;yes&quot;, true).set(&quot;no&quot;, false);\nstrMapToJson(myMap);\n// &#39;{&quot;yes&quot;:true,&quot;no&quot;:false}&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function mapToArrayJson(map) {\n  return JSON.stringify([...map]);\n}\n\nlet myMap = new Map().set(true, 7).set({ foo: 3 }, [&quot;abc&quot;]);\nmapToArrayJson(myMap);\n// &#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>JSON 转为 Map</p><p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function jsonToStrMap(jsonStr) {\n  return objToStrMap(JSON.parse(jsonStr));\n}\n\njsonToStrMap(&#39;{&quot;yes&quot;: true, &quot;no&quot;: false}&#39;);\n// Map {&#39;yes&#39; =&gt; true, &#39;no&#39; =&gt; false}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function jsonToMap(jsonStr) {\n  return new Map(JSON.parse(jsonStr));\n}\n\njsonToMap(&#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;);\n// Map {true =&gt; 7, Object {foo: 3} =&gt; [&#39;abc&#39;]}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap" aria-hidden="true">#</a> WeakMap</h2><h3 id="weakmap-含义" tabindex="-1"><a class="header-anchor" href="#weakmap-含义" aria-hidden="true">#</a> WeakMap 含义</h3><p><code>WeakMap</code> 结构与 <code>Map</code> 结构类似，也是用于生成键值对的集合。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// WeakMap 可以使用 set 方法添加成员\nconst wm1 = new WeakMap();\nconst key = { foo: 1 };\nwm1.set(key, 2);\nwm1.get(key); // 2\n\n// WeakMap 也可以接受一个数组，\n// 作为构造函数的参数\nconst k1 = [1, 2, 3];\nconst k2 = [4, 5, 6];\nconst wm2 = new WeakMap([\n  [k1, &quot;foo&quot;],\n  [k2, &quot;bar&quot;],\n]);\nwm2.get(k2); // &quot;bar&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>WeakMap</code> 与 <code>Map</code> 的区别有两点。</p><p>首先，<code>WeakMap</code> 只接受对象作为键名(<code>null</code> 除外)，不接受其他类型的值作为键名。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const map = new WeakMap();\nmap.set(1, 2);\n// TypeError: 1 is not an object!\nmap.set(Symbol(), 2);\n// TypeError: Invalid value used as weak map key\nmap.set(null, 2);\n// TypeError: Invalid value used as weak map key\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，如果将数值 <code>1</code> 和 <code>Symbol</code> 值作为 WeakMap 的键名，都会报错。</p><p>其次，<code>WeakMap</code> 的键名所指向的对象，不计入垃圾回收机制。</p><p><code>WeakMap</code> 的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。请看下面的例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const e1 = document.getElementById(&quot;foo&quot;);\nconst e2 = document.getElementById(&quot;bar&quot;);\nconst arr = [\n  [e1, &quot;foo 元素&quot;],\n  [e2, &quot;bar 元素&quot;],\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>e1</code> 和 <code>e2</code> 是两个对象，我们通过 <code>arr</code> 数组对这两个对象添加一些文字说明。这就形成了 <code>arr</code> 对 <code>e1</code> 和 <code>e2</code> 的引用。</p><p>一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放 <code>e1</code> 和 <code>e2</code> 占用的内存。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 不需要 e1 和 e2 的时候\n// 必须手动删除引用\narr[0] = null;\narr[1] = null;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。</p><p>WeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p><p>基本上，如果您要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用 <code>WeakMap</code> 结构。当该 DOM 元素被清除，其所对应的 <code>WeakMap</code> 记录就会自动被移除。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const wm = new WeakMap();\n\nconst element = document.getElementById(&quot;example&quot;);\n\nwm.set(element, &quot;some information&quot;);\nwm.get(element); // &quot;some information&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，先新建一个 Weakmap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对 <code>element</code> 的引用就是弱引用，不会被计入垃圾回收机制。</p><p>也就是说，上面的 DOM 节点对象的引用计数是 <code>1</code>，而不是 <code>2</code>。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。</p><p>总之，<code>WeakMap</code> 的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code> 结构有助于防止内存泄漏。</p><p>注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const wm = new WeakMap();\nlet key = {};\nlet obj = { foo: 1 };\n\nwm.set(key, obj);\nobj = null;\nwm.get(key);\n// Object {foo: 1}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，键值 <code>obj</code> 是正常引用。所以，即使在 WeakMap 外部消除了 <code>obj</code> 的引用，WeakMap 内部的引用依然存在。</p><h3 id="weakmap-的语法" tabindex="-1"><a class="header-anchor" href="#weakmap-的语法" aria-hidden="true">#</a> WeakMap 的语法</h3><p>WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作(即没有 <code>keys()</code>、<code>values()</code> 和 <code>entries()</code> 方法)，也没有 <code>size</code> 属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持 <code>clear</code> 方法。因此，<code>WeakMap</code> 只有四个方法可用: <code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const wm = new WeakMap();\n\n// size、forEach、clear 方法都不存在\nwm.size; // undefined\nwm.forEach; // undefined\nwm.clear; // undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="weakmap-的示例" tabindex="-1"><a class="header-anchor" href="#weakmap-的示例" aria-hidden="true">#</a> WeakMap 的示例</h3><p>WeakMap 的例子很难演示，因为无法观察它里面的引用会自动消失。此时，其他引用都解除了，已经没有引用指向 WeakMap 的键名了，导致无法证实那个键名是不是存在。</p>',146),l=(0,a.Uk)("贺师俊老师"),p={href:"https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292109104",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("提示"),i=(0,a.Uk)("，如果引用所指向的值占用特别多的内存，就可以通过 Node.js 的 "),t=(0,a._)("code",null,"process.memoryUsage",-1),u=(0,a.Uk)(" 方法看出来。根据这个思路，网友"),b={href:"https://github.com/ruanyf/es6tutorial/issues/362#issuecomment-292451925",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("vtxf"),d=(0,a.Uk)("补充了下面的例子。"),m=(0,a.uE)('<p>首先，打开 Node.js 命令行。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>node --expose-gc\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码中，<code>--expose-gc</code> 参数表示允许手动执行垃圾回收机制。</p><p>然后，执行下面的代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 手动执行一次垃圾回收，保证获取的内存使用状态准确\n&gt; global.gc();\nundefined\n\n// 查看内存占用的初始状态，heapUsed 为 4M 左右\n&gt; process.memoryUsage();\n{ rss: 21106688,\n  heapTotal: 7376896,\n  heapUsed: 4153936,\n  external: 9059 }\n\n&gt; let wm = new WeakMap();\nundefined\n\n// 新建一个变量 key，指向一个 5*1024*1024 的数组\n&gt; let key = new Array(5 * 1024 * 1024);\nundefined\n\n// 设置 WeakMap 实例的键名，也指向 key 数组\n// 这时，key 数组实际被引用了两次，\n// 变量 key 引用一次，WeakMap 的键名引用了第二次\n// 但是，WeakMap 是弱引用，对于引擎来说，引用计数还是1\n&gt; wm.set(key, 1);\nWeakMap {}\n\n&gt; global.gc();\nundefined\n\n// 这时内存占用 heapUsed 增加到 45M 了\n&gt; process.memoryUsage();\n{ rss: 67538944,\n  heapTotal: 7376896,\n  heapUsed: 45782816,\n  external: 8945 }\n\n// 清除变量 key 对数组的引用，\n// 但没有手动清除 WeakMap 实例的键名对数组的引用\n&gt; key = null;\nnull\n\n// 再次执行垃圾回收\n&gt; global.gc();\nundefined\n\n// 内存占用 heapUsed 变回 4M 左右，\n// 可以看到 WeakMap 的键名引用没有阻止 gc 对内存的回收\n&gt; process.memoryUsage();\n{ rss: 20639744,\n  heapTotal: 8425472,\n  heapUsed: 3979792,\n  external: 8956 }\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>上面代码中，只要外部的引用消失，WeakMap 内部的引用，就会自动被垃圾回收清除。由此可见，有了 WeakMap 的帮助，解决内存泄漏就会简单很多。</p><h3 id="weakmap-的用途" tabindex="-1"><a class="header-anchor" href="#weakmap-的用途" aria-hidden="true">#</a> WeakMap 的用途</h3><p>前文说过，WeakMap 应用的典型场合就是 DOM 节点作为键名。下面是一个例子。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let myElement = document.getElementById(&quot;logo&quot;);\nlet myWeakmap = new WeakMap();\n\nmyWeakmap.set(myElement, { timesClicked: 0 });\n\nmyElement.addEventListener(\n  &quot;click&quot;,\n  function () {\n    let logoData = myWeakmap.get(myElement);\n    logoData.timesClicked++;\n  },\n  false\n);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面代码中，<code>myElement</code> 是一个 DOM 节点，每当发生 <code>click</code> 事件，就更新一下状态。我们将这个状态作为键值放在 WeakMap 里，对应的键名就是 <code>myElement</code>。一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。</p><p>WeakMap 的另一个用处是部署私有属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const _counter = new WeakMap();\nconst _action = new WeakMap();\n\nclass Countdown {\n  constructor(counter, action) {\n    _counter.set(this, counter);\n    _action.set(this, action);\n  }\n  dec() {\n    let counter = _counter.get(this);\n    if (counter &lt; 1) return;\n    counter--;\n    _counter.set(this, counter);\n    if (counter === 0) {\n      _action.get(this)();\n    }\n  }\n}\n\nconst c = new Countdown(2, () =&gt; console.log(&quot;DONE&quot;));\n\nc.dec();\nc.dec();\n// DONE\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>上面代码中，<code>Countdown</code> 类的两个内部属性 <code>_counter</code> 和 <code>_action</code>，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。</p>',13),v={},g=(0,s(82831).Z)(v,[["render",function(e,n){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a._)("p",null,[l,(0,a._)("a",p,[c,(0,a.Wm)(s)]),i,t,u,(0,a._)("a",b,[o,(0,a.Wm)(s)]),d]),m],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}},70414:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-0b0d2347",path:"/code/language/js/es6/set-map.html",title:"Set 和 Map 数据结构",lang:"zh-CN",frontmatter:{icon:"set",author:"阮一峰",date:"2019-10-23T00:00:00.000Z",category:["JavaScript"],copyright:'此部分博客采用 <a href="http://creativecommons.org/licenses/by-nc/4.0/" rel="noopener noreferrer" target="_blank">“保持署名—非商用”创意共享4.0许可证</a>',summary:"Set 和 Map 数据结构 Set 基本用法 ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set 本身是一个构造函数，用来生成 Set 数据结构。 上面代码通过 add 方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。 Set 函数可以接受一个数组(或者具有 iterable 接口的其他数",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/es6/set-map.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"Set 和 Map 数据结构"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"阮一峰"}],["meta",{property:"article:published_time",content:"2019-10-23T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:"",headers:[{level:2,title:"Set",slug:"set",children:[{level:3,title:"基本用法",slug:"基本用法",children:[]},{level:3,title:"Set 实例的属性和方法",slug:"set-实例的属性和方法",children:[]},{level:3,title:"遍历操作",slug:"遍历操作",children:[]}]},{level:2,title:"WeakSet",slug:"weakset",children:[{level:3,title:"含义",slug:"含义",children:[]},{level:3,title:"语法",slug:"语法",children:[]}]},{level:2,title:"Map",slug:"map",children:[{level:3,title:"含义和基本用法",slug:"含义和基本用法",children:[]},{level:3,title:"实例的属性和操作方法",slug:"实例的属性和操作方法",children:[]},{level:3,title:"遍历方法",slug:"遍历方法",children:[]},{level:3,title:"与其他数据结构的互相转换",slug:"与其他数据结构的互相转换",children:[]}]},{level:2,title:"WeakMap",slug:"weakmap",children:[{level:3,title:"WeakMap 含义",slug:"weakmap-含义",children:[]},{level:3,title:"WeakMap 的语法",slug:"weakmap-的语法",children:[]},{level:3,title:"WeakMap 的示例",slug:"weakmap-的示例",children:[]},{level:3,title:"WeakMap 的用途",slug:"weakmap-的用途",children:[]}]}],git:{createdTime:1591204114e3,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:8}]},readingTime:{minutes:23.29,words:6986},filePathRelative:"code/language/js/es6/set-map.md"}}}]);