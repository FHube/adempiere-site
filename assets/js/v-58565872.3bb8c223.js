"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[60227],{66923:(e,a,n)=>{n.r(a),n.d(a,{default:()=>c});var s=n(34086);const r=(0,s._)("p",null,"数组(array)是一个包含多个值的变量。成员的编号从 0 开始，数量没有上限，也没有要求成员被连续索引。",-1),i=(0,s.uE)('<h2 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组" aria-hidden="true">#</a> 创建数组</h2><p>数组可以采用逐个赋值的方法创建。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ARRAY[INDEX]=value\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面语法中，<code>ARRAY</code> 是数组的名字，可以是任意合法的变量名。<code>INDEX</code> 是一个大于或等于零的整数，也可以是算术表达式。注意数组第一个元素的下标是 0， 而不是 1。</p><p>下面创建一个三个成员的数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>array[0]=val\narray[1]=val\narray[2]=val\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>数组也可以采用一次性赋值的方式创建。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ARRAY=(value1 value2 ... valueN)\n\n# 等同于\n\nARRAY=(\n  value1\n  value2\n  value3\n)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>采用上面方式创建数组时，可以按照默认顺序赋值，也可以在每个值前面指定位置。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>array=(a b c)\narray=([2]=c [0]=a [1]=b)\n\ndays=(Sun Mon Tue Wed Thu Fri Sat)\ndays=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>只为某些值指定位置，也是可以的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>names=(hatter [5]=duchess alice)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面例子中，<code>hatter</code> 是数组的 0 号位置，<code>duchess</code> 是 5 号位置，<code>alice</code> 是 6 号位置。</p><p>没有赋值的数组元素的默认值是空字符串。</p><p>定义数组的时候，可以使用通配符。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mp3s=( *.mp3 )\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面例子中，将当前目录的所有 MP3 文件，放进一个数组。</p><p>先用 <code>declare -a</code> 命令声明一个数组，也是可以的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>declare -a ARRAYNAME\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>read -a</code> 命令则是将用户的命令行输入，读入一个数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>read -a dice\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面命令将用户的命令行输入，读入数组 <code>dice</code>。</p><h2 id="读取数组" tabindex="-1"><a class="header-anchor" href="#读取数组" aria-hidden="true">#</a> 读取数组</h2><h3 id="读取单个元素" tabindex="-1"><a class="header-anchor" href="#读取单个元素" aria-hidden="true">#</a> 读取单个元素</h3><p>读取数组指定位置的成员，要使用下面的语法。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>echo ${array[i]}     # i 是索引\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面语法里面的大括号是必不可少的，否则 Bash 会把索引部分 <code>[i]</code> 按照原样输出。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ array[0]=a\n\n$ echo ${array[0]}\na\n\n$ echo $array[0]\na[0]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面例子中，数组的第一个元素是 <code>a</code>。如果不加大括号，Bash 会直接读取 <code>$array</code> 首成员的值，然后将 <code>[0]</code> 按照原样输出。</p><h3 id="读取所有成员" tabindex="-1"><a class="header-anchor" href="#读取所有成员" aria-hidden="true">#</a> 读取所有成员</h3><p><code>@</code> 和 <code>*</code> 是数组的特殊索引，表示返回数组的所有成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ foo=(a b c d e f)\n$ echo ${foo[@]}\na b c d e f\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这两个特殊索引配合 <code>for</code> 循环，就可以用来遍历数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>for i in &quot;${names[@]}&quot;; do\n  echo $i\ndone\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>@</code> 和 <code>*</code> 放不放在双引号之中，是有差别的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ activities=( swimming &quot;water skiing&quot; canoeing &quot;white-water rafting&quot; surfing )\n$ for act in ${activities[@]}; \\\ndo \\\necho &quot;Activity: $act&quot;; \\\ndone\n\nActivity: swimming\nActivity: water\nActivity: skiing\nActivity: canoeing\nActivity: white-water\nActivity: rafting\nActivity: surfing\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面的例子中，数组 <code>activities</code> 实际包含 5 个元素，但是 <code>for...in</code> 循环直接遍历 <code>${activities[@]}</code>，会导致返回 7 个结果。为了避免这种情况，一般把 <code>${activities[@]}</code> 放在双引号之中。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ for act in &quot;${activities[@]}&quot;; \\\ndo \\\necho &quot;Activity: $act&quot;; \\\ndone\n\nActivity: swimming\nActivity: water skiing\nActivity: canoeing\nActivity: white-water rafting\nActivity: surfing\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面例子中，<code>${activities[@]}</code> 放在双引号之中，遍历就会返回正确的结果。</p><p><code>${activities[*]}</code> 不放在双引号之中，跟 <code>${activities[@]}</code> 不放在双引号之中是一样的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ for act in ${activities[*]}; \\\ndo \\\necho &quot;Activity: $act&quot;; \\\ndone\n\nActivity: swimming\nActivity: water\nActivity: skiing\nActivity: canoeing\nActivity: white-water\nActivity: rafting\nActivity: surfing\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>${activities[*]}</code> 放在双引号之中，所有元素就会变成单个字符串返回。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ for act in &quot;${activities[*]}&quot;; \\\ndo \\\necho &quot;Activity: $act&quot;; \\\ndone\n\nActivity: swimming water skiing canoeing white-water rafting surfing\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>所以，拷贝一个数组的最方便方法，就是写成下面这样。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>hobbies=( &quot;${activities[@]}&quot; )\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面例子中，数组 <code>activities</code> 被拷贝给了另一个数组 <code>hobbies</code>。</p><p>这种写法也可以用来为新数组添加成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>hobbies=( &quot;${activities[@]&quot; diving )\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面例子中，新数组 <code>hobbies</code> 在数组 <code>activities</code> 的所有成员之后，又添加了一个成员。</p><h3 id="默认位置" tabindex="-1"><a class="header-anchor" href="#默认位置" aria-hidden="true">#</a> 默认位置</h3><p>如果读取数组成员时，没有读取指定哪一个位置的成员，默认使用 <code>0</code> 号位置。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ declare -a foo\n$ foo=A\n$ echo ${foo[0]}\nA\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面例子中，<code>foo</code> 是一个数组，赋值的时候不指定位置，实际上是给 <code>foo[0]</code> 赋值。</p><p>引用一个不带下标的数组变量，则引用的是 <code>0</code> 号位置的数组元素。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ foo=(a b c d e f)\n$ echo ${foo}\na\n$ echo $foo\na\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面例子中，引用数组元素的时候，没有指定位置，结果返回的是 <code>0</code> 号位置。</p><h2 id="数组的长度" tabindex="-1"><a class="header-anchor" href="#数组的长度" aria-hidden="true">#</a> 数组的长度</h2><p>要想知道数组的长度(即一共包含多少成员)，可以使用下面两种语法。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>${#array[*]}\n${#array[@]}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下面是一个例子。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ a[100]=foo\n\n$ echo ${#a[*]}\n1\n\n$ echo ${#a[@]}\n1\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面例子中，把字符串赋值给 <code>100</code> 位置的数组元素，这时的数组只有一个元素。</p><p>注意，如果用这种语法去读取具体的数组成员，就会返回该成员的字符串长度。这一点必须小心。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ a[100]=foo\n$ echo ${#a[100]}\n3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面例子中，<code>${#a[100]}</code> 实际上是返回数组第 100 号成员 <code>a[100]</code> 的值(<code>foo</code>)的字符串长度。</p><h2 id="提取数组序号" tabindex="-1"><a class="header-anchor" href="#提取数组序号" aria-hidden="true">#</a> 提取数组序号</h2><p><code>${!array[@]}</code> 或 <code>${!array[*]}</code>，可以返回数组的成员序号，即哪些位置是有值的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ arr=([5]=a [9]=b [23]=c)\n$ echo ${!arr[@]}\n5 9 23\n$ echo ${!arr[*]}\n5 9 23\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面例子中，数组的 5、9、23 号位置有值。</p><p>利用这个语法，也可以通过 <code>for</code> 循环遍历数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>arr=(a b c d)\n\nfor i in ${!arr[@]};do\n  echo ${arr[i]}\ndone\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="提取数组成员" tabindex="-1"><a class="header-anchor" href="#提取数组成员" aria-hidden="true">#</a> 提取数组成员</h2><p><code>${array[@]:position:length}</code> 的语法可以提取数组成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ food=( apples bananas cucumbers dates eggs fajitas grapes )\n$ echo ${food[@]:1:1}\nbananas\n$ echo ${food[@]:1:3}\nbananas cucumbers dates\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面例子中，<code>${food[@]:1:1}</code> 返回从数组 1 号位置开始的 1 个成员，<code>${food[@]:1:3}</code> 返回从 1 号位置开始的 3 个成员。</p><p>如果省略长度参数 <code>length</code>，则返回从指定位置开始的所有成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ echo ${food[@]:4}\neggs fajitas grapes\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面例子返回从 4 号位置开始到结束的所有成员。</p><h2 id="追加数组成员" tabindex="-1"><a class="header-anchor" href="#追加数组成员" aria-hidden="true">#</a> 追加数组成员</h2><p>数组末尾追加成员，可以使用 <code>+=</code> 赋值运算符。它能够自动地把值追加到数组末尾。否则，就需要知道数组的最大序号，比较麻烦。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ foo=(a b c)\n$ echo ${foo[@]}\na b c\n\n$ foo+=(d e f)\n$ echo ${foo[@]}\na b c d e f\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="删除数组" tabindex="-1"><a class="header-anchor" href="#删除数组" aria-hidden="true">#</a> 删除数组</h2><p>删除一个数组成员，使用 <code>unset</code> 命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ foo=(a b c d e f)\n$ echo ${foo[@]}\na b c d e f\n\n$ unset foo[2]\n$ echo ${foo[@]}\na b d e f\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面例子中，删除了数组中的第三个元素，下标为 2。</p><p>删除成员也可以将这个成员设为空值。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ foo=(a b c d e f)\n$ foo[1]=&#39;&#39;\n$ echo ${foo[@]}\na c d e f\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面例子中，将数组的第二个成员设为空字符串，就删除了这个成员。</p><p>由于空值就是空字符串，所以下面这样写也可以，但是不建议这种写法。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>foo[1]=\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的写法也相当于删除了数组的第二个成员。</p><p>直接将数组变量赋值为空字符串，相当于删除数组的第一个成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ foo=(a b c d e f)\n$ foo=&#39;&#39;\n$ echo ${foo[@]}\nb c d e f\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的写法相当于删除了数组的第一个成员。</p><p><code>unset ArrayName</code> 可以清空整个数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ unset ARRAY\n\n$ echo ${ARRAY[*]}\n&lt;--no output--&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="关联数组" tabindex="-1"><a class="header-anchor" href="#关联数组" aria-hidden="true">#</a> 关联数组</h2><p>Bash 的新版本支持关联数组。关联数组使用字符串而不是整数作为数组索引。</p><p><code>declare -A</code> 可以声明关联数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>declare -A colors\ncolors[&quot;red&quot;]=&quot;#ff0000&quot;\ncolors[&quot;green&quot;]=&quot;#00ff00&quot;\ncolors[&quot;blue&quot;]=&quot;#0000ff&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>整数索引的数组，可以直接使用变量名创建数组，关联数组则必须用带有 <code>-A</code> 选项的 <code>declare</code> 命令声明创建。</p><p>访问关联数组成员的方式，几乎与整数索引数组相同。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>echo ${colors[&quot;blue&quot;]}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>',103),l={},c=(0,n(82831).Z)(l,[["render",function(e,a){return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,(0,s.kq)(" more "),i],64)}]])},82831:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}},33110:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-58565872",path:"/linux/bash/array.html",title:"数组",lang:"zh-CN",frontmatter:{title:"数组",icon:"array",author:"阮一峰",category:["Linux"],tag:["Bash"],copyright:'本教程采用<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.zh" rel="noopener noreferrer" target="_blank">知识共享 署名-相同方式共享 3.0协议</a>',summary:"数组(array)是一个包含多个值的变量。成员的编号从 0 开始，数量没有上限，也没有要求成员被连续索引。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/linux/bash/array.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"数组"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"阮一峰"}],["meta",{property:"article:tag",content:"Bash"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:"<p>数组(array)是一个包含多个值的变量。成员的编号从 0 开始，数量没有上限，也没有要求成员被连续索引。</p>\n",headers:[{level:2,title:"创建数组",slug:"创建数组",children:[]},{level:2,title:"读取数组",slug:"读取数组",children:[{level:3,title:"读取单个元素",slug:"读取单个元素",children:[]},{level:3,title:"读取所有成员",slug:"读取所有成员",children:[]},{level:3,title:"默认位置",slug:"默认位置",children:[]}]},{level:2,title:"数组的长度",slug:"数组的长度",children:[]},{level:2,title:"提取数组序号",slug:"提取数组序号",children:[]},{level:2,title:"提取数组成员",slug:"提取数组成员",children:[]},{level:2,title:"追加数组成员",slug:"追加数组成员",children:[]},{level:2,title:"删除数组",slug:"删除数组",children:[]},{level:2,title:"关联数组",slug:"关联数组",children:[]}],git:{createdTime:1591204114e3,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:5}]},readingTime:{minutes:6.49,words:1946},filePathRelative:"linux/bash/array.md"}}}]);