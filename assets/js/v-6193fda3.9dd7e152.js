"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[38087],{55344:(e,n,s)=>{s.r(n),s.d(n,{default:()=>al});var a=s(34086);const r=(0,a.uE)('<p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p><h2 id="什么是声明语句" tabindex="-1"><a class="header-anchor" href="#什么是声明语句" aria-hidden="true">#</a> 什么是声明语句</h2><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 HTML 中通过 <code>&lt;script&gt;</code> 标签引入 jQuery，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。</p><p>我们通常这样获取一个 <code>id</code> 是 <code>foo</code> 的元素:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$(&quot;#foo&quot;);\n// or\njQuery(&quot;#foo&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',5),l=(0,a.Uk)("但是在 ts 中，编译器并不知道 "),c=(0,a._)("code",null,"$",-1),i=(0,a.Uk)(" 或 "),p=(0,a._)("code",null,"jQuery",-1),t=(0,a.Uk)(" 是什么东西"),o={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/01-jquery",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("1"),u=(0,a.Uk)(":"),b=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>jQuery(&quot;#foo&quot;);\n// ERROR: Cannot find name &#39;jQuery&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),m=(0,a.Uk)("这时，我们需要使用 "),g=(0,a._)("code",null,"declare var",-1),h=(0,a.Uk)(" 来定义它的类型"),f={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/02-declare-var",target:"_blank",rel:"noopener noreferrer"},y=(0,a.Uk)("2"),v=(0,a.Uk)(":"),x=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>declare var jQuery: (selector: string) =&gt; any;\n\njQuery(&quot;#foo&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上例中，<code>declare var</code> 并没有真的定义一个变量，只是定义了全局变量 <code>jQuery</code> 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>jQuery(&quot;#foo&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>除了 <code>declare var</code> 之外，还有其他很多种声明语句，将会在后面详细介绍。</p><h2 id="什么是声明文件" tabindex="-1"><a class="header-anchor" href="#什么是声明文件" aria-hidden="true">#</a> 什么是声明文件</h2>',5),k=(0,a.Uk)("通常我们会把声明语句放到一个单独的文件("),_=(0,a._)("code",null,"jQuery.d.ts",-1),q=(0,a.Uk)(")中，这就是声明文件"),U={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/03-jquery-d-ts",target:"_blank",rel:"noopener noreferrer"},j=(0,a.Uk)("3"),Q=(0,a.Uk)(":"),D=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare var jQuery: (selector: string) =&gt; any;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery(&quot;#foo&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>声明文件必需以 <code>.d.ts</code> 为后缀。</p><p>一般来说，ts 会解析项目中所有的 <code>*.ts</code> 文件，当然也包含以 <code>.d.ts</code> 结尾的文件。所以当我们将 <code>jQuery.d.ts</code> 放到项目中时，其他所有 <code>*.ts</code> 文件就都可以获得 <code>jQuery</code> 的类型定义了。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/path/to/project\n├── src\n|  ├── index.ts\n|  └── jQuery.d.ts\n└── tsconfig.json\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假如仍然无法解析，那么可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置，确保其包含了 <code>jQuery.d.ts</code> 文件。</p><p>这里只演示了全局变量这种模式的声明文件，假如是通过模块导入的方式使用第三方库的话，那么引入声明文件又是另一种方式了，将会在后面详细介绍。</p><h3 id="第三方声明文件" tabindex="-1"><a class="header-anchor" href="#第三方声明文件" aria-hidden="true">#</a> 第三方声明文件</h3>',8),E=(0,a.Uk)("当然，jQuery 的声明文件不需要我们定义了，社区已经帮我们定义好了: "),W={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jquery/index.d.ts",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("jQuery in DefinitelyTyped"),S=(0,a.Uk)("。"),w=(0,a._)("p",null,[(0,a.Uk)("我们可以直接下载下来使用，但是更推荐的是使用 "),(0,a._)("code",null,"@types"),(0,a.Uk)(" 统一管理第三方库的声明文件。")],-1),R=(0,a._)("p",null,[(0,a._)("code",null,"@types"),(0,a.Uk)(" 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例:")],-1),A=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,"npm install @types/jquery --save-dev\n")]),(0,a._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),M=(0,a.Uk)("可以在"),O={href:"https://microsoft.github.io/TypeSearch/",target:"_blank",rel:"noopener noreferrer"},z=(0,a.Uk)("这个页面"),C=(0,a.Uk)("搜索您需要的声明文件。"),H=(0,a.uE)('<h2 id="书写声明文件" tabindex="-1"><a class="header-anchor" href="#书写声明文件" aria-hidden="true">#</a> 书写声明文件</h2><p>当一个第三方库没有提供声明文件时，我们就需要自己书写声明文件了。前面只介绍了最简单的声明文件内容，而真正书写一个声明文件并不是一件简单的事，以下会详细介绍如何书写声明文件。</p><p>在不同的场景下，声明文件的内容和使用方式会有所区别。</p><p>库的使用场景主要有以下几种:</p><ul><li><a href="#quan-ju-bian-liang">全局变量</a>: 通过 <code>&lt;script&gt;</code> 标签引入第三方库，注入全局变量</li><li><a href="#npm-bao">npm 包</a>: 通过 <code>import foo from &#39;foo&#39;</code> 导入，符合 ES6 模块规范</li><li><a href="#umd-ku">UMD 库</a>: 既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入</li><li><a href="#zhi-jie-kuo-zhan-quan-ju-bian-liang">直接扩展全局变量</a>: 通过 <code>&lt;script&gt;</code> 标签引入后，改变一个全局变量的结构</li><li><a href="#zai-npm-bao-huo-umd-ku-zhong-kuo-zhan-quan-ju-bian-liang">在 npm 包或 UMD 库中扩展全局变量</a>: 引用 npm 包或 UMD 库后，改变一个全局变量的结构</li><li><a href="#mo-kuai-cha-jian">模块插件</a>: 通过 <code>&lt;script&gt;</code> 或 <code>import</code> 导入后，改变另一个模块的结构</li></ul><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h3><p>全局变量是最简单的一种场景，之前举的例子就是通过 <code>&lt;script&gt;</code> 标签引入 jQuery，注入全局变量 <code>$</code> 和 <code>jQuery</code>。</p><p>使用全局变量的声明文件时，如果是以 <code>npm install @types/xxx --save-dev</code> 安装的，则不需要任何配置。如果是将声明文件直接存放于当前项目中，则建议和其他源码一起放到 <code>src</code> 目录下(或者对应的源码目录下):</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>/path/to/project\n├── src\n| ├── index.ts\n| └── jQuery.d.ts\n└── tsconfig.json\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果没有生效，可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置，确保其包含了 <code>jQuery.d.ts</code> 文件。</p><p>全局变量的声明文件主要有以下几种语法:</p><ul><li><a href="#declare-var"><code>declare var</code></a> 声明全局变量</li><li><a href="#declare-function"><code>declare function</code></a> 声明全局方法</li><li><a href="#declare-class"><code>declare class</code></a> 声明全局类</li><li><a href="#declare-enum"><code>declare enum</code></a> 声明全局枚举类型</li><li><a href="#declare-namespace"><code>declare namespace</code></a> 声明(含有子属性的)全局对象</li><li><a href="#interface-he-type"><code>interface</code> 和 <code>type</code></a> 声明全局类型</li></ul><h4 id="declare-var" tabindex="-1"><a class="header-anchor" href="#declare-var" aria-hidden="true">#</a> <code>declare var</code></h4><p>在所有的声明语句中，<code>declare var</code> 是最简单的，如之前所学，它能够用来定义一个全局变量的类型。与其类似的，还有 <code>declare let</code> 和 <code>declare const</code>，使用 <code>let</code> 与使用 <code>var</code> 没有什么区别:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare let jQuery: (selector: string) =&gt; any;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery(&quot;#foo&quot;);\n// 使用 declare let 定义的 jQuery 类型，允许修改这个全局变量\njQuery = function (selector) {\n  return document.querySelector(selector);\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',16),L=(0,a.Uk)("而当我们使用 "),N=(0,a._)("code",null,"const",-1),J=(0,a.Uk)(" 定义时，表示此时的全局变量是一个常量，不允许再去修改它的值了"),P={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/04-declare-const-jquery",target:"_blank",rel:"noopener noreferrer"},$=(0,a.Uk)("4"),F=(0,a.Uk)(":"),Z=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare const jQuery: (selector: string) =&gt; any;\n\njQuery(&quot;#foo&quot;);\n// 使用 declare const 定义的 jQuery 类型，禁止修改这个全局变量\njQuery = function (selector) {\n  return document.querySelector(selector);\n};\n// ERROR: Cannot assign to &#39;jQuery&#39; because it is a constant or a read-only property.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>一般来说，全局变量都是禁止修改的常量，所以大部分情况都应该使用 <code>const</code> 而不是 <code>var</code> 或 <code>let</code>。</p>',2),K=(0,a.Uk)("需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现"),G={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/05-declare-jquery-value",target:"_blank",rel:"noopener noreferrer"},I=(0,a.Uk)("5"),Y=(0,a.Uk)(":"),B=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>declare const jQuery = function (selector) {\n  return document.querySelector(selector);\n};\n// ERROR: An implementation cannot be declared in ambient contexts.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="declare-function" tabindex="-1"><a class="header-anchor" href="#declare-function" aria-hidden="true">#</a> <code>declare function</code></h4><p><code>declare function</code> 用来定义全局函数的类型。jQuery 其实就是一个函数，所以也可以用 <code>function</code> 来定义:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare function jQuery(selector: string): any;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery(&quot;#foo&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',5),V=(0,a.Uk)("在函数类型的声明语句中，函数重载也是支持的"),X={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/06-declare-function",target:"_blank",rel:"noopener noreferrer"},ee=(0,a.Uk)("6"),ne=(0,a.Uk)(":"),se=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare function jQuery(selector: string): any;\ndeclare function jQuery(domReadyCallback: () =&gt; any): any;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery(&quot;#foo&quot;);\njQuery(function () {\n  alert(&quot;Dom Ready!&quot;);\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="declare-class" tabindex="-1"><a class="header-anchor" href="#declare-class" aria-hidden="true">#</a> <code>declare class</code></h4>',3),ae=(0,a.Uk)("当全局变量是一个类的时候，我们用 "),re=(0,a._)("code",null,"declare class",-1),le=(0,a.Uk)(" 来定义它的类型"),ce={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/07-declare-class",target:"_blank",rel:"noopener noreferrer"},ie=(0,a.Uk)("7"),pe=(0,a.Uk)(":"),te=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/Animal.d.ts\n\ndeclare class Animal {\n  name: string;\n  constructor(name: string);\n  sayHi(): string;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nlet cat = new Animal(&quot;Tom&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>同样的，<code>declare class</code> 语句也只能用来定义类型，不能用来定义具体的实现，比如定义 <code>sayHi</code> 方法的具体实现则会报错:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/Animal.d.ts\n\ndeclare class Animal {\n  name: string;\n  constructor(name: string);\n  sayHi() {\n    return `My name is ${this.name}`;\n  }\n  // ERROR: An implementation cannot be declared in ambient contexts.\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="declare-enum" tabindex="-1"><a class="header-anchor" href="#declare-enum" aria-hidden="true">#</a> <code>declare enum</code></h4>',5),oe=(0,a.Uk)("使用 "),de=(0,a._)("code",null,"declare enum",-1),ue=(0,a.Uk)(" 定义的枚举类型也称作外部枚举(Ambient Enums)，举例如下"),be={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/08-declare-enum",target:"_blank",rel:"noopener noreferrer"},me=(0,a.Uk)("8"),ge=(0,a.Uk)(":"),he=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/Directions.d.ts\n\ndeclare enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nlet directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>与其他全局变量的类型声明一致，<code>declare enum</code> 仅用来定义类型，而不是具体的值。</p><p><code>Directions.d.ts</code> 仅仅会用于编译时的检查，声明文件里的内容在编译结果中会被删除。它编译结果是:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中 <code>Directions</code> 是由第三方库定义好的全局变量。</p><h4 id="declare-namespace" tabindex="-1"><a class="header-anchor" href="#declare-namespace" aria-hidden="true">#</a> <code>declare namespace</code></h4><p><code>namespace</code> 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。</p><p>由于历史遗留原因，在早期还没有 ES6 的时候，ts 提供了一种模块化方案，使用 <code>module</code> 关键字表示内部模块。但由于后来 ES6 也使用了 <code>module</code> 关键字，ts 为了兼容 ES6，使用 <code>namespace</code> 替代了自己的 <code>module</code>，更名为命名空间。</p><p>随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 <code>namespace</code>，而推荐使用 ES6 的模块化方案了，故我们不再需要学习 <code>namespace</code> 的使用了。</p><p><code>namespace</code> 被淘汰了，但是在声明文件中，<code>declare namespace</code> 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。</p><p>比如 <code>jQuery</code> 是一个全局变量，它是一个对象，提供了一个 <code>jQuery.ajax</code> 方法可以调用，那么我们就应该使用 <code>declare namespace jQuery</code> 来声明这个拥有多个子属性的全局变量。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare namespace jQuery {\n  function ajax(url: string, settings?: any): void;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery.ajax(&quot;/api/get_something&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',14),fe=(0,a.Uk)("注意，在 "),ye=(0,a._)("code",null,"declare namespace",-1),ve=(0,a.Uk)(" 内部，我们直接使用 "),xe=(0,a._)("code",null,"function ajax",-1),ke=(0,a.Uk)(" 来声明函数，而不是使用 "),_e=(0,a._)("code",null,"declare function ajax",-1),qe=(0,a.Uk)("。类似的，也可以使用 "),Ue=(0,a._)("code",null,"const",-1),je=(0,a.Uk)(", "),Qe=(0,a._)("code",null,"class",-1),De=(0,a.Uk)(", "),Ee=(0,a._)("code",null,"enum",-1),We=(0,a.Uk)(" 等语句"),Te={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/09-declare-namespace",target:"_blank",rel:"noopener noreferrer"},Se=(0,a.Uk)("9"),we=(0,a.Uk)(":"),Re=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare namespace jQuery {\n  function ajax(url: string, settings?: any): void;\n  const version: number;\n  class Event {\n    blur(eventType: EventType): void;\n  }\n  enum EventType {\n    CustomClick,\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery.ajax(&quot;/api/get_something&quot;);\nconsole.log(jQuery.version);\nconst e = new jQuery.Event();\ne.blur(jQuery.EventType.CustomClick);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="嵌套的命名空间" tabindex="-1"><a class="header-anchor" href="#嵌套的命名空间" aria-hidden="true">#</a> 嵌套的命名空间</h5>',3),Ae=(0,a.Uk)("如果对象拥有深层的层级，则需要用嵌套的 "),Me=(0,a._)("code",null,"namespace",-1),Oe=(0,a.Uk)(" 来声明深层的属性的类型"),ze={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/10-declare-namespace-nesting",target:"_blank",rel:"noopener noreferrer"},Ce=(0,a.Uk)("10"),He=(0,a.Uk)(":"),Le=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare namespace jQuery {\n  function ajax(url: string, settings?: any): void;\n  namespace fn {\n    function extend(object: any): void;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery.ajax(&quot;/api/get_something&quot;);\njQuery.fn.extend({\n  check: function () {\n    return this.each(function () {\n      this.checked = true;\n    });\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',2),Ne=(0,a.Uk)("假如 "),Je=(0,a._)("code",null,"jQuery",-1),Pe=(0,a.Uk)(" 下仅有 "),$e=(0,a._)("code",null,"fn",-1),Fe=(0,a.Uk)(" 这一个属性(没有 "),Ze=(0,a._)("code",null,"ajax",-1),Ke=(0,a.Uk)(" 等其他属性或方法)，则可以不需要嵌套 "),Ge=(0,a._)("code",null,"namespace",-1),Ie={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/11-declare-namespace-dot",target:"_blank",rel:"noopener noreferrer"},Ye=(0,a.Uk)("11"),Be=(0,a.Uk)(":"),Ve=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare namespace jQuery.fn {\n  function extend(object: any): void;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery.fn.extend({\n  check: function () {\n    return this.each(function () {\n      this.checked = true;\n    });\n  },\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="interface-和-type" tabindex="-1"><a class="header-anchor" href="#interface-和-type" aria-hidden="true">#</a> <code>interface</code> 和 <code>type</code></h4>',3),Xe=(0,a.Uk)("除了全局变量之外，可能有一些类型我们也希望能暴露出来。在类型声明文件中，我们可以直接使用 "),en=(0,a._)("code",null,"interface",-1),nn=(0,a.Uk)(" 或 "),sn=(0,a._)("code",null,"type",-1),an=(0,a.Uk)(" 来声明一个全局的接口或类型"),rn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/12-interface",target:"_blank",rel:"noopener noreferrer"},ln=(0,a.Uk)("12"),cn=(0,a.Uk)(":"),pn=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ninterface AjaxSettings {\n  method?: &quot;GET&quot; | &quot;POST&quot;;\n  data?: any;\n}\ndeclare namespace jQuery {\n  function ajax(url: string, settings?: AjaxSettings): void;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样的话，在其他文件中也可以使用这个接口或类型了:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nlet settings: AjaxSettings = {\n  method: &quot;POST&quot;,\n  data: {\n    name: &quot;foo&quot;,\n  },\n};\njQuery.ajax(&quot;/api/post_something&quot;, settings);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>type</code> 与 <code>interface</code> 类似，不再赘述。</p><h5 id="防止命名冲突" tabindex="-1"><a class="header-anchor" href="#防止命名冲突" aria-hidden="true">#</a> 防止命名冲突</h5>',5),tn=(0,a.Uk)("暴露在最外层的 "),on=(0,a._)("code",null,"interface",-1),dn=(0,a.Uk)(" 或 "),un=(0,a._)("code",null,"type",-1),bn=(0,a.Uk)(" 会作为全局类型作用于整个项目中，我们应该尽可能的减少全局变量或全局类型的数量。故最好将他们放到 "),mn=(0,a._)("code",null,"namespace",-1),gn=(0,a.Uk)(" 下"),hn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/13-avoid-name-conflict",target:"_blank",rel:"noopener noreferrer"},fn=(0,a.Uk)("13"),yn=(0,a.Uk)(":"),vn=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare namespace jQuery {\n  interface AjaxSettings {\n    method?: &quot;GET&quot; | &quot;POST&quot;;\n    data?: any;\n  }\n  function ajax(url: string, settings?: AjaxSettings): void;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意，在使用这个 <code>interface</code> 的时候，也应该加上 <code>jQuery</code> 前缀:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nlet settings: jQuery.AjaxSettings = {\n  method: &quot;POST&quot;,\n  data: {\n    name: &quot;foo&quot;,\n  },\n};\njQuery.ajax(&quot;/api/post_something&quot;, settings);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="声明合并" tabindex="-1"><a class="header-anchor" href="#声明合并" aria-hidden="true">#</a> 声明合并</h4>',4),xn=(0,a.Uk)("假如 jQuery 既是一个函数，可以直接被调用 "),kn=(0,a._)("code",null,"jQuery('#foo')",-1),_n=(0,a.Uk)("，又是一个对象，拥有子属性 "),qn=(0,a._)("code",null,"jQuery.ajax()",-1),Un=(0,a.Uk)("(事实确实如此)，那么我们可以组合多个声明语句，它们会不冲突的合并起来"),jn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/14-declaration-merging",target:"_blank",rel:"noopener noreferrer"},Qn=(0,a.Uk)("14"),Dn=(0,a.Uk)(":"),En=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/jQuery.d.ts\n\ndeclare function jQuery(selector: string): any;\ndeclare namespace jQuery {\n  function ajax(url: string, settings?: any): void;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery(&quot;#foo&quot;);\njQuery.ajax(&quot;/api/get_something&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),Wn=(0,a.Uk)("关于声明合并的更多用法，可以查看"),Tn=(0,a.Uk)("声明合并"),Sn=(0,a.Uk)("章节。"),wn=(0,a.uE)('<h3 id="npm-包" tabindex="-1"><a class="header-anchor" href="#npm-包" aria-hidden="true">#</a> npm 包</h3><p>一般我们通过 <code>import foo from &#39;foo&#39;</code> 导入一个 npm 包，这是符合 ES6 模块规范的。</p><p>在我们尝试给一个 npm 包创建声明文件之前，需要先看看它的声明文件是否已经存在。一般来说，npm 包的声明文件可能存在于两个地方:</p><ol><li>与该 npm 包绑定在一起。判断依据是 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件。这种模式不需要额外安装其他包，是最为推荐的，所以以后我们自己创建 npm 包的时候，最好也将声明文件与 npm 包绑定在一起。</li><li>发布到 <code>@types</code> 里。我们只需要尝试安装一下对应的 <code>@types</code> 包就知道是否存在该声明文件，安装命令是 <code>npm install @types/foo --save-dev</code>。这种模式一般是由于 npm 包的维护者没有提供声明文件，所以只能由其他人将声明文件发布到 <code>@types</code> 里了。</li></ol><p>假如以上两种方式都没有找到对应的声明文件，那么我们就需要自己为它写声明文件了。由于是通过 <code>import</code> 语句导入的模块，所以声明文件存放的位置也有所约束，一般有两种方案:</p><ol><li>创建一个 <code>node_modules/@types/foo/index.d.ts</code> 文件，存放 <code>foo</code> 模块的声明文件。这种方式不需要额外的配置，但是 <code>node_modules</code> 目录不稳定，代码也没有被保存到仓库中，无法回溯版本，有不小心被删除的风险，故不太建议用这种方案，一般只用作临时测试。</li><li>创建一个 <code>types</code> 目录，专门用来管理自己写的声明文件，将 <code>foo</code> 的声明文件放到 <code>types/foo/index.d.ts</code> 中。这种方式需要配置下 <code>tsconfig.json</code> 中的 <code>paths</code> 和 <code>baseUrl</code> 字段。</li></ol><p>目录结构:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/path/to/project\n├── src\n| └── index.ts\n├── types\n| └── foo\n| └── index.d.ts\n└── tsconfig.json\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>tsconfig.json</code> 内容:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;compilerOptions&quot;: {\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;baseUrl&quot;: &quot;./&quot;,\n    &quot;paths&quot;: {\n      &quot;*&quot;: [&quot;types/*&quot;]\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如此配置之后，通过 <code>import</code> 导入 <code>foo</code> 的时候，也会去 <code>types</code> 目录下寻找对应的模块的声明文件了。</p><p>注意 <code>module</code> 配置可以有很多种选项，不同的选项会影响模块的导入导出模式。这里我们使用了 <code>commonjs</code> 这个最常用的选项，后面的教程也都默认使用的这个选项。</p><p>不管采用了以上两种方式中的哪一种，我都<strong>强烈建议</strong>大家将书写好的声明文件(通过给第三方库发 pull request，或者直接提交到 <code>@types</code> 里)发布到开源社区中，享受了这么多社区的优秀的资源，就应该在力所能及的时候给出一些回馈。只有所有人都参与进来，才能让 ts 社区更加繁荣。</p><p>npm 包的声明文件主要有以下几种语法:</p><ul><li><a href="#export"><code>export</code></a> 导出变量</li><li><a href="#export-namespace"><code>export namespace</code></a> 导出(含有子属性的)对象</li><li><a href="#export-default"><code>export default</code></a> ES6 默认导出</li><li><a href="#export-1"><code>export =</code></a> commonjs 导出模块</li></ul><h4 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> <code>export</code></h4><p>npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 <code>declare</code> 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</p>',17),Rn=(0,a._)("code",null,"export",-1),An=(0,a.Uk)(" 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现"),Mn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/15-export",target:"_blank",rel:"noopener noreferrer"},On=(0,a.Uk)("15"),zn=(0,a.Uk)(":"),Cn=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport const name: string;\nexport function getName(): string;\nexport class Animal {\n  constructor(name: string);\n  sayHi(): string;\n}\nexport enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\nexport interface Options {\n  data: any;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>对应的导入和使用模块应该是这样:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nimport { name, getName, Animal, Directions, Options } from &quot;foo&quot;;\n\nconsole.log(name);\nlet myName = getName();\nlet cat = new Animal(&quot;Tom&quot;);\nlet directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right,\n];\nlet options: Options = {\n  data: {\n    name: &quot;foo&quot;,\n  },\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="混用-declare-和-export" tabindex="-1"><a class="header-anchor" href="#混用-declare-和-export" aria-hidden="true">#</a> 混用 <code>declare</code> 和 <code>export</code></h5>',4),Hn=(0,a.Uk)("我们也可以使用 "),Ln=(0,a._)("code",null,"declare",-1),Nn=(0,a.Uk)(" 先声明多个变量，最后再用 "),Jn=(0,a._)("code",null,"export",-1),Pn=(0,a.Uk)(" 一次性导出。上例的声明文件可以等价的改写为"),$n={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/16-declare-and-export",target:"_blank",rel:"noopener noreferrer"},Fn=(0,a.Uk)("16"),Zn=(0,a.Uk)(":"),Kn=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\ndeclare const name: string;\ndeclare function getName(): string;\ndeclare class Animal {\n  constructor(name: string);\n  sayHi(): string;\n}\ndeclare enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\ninterface Options {\n  data: any;\n}\n\nexport { name, getName, Animal, Directions, Options };\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>注意，与全局变量的声明文件类似，<code>interface</code> 前是不需要 <code>declare</code> 的。</p><h4 id="export-namespace" tabindex="-1"><a class="header-anchor" href="#export-namespace" aria-hidden="true">#</a> <code>export namespace</code></h4>',3),Gn=(0,a.Uk)("与 "),In=(0,a._)("code",null,"declare namespace",-1),Yn=(0,a.Uk)(" 类似，"),Bn=(0,a._)("code",null,"export namespace",-1),Vn=(0,a.Uk)(" 用来导出一个拥有子属性的对象"),Xn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/17-export-namespace",target:"_blank",rel:"noopener noreferrer"},es=(0,a.Uk)("17"),ns=(0,a.Uk)(":"),ss=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport namespace foo {\n  const name: string;\n  namespace bar {\n    function baz(): string;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nimport { foo } from &quot;foo&quot;;\n\nconsole.log(foo.name);\nfoo.bar.baz();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="export-default" tabindex="-1"><a class="header-anchor" href="#export-default" aria-hidden="true">#</a> <code>export default</code></h4><p>在 ES6 模块系统中，使用 <code>export default</code> 可以导出一个默认值，使用方可以用 <code>import foo from &#39;foo&#39;</code> 而不是 <code>import { foo } from &#39;foo&#39;</code> 来导入这个默认值。</p>',4),as=(0,a.Uk)("在类型声明文件中，"),rs=(0,a._)("code",null,"export default",-1),ls=(0,a.Uk)(" 用来导出默认值的类型"),cs={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/18-export-default",target:"_blank",rel:"noopener noreferrer"},is=(0,a.Uk)("18"),ps=(0,a.Uk)(":"),ts=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport default function foo(): string;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nimport foo from &quot;foo&quot;;\n\nfoo();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),os=(0,a.Uk)("注意，只有 "),ds=(0,a._)("code",null,"function",-1),us=(0,a.Uk)("、"),bs=(0,a._)("code",null,"class",-1),ms=(0,a.Uk)(" 和 "),gs=(0,a._)("code",null,"interface",-1),hs=(0,a.Uk)(" 可以直接默认导出，其他的变量需要先定义出来，再默认导出"),fs={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/19-export-default-enum-error",target:"_blank",rel:"noopener noreferrer"},ys=(0,a.Uk)("19"),vs=(0,a.Uk)(":"),xs=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport default enum Directions {\n// ERROR: Expression expected.\n    Up,\n    Down,\n    Left,\n    Right\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上例中 <code>export default enum</code> 是错误的语法，需要使用 <code>declare enum</code> 定义出来，然后使用 <code>export default</code> 导出:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\ndeclare enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nexport default Directions;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',3),ks=(0,a.Uk)("针对这种默认导出，我们一般会将导出语句放在整个声明文件的最前面"),_s={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/20-export-default-enum",target:"_blank",rel:"noopener noreferrer"},qs=(0,a.Uk)("20"),Us=(0,a.Uk)(":"),js=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport default Directions;\n\ndeclare enum Directions {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="export-1" tabindex="-1"><a class="header-anchor" href="#export-1" aria-hidden="true">#</a> <code>export =</code></h4><p>在 commonjs 规范中，我们用以下方式来导出一个模块:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 整体导出\nmodule.exports = foo;\n// 单个导出\nexports.bar = bar;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是 <code>const ... = require</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 整体导入\nconst foo = require(&quot;foo&quot;);\n// 单个导入\nconst bar = require(&quot;foo&quot;).bar;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第二种方式是 <code>import ... from</code>，注意针对整体导出，需要使用 <code>import * as</code> 来导入:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// 整体导入\nimport * as foo from &quot;foo&quot;;\n// 单个导入\nimport { bar } from &quot;foo&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第三种方式是 <code>import ... require</code>，这也是 ts 官方推荐的方式:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// 整体导入\nimport foo = require(&quot;foo&quot;);\n// 单个导入\nimport bar = foo.bar;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',10),Qs=(0,a.Uk)("对于这种使用 commonjs 规范的库，假如要为它写类型声明文件的话，就需要使用到 "),Ds=(0,a._)("code",null,"export =",-1),Es=(0,a.Uk)(" 这种语法了"),Ws={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/21-export-equal",target:"_blank",rel:"noopener noreferrer"},Ts=(0,a.Uk)("21"),Ss=(0,a.Uk)(":"),ws=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport = foo;\n\ndeclare function foo(): string;\ndeclare namespace foo {\n  const bar: number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>需要注意的是，上例中使用了 <code>export =</code> 之后，就不能再单个导出 <code>export { bar }</code> 了。所以我们通过声明合并，使用 <code>declare namespace foo</code> 来将 <code>bar</code> 合并到 <code>foo</code> 里。</p>',2),Rs=(0,a.Uk)("准确地讲，"),As=(0,a._)("code",null,"export =",-1),Ms=(0,a.Uk)(" 不仅可以用在声明文件中，也可以用在普通的 ts 文件中。实际上，"),Os=(0,a._)("code",null,"import ... require",-1),zs=(0,a.Uk)(" 和 "),Cs=(0,a._)("code",null,"export =",-1),Hs=(0,a.Uk)(" 都是 ts 为了兼容 AMD 规范和 commonjs 规范而创立的新语法，由于并不常用也不推荐使用，所以这里就不详细介绍了，感兴趣的可以看"),Ls={href:"https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require",target:"_blank",rel:"noopener noreferrer"},Ns=(0,a.Uk)("官方文档"),Js=(0,a.Uk)("。"),Ps=(0,a.uE)('<p>由于很多第三方库是 commonjs 规范的，所以声明文件也就不得不用到 <code>export =</code> 这种语法了。但是还是需要再强调下，相比与 <code>export =</code>，我们更推荐使用 ES6 标准的 <code>export default</code> 和 <code>export</code>。</p><h3 id="umd-库" tabindex="-1"><a class="header-anchor" href="#umd-库" aria-hidden="true">#</a> UMD 库</h3><p>既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入的库，称为 UMD 库。相比于 npm 包的类型声明文件，我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法 <code>export as namespace</code>。</p><h4 id="export-as-namespace" tabindex="-1"><a class="header-anchor" href="#export-as-namespace" aria-hidden="true">#</a> <code>export as namespace</code></h4>',4),$s=(0,a.Uk)("一般使用 "),Fs=(0,a._)("code",null,"export as namespace",-1),Zs=(0,a.Uk)(" 时，都是先有了 npm 包的声明文件，再基于它添加一条 "),Ks=(0,a._)("code",null,"export as namespace",-1),Gs=(0,a.Uk)(" 语句，即可将声明好的一个变量声明为全局变量，举例如下"),Is={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/22-export-as-namespace",target:"_blank",rel:"noopener noreferrer"},Ys=(0,a.Uk)("22"),Bs=(0,a.Uk)(":"),Vs=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport as namespace foo;\nexport = foo;\n\ndeclare function foo(): string;\ndeclare namespace foo {\n  const bar: number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当然它也可以与 <code>export default</code> 一起使用:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\nexport as namespace foo;\nexport default foo;\n\ndeclare function foo(): string;\ndeclare namespace foo {\n  const bar: number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="直接扩展全局变量" tabindex="-1"><a class="header-anchor" href="#直接扩展全局变量" aria-hidden="true">#</a> 直接扩展全局变量</h3>',4),Xs=(0,a.Uk)("有的第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，就会导致 ts 编译错误，此时就需要扩展全局变量的类型。比如扩展 "),ea=(0,a._)("code",null,"String",-1),na=(0,a.Uk)(" 类型"),sa={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/23-merge-global-interface",target:"_blank",rel:"noopener noreferrer"},aa=(0,a.Uk)("23"),ra=(0,a.Uk)(":"),la=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface String {\n  prependHello(): string;\n}\n\n&quot;foo&quot;.prependHello();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过声明合并，使用 <code>interface String</code> 即可给 <code>String</code> 添加属性或方法。</p>',2),ca=(0,a.Uk)("也可以使用 "),ia=(0,a._)("code",null,"declare namespace",-1),pa=(0,a.Uk)(" 给已有的命名空间添加类型声明"),ta={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/24-merge-global-namespace",target:"_blank",rel:"noopener noreferrer"},oa=(0,a.Uk)("24"),da=(0,a.Uk)(":"),ua=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/jquery-plugin/index.d.ts\n\ndeclare namespace JQuery {\n  interface CustomOptions {\n    bar: string;\n  }\n}\n\ninterface JQueryStatic {\n  foo(options: JQuery.CustomOptions): string;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\njQuery.foo({\n  bar: &quot;&quot;,\n});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="在-npm-包或-umd-库中扩展全局变量" tabindex="-1"><a class="header-anchor" href="#在-npm-包或-umd-库中扩展全局变量" aria-hidden="true">#</a> 在 npm 包或 UMD 库中扩展全局变量</h3><p>如之前所说，对于一个 npm 包或者 UMD 库的声明文件，只有 <code>export</code> 导出的类型声明才能被导入。所以对于 npm 包或 UMD 库，如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 <code>declare global</code>。</p><h4 id="declare-global" tabindex="-1"><a class="header-anchor" href="#declare-global" aria-hidden="true">#</a> <code>declare global</code></h4>',5),ba=(0,a.Uk)("使用 "),ma=(0,a._)("code",null,"declare global",-1),ga=(0,a.Uk)(" 可以在 npm 包或者 UMD 库的声明文件中扩展全局变量的类型"),ha={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/25-declare-global",target:"_blank",rel:"noopener noreferrer"},fa=(0,a.Uk)("25"),ya=(0,a.Uk)(":"),va=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo/index.d.ts\n\ndeclare global {\n  interface String {\n    prependHello(): string;\n  }\n}\n\nexport {};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\n&quot;bar&quot;.prependHello();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。</p><h3 id="模块插件" tabindex="-1"><a class="header-anchor" href="#模块插件" aria-hidden="true">#</a> 模块插件</h3><p>有时通过 <code>import</code> 导入一个模块插件，可以改变另一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，就会导致类型不完整，缺少插件部分的类型。ts 提供了一个语法 <code>declare module</code>，它可以用来扩展原有模块的类型。</p><h4 id="declare-module" tabindex="-1"><a class="header-anchor" href="#declare-module" aria-hidden="true">#</a> <code>declare module</code></h4>',6),xa=(0,a.Uk)("如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用 "),ka=(0,a._)("code",null,"declare module",-1),_a=(0,a.Uk)(" 扩展原有模块"),qa={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/26-declare-module",target:"_blank",rel:"noopener noreferrer"},Ua=(0,a.Uk)("26"),ja=(0,a.Uk)(":"),Qa=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/moment-plugin/index.d.ts\n\nimport * as moment from &quot;moment&quot;;\n\ndeclare module &quot;moment&quot; {\n  export function foo(): moment.CalendarKey;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nimport * as moment from &quot;moment&quot;;\nimport &quot;moment-plugin&quot;;\n\nmoment.foo();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',2),Da=(0,a._)("code",null,"declare module",-1),Ea=(0,a.Uk)(" 也可用于在一个文件中一次性声明多个模块的类型"),Wa={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/27-multiple-declare-module",target:"_blank",rel:"noopener noreferrer"},Ta=(0,a.Uk)("27"),Sa=(0,a.Uk)(":"),wa=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/foo-bar.d.ts\n\ndeclare module &quot;foo&quot; {\n  export interface Foo {\n    foo: string;\n  }\n}\n\ndeclare module &quot;bar&quot; {\n  export function bar(): string;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nimport { Foo } from &quot;foo&quot;;\nimport * as bar from &quot;bar&quot;;\n\nlet f: Foo;\nbar.bar();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="声明文件中的依赖" tabindex="-1"><a class="header-anchor" href="#声明文件中的依赖" aria-hidden="true">#</a> 声明文件中的依赖</h3><p>一个声明文件有时会依赖另一个声明文件中的类型，比如在前面的 <code>declare module</code> 的例子中，我们就在声明文件中导入了 <code>moment</code>，并且使用了 <code>moment.CalendarKey</code> 这个类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/moment-plugin/index.d.ts\n\nimport * as moment from &quot;moment&quot;;\n\ndeclare module &quot;moment&quot; {\n  export function foo(): moment.CalendarKey;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>除了可以在声明文件中通过 <code>import</code> 导入另一个声明文件中的类型之外，还有一个语法也可以用来导入另一个声明文件，那就是三斜线指令。</p><h4 id="三斜线指令" tabindex="-1"><a class="header-anchor" href="#三斜线指令" aria-hidden="true">#</a> 三斜线指令</h4><p>与 <code>namespace</code> 类似，三斜线指令也是 ts 在早期版本中为了描述模块之间的依赖关系而创造的语法。随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的三斜线指令来声明模块之间的依赖关系了。</p><p>但是在声明文件中，它还是有一定的用武之地。</p><p>类似于声明文件中的 <code>import</code>，它可以用来导入另一个声明文件。与 <code>import</code> 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 <code>import</code>:</p><ul><li>当我们在<strong>书写</strong>一个全局变量的声明文件时</li><li>当我们需要<strong>依赖</strong>一个全局变量的声明文件时</li></ul><h5 id="书写一个全局变量的声明文件" tabindex="-1"><a class="header-anchor" href="#书写一个全局变量的声明文件" aria-hidden="true">#</a> <strong>书写</strong>一个全局变量的声明文件</h5>',12),Ra=(0,a.Uk)("这些场景听上去很拗口，但实际上很好理解——在全局变量的声明文件中，是不允许出现 "),Aa=(0,a._)("code",null,"import",-1),Ma=(0,a.Uk)(", "),Oa=(0,a._)("code",null,"export",-1),za=(0,a.Uk)(" 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了"),Ca={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/28-triple-slash-directives",target:"_blank",rel:"noopener noreferrer"},Ha=(0,a.Uk)("28"),La=(0,a.Uk)(":"),Na=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/jquery-plugin/index.d.ts\n\n/// &lt;reference types=&quot;jquery&quot; /&gt;\n\ndeclare function foo(options: JQuery.AjaxSettings): string;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nfoo({});\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>三斜线指令的语法如上，<code>///</code> 后面使用 xml 的格式添加了对 <code>jquery</code> 类型的依赖，这样就可以在声明文件中使用 <code>JQuery.AjaxSettings</code> 类型了。</p><p>注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。</p><h5 id="依赖一个全局变量的声明文件" tabindex="-1"><a class="header-anchor" href="#依赖一个全局变量的声明文件" aria-hidden="true">#</a> <strong>依赖</strong>一个全局变量的声明文件</h5>',5),Ja=(0,a.Uk)("在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 "),Pa=(0,a._)("code",null,"import",-1),$a=(0,a.Uk)(" 导入，当然也就必须使用三斜线指令来引入了"),Fa={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/29-triple-slash-directives-global",target:"_blank",rel:"noopener noreferrer"},Za=(0,a.Uk)("29"),Ka=(0,a.Uk)(":"),Ga=(0,a.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// types/node-plugin/index.d.ts\n\n/// &lt;reference types=&quot;node&quot; /&gt;\n\nexport function foo(p: NodeJS.Process): string;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nimport { foo } from &quot;node-plugin&quot;;\n\nfoo(global.process);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面的例子中，我们通过三斜线指引入了 <code>node</code> 的类型，然后在声明文件中使用了 <code>NodeJS.Process</code> 这个类型。最后在使用到 <code>foo</code> 的时候，传入了 <code>node</code> 中的全局变量 <code>process</code>。</p><p>由于引入的 <code>node</code> 中的类型都是全局变量的类型，它们是没有办法通过 <code>import</code> 来导入的，所以这种场景下也只能通过三斜线指令来引入了。</p><p>以上两种使用场景下，都是由于需要书写或需要依赖全局变量的声明文件，所以必须使用三斜线指令。在其他的一些不是必要使用三斜线指令的情况下，就都需要使用 <code>import</code> 来导入。</p><h5 id="拆分声明文件" tabindex="-1"><a class="header-anchor" href="#拆分声明文件" aria-hidden="true">#</a> 拆分声明文件</h5><p>当我们的全局变量的声明文件太大时，可以通过拆分为多个文件，然后在一个入口文件中将它们一一引入，来提高代码的可维护性。比如 <code>jQuery</code> 的声明文件就是这样的:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// node_modules/@types/jquery/index.d.ts\n\n/// &lt;reference types=&quot;sizzle&quot; /&gt;\n/// &lt;reference path=&quot;JQueryStatic.d.ts&quot; /&gt;\n/// &lt;reference path=&quot;JQuery.d.ts&quot; /&gt;\n/// &lt;reference path=&quot;misc.d.ts&quot; /&gt;\n/// &lt;reference path=&quot;legacy.d.ts&quot; /&gt;\n\nexport = jQuery;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中用到了 <code>types</code> 和 <code>path</code> 两种不同的指令。它们的区别是: <code>types</code> 用于声明对另一个库的依赖，而 <code>path</code> 用于声明对另一个文件的依赖。</p><p>上例中，<code>sizzle</code> 是与 <code>jquery</code> 平行的另一个库，所以需要使用 <code>types=&quot;sizzle&quot;</code> 来声明对它的依赖。而其他的三斜线指令就是将 <code>jquery</code> 的声明拆分到不同的文件中了，然后在这个入口文件中使用 <code>path=&quot;foo&quot;</code> 将它们一一引入。</p><h5 id="其他三斜线指令" tabindex="-1"><a class="header-anchor" href="#其他三斜线指令" aria-hidden="true">#</a> 其他三斜线指令</h5>',11),Ia=(0,a.Uk)("除了这两种三斜线指令之外，还有其他的三斜线指令，比如 "),Ya=(0,a._)("code",null,'/// <reference no-default-lib="true"/>',-1),Ba=(0,a.Uk)(", "),Va=(0,a._)("code",null,"/// <amd-module />",-1),Xa=(0,a.Uk)(" 等，但它们都是废弃的语法，故这里就不介绍了，详情可见"),er={href:"http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html",target:"_blank",rel:"noopener noreferrer"},nr=(0,a.Uk)("官网"),sr=(0,a.Uk)("。"),ar=(0,a.uE)('<h3 id="自动生成声明文件" tabindex="-1"><a class="header-anchor" href="#自动生成声明文件" aria-hidden="true">#</a> 自动生成声明文件</h3><p>如果库的源码本身就是由 ts 写的，那么在使用 <code>tsc</code> 脚本将 ts 编译为 js 的时候，添加 <code>declaration</code> 选项，就可以同时也生成 <code>.d.ts</code> 声明文件了。</p><p>我们可以在命令行中添加 <code>--declaration</code>(简写 <code>-d</code>)，或者在 <code>tsconfig.json</code> 中添加 <code>declaration</code> 选项。这里以 <code>tsconfig.json</code> 为例:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;compilerOptions&quot;: {\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;outDir&quot;: &quot;lib&quot;,\n    &quot;declaration&quot;: true\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上例中我们添加了 <code>outDir</code> 选项，将 ts 文件的编译结果输出到 <code>lib</code> 目录下，然后添加了 <code>declaration</code> 选项，设置为 <code>true</code>，表示将会由 ts 文件自动生成 <code>.d.ts</code> 声明文件，也会输出到 <code>lib</code> 目录下。</p>',5),rr=(0,a.Uk)("运行 "),lr=(0,a._)("code",null,"tsc",-1),cr=(0,a.Uk)(" 之后，目录结构如下"),ir={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/30-auto-d-ts",target:"_blank",rel:"noopener noreferrer"},pr=(0,a.Uk)("30"),tr=(0,a.Uk)(":"),or=(0,a.uE)('<div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>/path/to/project\n├── lib\n| ├── bar\n| | ├── index.d.ts\n| | └── index.js\n| ├── index.d.ts\n| └── index.js\n├── src\n| ├── bar\n| | └── index.ts\n| └── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，<code>src</code> 目录下有两个 ts 文件，分别是 <code>src/index.ts</code> 和 <code>src/bar/index.ts</code>，它们被编译到 <code>lib</code> 目录下的同时，也会生成对应的两个声明文件 <code>lib/index.d.ts</code> 和 <code>lib/bar/index.d.ts</code>。它们的内容分别是:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/index.ts\n\nexport * from &quot;./bar&quot;;\n\nexport default function foo() {\n  return &quot;foo&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// src/bar/index.ts\n\nexport function bar() {\n  return &quot;bar&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// lib/index.d.ts\n\nexport * from &quot;./bar&quot;;\nexport default function foo(): string;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// lib/bar/index.d.ts\n\nexport declare function bar(): string;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可见，自动生成的声明文件基本保持了源码的结构，而将具体实现去掉了，生成了对应的类型声明。</p><p>使用 <code>tsc</code> 自动生成声明文件时，每个 ts 文件都会对应一个 <code>.d.ts</code> 声明文件。这样的好处是，使用方不仅可以在使用 <code>import foo from &#39;foo&#39;</code> 导入默认的模块时获得类型提示，还可以在使用 <code>import bar from &#39;foo/lib/bar&#39;</code> 导入一个子模块时，也获得对应的类型提示。</p><p>除了 <code>declaration</code> 选项之外，还有几个选项也与自动生成声明文件有关，这里只简单列举出来，不做详细演示了:</p><ul><li><code>declarationDir</code> 设置生成 <code>.d.ts</code> 文件的目录</li><li><code>declarationMap</code> 对每个 <code>.d.ts</code> 文件，都生成对应的 <code>.d.ts.map</code>(sourcemap)文件</li><li><code>emitDeclarationOnly</code> 仅生成 <code>.d.ts</code> 文件，不生成 <code>.js</code> 文件</li></ul><h2 id="发布声明文件" tabindex="-1"><a class="header-anchor" href="#发布声明文件" aria-hidden="true">#</a> 发布声明文件</h2><p>当我们为一个库写好了声明文件之后，下一步就是将它发布出去了。</p><p>此时有两种方案:</p><ol><li>将声明文件和源码放在一起</li><li>将声明文件发布到 <code>@types</code> 下</li></ol><p>这两种方案中优先选择第一种方案。保持声明文件与源码在一起，使用时就不需要额外增加单独的声明文件库的依赖了，而且也能保证声明文件的版本与源码的版本保持一致。</p><p>仅当我们在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request 时，才需要使用第二种方案，将声明文件发布到 <code>@types</code> 下。</p><h3 id="将声明文件和源码放在一起" tabindex="-1"><a class="header-anchor" href="#将声明文件和源码放在一起" aria-hidden="true">#</a> 将声明文件和源码放在一起</h3><p>如果声明文件是通过 <code>tsc</code> 自动生成的，那么无需做任何其他配置，只需要把编译好的文件也发布到 npm 上，使用方就可以获取到类型提示了。</p><p>如果是手动写的声明文件，那么需要满足以下条件之一，才能被正确的识别:</p><ul><li>给 <code>package.json</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址</li><li>在项目根目录下，编写一个 <code>index.d.ts</code> 文件</li><li>针对入口文件(<code>package.json</code> 中的 <code>main</code> 字段指定的入口文件)，编写一个同名不同后缀的 <code>.d.ts</code> 文件</li></ul><p>第一种方式是给 <code>package.json</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址。比如:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;name&quot;: &quot;foo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;lib/index.js&quot;,\n  &quot;types&quot;: &quot;foo.d.ts&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>指定了 <code>types</code> 为 <code>foo.d.ts</code> 之后，导入此库的时候，就会去找 <code>foo.d.ts</code> 作为此库的类型声明文件了。</p><p><code>typings</code> 与 <code>types</code> 一样，只是另一种写法。</p><p>如果没有指定 <code>types</code> 或 <code>typings</code>，那么就会在根目录下寻找 <code>index.d.ts</code> 文件，将它视为此库的类型声明文件。</p><p>如果没有找到 <code>index.d.ts</code> 文件，那么就会寻找入口文件(<code>package.json</code> 中的 <code>main</code> 字段指定的入口文件)是否存在对应同名不同后缀的 <code>.d.ts</code> 文件。</p><p>比如 <code>package.json</code> 是这样时:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>{\n  &quot;name&quot;: &quot;foo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;lib/index.js&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>就会先识别 <code>package.json</code> 中是否存在 <code>types</code> 或 <code>typings</code> 字段。发现不存在，那么就会寻找是否存在 <code>index.d.ts</code> 文件。如果还是不存在，那么就会寻找是否存在 <code>lib/index.d.ts</code> 文件。假如说连 <code>lib/index.d.ts</code> 都不存在的话，就会被认为是一个没有提供类型声明文件的库了。</p><p>有的库为了支持导入子模块，比如 <code>import bar from &#39;foo/lib/bar&#39;</code>，就需要额外再编写一个类型声明文件 <code>lib/bar.d.ts</code> 或者 <code>lib/bar/index.d.ts</code>，这与自动生成声明文件类似，一个库中同时包含了多个类型声明文件。</p><h3 id="将声明文件发布到-types-下" tabindex="-1"><a class="header-anchor" href="#将声明文件发布到-types-下" aria-hidden="true">#</a> 将声明文件发布到 <code>@types</code> 下</h3><p>如果我们是在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request，那么就需要将声明文件发布到 <code>@types</code> 下。</p>',32),dr=(0,a.Uk)("与普通的 npm 模块不同，"),ur=(0,a._)("code",null,"@types",-1),br=(0,a.Uk)(" 是统一由 "),mr={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},gr=(0,a.Uk)("DefinitelyTyped"),hr=(0,a.Uk)(" 管理的。要将声明文件发布到 "),fr=(0,a._)("code",null,"@types",-1),yr=(0,a.Uk)(" 下，就需要给 "),vr={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},xr=(0,a.Uk)("DefinitelyTyped"),kr=(0,a.Uk)(" 创建一个 pull-request，其中包含了类型声明文件，测试代码，以及 "),_r=(0,a._)("code",null,"tsconfig.json",-1),qr=(0,a.Uk)(" 等。"),Ur=(0,a._)("p",null,[(0,a.Uk)("pull-request 需要符合它们的规范，并且通过测试，才能被合并，稍后就会被自动发布到 "),(0,a._)("code",null,"@types"),(0,a.Uk)(" 下。")],-1),jr=(0,a.Uk)("在 "),Qr={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},Dr=(0,a.Uk)("DefinitelyTyped"),Er=(0,a.Uk)(" 中创建一个新的类型声明，需要用到一些工具，"),Wr={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},Tr=(0,a.Uk)("DefinitelyTyped"),Sr=(0,a.Uk)(" 的文档中已经有了"),wr={href:"https://github.com/DefinitelyTyped/DefinitelyTyped#create-a-new-package",target:"_blank",rel:"noopener noreferrer"},Rr=(0,a.Uk)("详细的介绍"),Ar=(0,a.Uk)("，这里就不赘述了，以官方文档为准。"),Mr=(0,a.Uk)("如果大家有此类需求，可以参考下笔者"),Or={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30336/files",target:"_blank",rel:"noopener noreferrer"},zr=(0,a.Uk)("提交的 pull-request"),Cr=(0,a.Uk)(" 。"),Hr=(0,a._)("h2",{id:"参考",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),(0,a.Uk)(" 参考")],-1),Lr={href:"http://www.typescriptlang.org/docs/handbook/writing-declaration-files.html",target:"_blank",rel:"noopener noreferrer"},Nr=(0,a.Uk)("Writing Declaration Files"),Jr=(0,a.Uk)("("),Pr={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/declaration%20files/Introduction.html",target:"_blank",rel:"noopener noreferrer"},$r=(0,a.Uk)("中文版"),Fr=(0,a.Uk)(")"),Zr={href:"http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html",target:"_blank",rel:"noopener noreferrer"},Kr=(0,a.Uk)("Triple-Slash Directives"),Gr=(0,a.Uk)("("),Ir={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Triple-Slash%20Directives.html",target:"_blank",rel:"noopener noreferrer"},Yr=(0,a.Uk)("中文版"),Br=(0,a.Uk)(")"),Vr={href:"https://github.com/Microsoft/TypeScript/issues/22217#issuecomment-369783776",target:"_blank",rel:"noopener noreferrer"},Xr=(0,a.Uk)("typeRoots or paths"),el={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},nl=(0,a.Uk)("DefinitelyTyped"),sl={},al=(0,s(82831).Z)(sl,[["render",function(e,n){const s=(0,a.up)("ExternalLinkIcon"),sl=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a._)("p",null,[l,c,i,p,t,(0,a._)("a",o,[d,(0,a.Wm)(s)]),u]),b,(0,a._)("p",null,[m,g,h,(0,a._)("a",f,[y,(0,a.Wm)(s)]),v]),x,(0,a._)("p",null,[k,_,q,(0,a._)("a",U,[j,(0,a.Wm)(s)]),Q]),D,(0,a._)("p",null,[E,(0,a._)("a",W,[T,(0,a.Wm)(s)]),S]),w,R,A,(0,a._)("p",null,[M,(0,a._)("a",O,[z,(0,a.Wm)(s)]),C]),H,(0,a._)("p",null,[L,N,J,(0,a._)("a",P,[$,(0,a.Wm)(s)]),F]),Z,(0,a._)("p",null,[K,(0,a._)("a",G,[I,(0,a.Wm)(s)]),Y]),B,(0,a._)("p",null,[V,(0,a._)("a",X,[ee,(0,a.Wm)(s)]),ne]),se,(0,a._)("p",null,[ae,re,le,(0,a._)("a",ce,[ie,(0,a.Wm)(s)]),pe]),te,(0,a._)("p",null,[oe,de,ue,(0,a._)("a",be,[me,(0,a.Wm)(s)]),ge]),he,(0,a._)("p",null,[fe,ye,ve,xe,ke,_e,qe,Ue,je,Qe,De,Ee,We,(0,a._)("a",Te,[Se,(0,a.Wm)(s)]),we]),Re,(0,a._)("p",null,[Ae,Me,Oe,(0,a._)("a",ze,[Ce,(0,a.Wm)(s)]),He]),Le,(0,a._)("p",null,[Ne,Je,Pe,$e,Fe,Ze,Ke,Ge,(0,a._)("a",Ie,[Ye,(0,a.Wm)(s)]),Be]),Ve,(0,a._)("p",null,[Xe,en,nn,sn,an,(0,a._)("a",rn,[ln,(0,a.Wm)(s)]),cn]),pn,(0,a._)("p",null,[tn,on,dn,un,bn,mn,gn,(0,a._)("a",hn,[fn,(0,a.Wm)(s)]),yn]),vn,(0,a._)("p",null,[xn,kn,_n,qn,Un,(0,a._)("a",jn,[Qn,(0,a.Wm)(s)]),Dn]),En,(0,a._)("p",null,[Wn,(0,a.Wm)(sl,{to:"/code/language/typescript/advanced/declaration-merging.html"},{default:(0,a.w5)((()=>[Tn])),_:1}),Sn]),wn,(0,a._)("p",null,[Rn,An,(0,a._)("a",Mn,[On,(0,a.Wm)(s)]),zn]),Cn,(0,a._)("p",null,[Hn,Ln,Nn,Jn,Pn,(0,a._)("a",$n,[Fn,(0,a.Wm)(s)]),Zn]),Kn,(0,a._)("p",null,[Gn,In,Yn,Bn,Vn,(0,a._)("a",Xn,[es,(0,a.Wm)(s)]),ns]),ss,(0,a._)("p",null,[as,rs,ls,(0,a._)("a",cs,[is,(0,a.Wm)(s)]),ps]),ts,(0,a._)("p",null,[os,ds,us,bs,ms,gs,hs,(0,a._)("a",fs,[ys,(0,a.Wm)(s)]),vs]),xs,(0,a._)("p",null,[ks,(0,a._)("a",_s,[qs,(0,a.Wm)(s)]),Us]),js,(0,a._)("p",null,[Qs,Ds,Es,(0,a._)("a",Ws,[Ts,(0,a.Wm)(s)]),Ss]),ws,(0,a._)("p",null,[Rs,As,Ms,Os,zs,Cs,Hs,(0,a._)("a",Ls,[Ns,(0,a.Wm)(s)]),Js]),Ps,(0,a._)("p",null,[$s,Fs,Zs,Ks,Gs,(0,a._)("a",Is,[Ys,(0,a.Wm)(s)]),Bs]),Vs,(0,a._)("p",null,[Xs,ea,na,(0,a._)("a",sa,[aa,(0,a.Wm)(s)]),ra]),la,(0,a._)("p",null,[ca,ia,pa,(0,a._)("a",ta,[oa,(0,a.Wm)(s)]),da]),ua,(0,a._)("p",null,[ba,ma,ga,(0,a._)("a",ha,[fa,(0,a.Wm)(s)]),ya]),va,(0,a._)("p",null,[xa,ka,_a,(0,a._)("a",qa,[Ua,(0,a.Wm)(s)]),ja]),Qa,(0,a._)("p",null,[Da,Ea,(0,a._)("a",Wa,[Ta,(0,a.Wm)(s)]),Sa]),wa,(0,a._)("p",null,[Ra,Aa,Ma,Oa,za,(0,a._)("a",Ca,[Ha,(0,a.Wm)(s)]),La]),Na,(0,a._)("p",null,[Ja,Pa,$a,(0,a._)("a",Fa,[Za,(0,a.Wm)(s)]),Ka]),Ga,(0,a._)("p",null,[Ia,Ya,Ba,Va,Xa,(0,a._)("a",er,[nr,(0,a.Wm)(s)]),sr]),ar,(0,a._)("p",null,[rr,lr,cr,(0,a._)("a",ir,[pr,(0,a.Wm)(s)]),tr]),or,(0,a._)("p",null,[dr,ur,br,(0,a._)("a",mr,[gr,(0,a.Wm)(s)]),hr,fr,yr,(0,a._)("a",vr,[xr,(0,a.Wm)(s)]),kr,_r,qr]),Ur,(0,a._)("p",null,[jr,(0,a._)("a",Qr,[Dr,(0,a.Wm)(s)]),Er,(0,a._)("a",Wr,[Tr,(0,a.Wm)(s)]),Sr,(0,a._)("a",wr,[Rr,(0,a.Wm)(s)]),Ar]),(0,a._)("p",null,[Mr,(0,a._)("a",Or,[zr,(0,a.Wm)(s)]),Cr]),Hr,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",Lr,[Nr,(0,a.Wm)(s)]),Jr,(0,a._)("a",Pr,[$r,(0,a.Wm)(s)]),Fr]),(0,a._)("li",null,[(0,a._)("a",Zr,[Kr,(0,a.Wm)(s)]),Gr,(0,a._)("a",Ir,[Yr,(0,a.Wm)(s)]),Br]),(0,a._)("li",null,[(0,a._)("a",Vr,[Xr,(0,a.Wm)(s)])]),(0,a._)("li",null,[(0,a._)("a",el,[nl,(0,a.Wm)(s)])])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const s=e.__vccOpts||e;for(const[e,a]of n)s[e]=a;return s}},71425:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-6193fda3",path:"/code/language/typescript/basics/declaration-files.html",title:"声明文件",lang:"zh-CN",frontmatter:{title:"声明文件",icon:"notice",category:["TypeScript"],summary:"当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。 什么是声明语句 假如我们想使用第三方库 jQuery，一种常见的方式是在 HTML 中通过 标签引入 jQuery，然后就可以使用全局变量 $ 或 jQuery` 了。 我们通常这样获取一个 id 是 foo 的元素: 但是在 ts 中，编译器并不知道 $ 或 jQuery",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/declaration-files.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"声明文件"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2021-03-28T13:40:02.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2021-03-28T13:40:02.000Z"}]]},excerpt:"",headers:[{level:2,title:"什么是声明语句",slug:"什么是声明语句",children:[]},{level:2,title:"什么是声明文件",slug:"什么是声明文件",children:[{level:3,title:"第三方声明文件",slug:"第三方声明文件",children:[]}]},{level:2,title:"书写声明文件",slug:"书写声明文件",children:[{level:3,title:"全局变量",slug:"全局变量",children:[]},{level:3,title:"npm 包",slug:"npm-包",children:[]},{level:3,title:"UMD 库",slug:"umd-库",children:[]},{level:3,title:"直接扩展全局变量",slug:"直接扩展全局变量",children:[]},{level:3,title:"在 npm 包或 UMD 库中扩展全局变量",slug:"在-npm-包或-umd-库中扩展全局变量",children:[]},{level:3,title:"模块插件",slug:"模块插件",children:[]},{level:3,title:"声明文件中的依赖",slug:"声明文件中的依赖",children:[]},{level:3,title:"自动生成声明文件",slug:"自动生成声明文件",children:[]}]},{level:2,title:"发布声明文件",slug:"发布声明文件",children:[{level:3,title:"将声明文件和源码放在一起",slug:"将声明文件和源码放在一起",children:[]},{level:3,title:"将声明文件发布到 @types 下",slug:"将声明文件发布到-types-下",children:[]}]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1616938802e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:4},{name:"Mister-Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:27.49,words:8247},filePathRelative:"code/language/typescript/basics/declaration-files.md"}}}]);