"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[22468],{60359:(n,s,e)=>{e.r(s),e.d(s,{default:()=>o});var a=e(34086);const r=(0,a._)("h1",{id:"编程风格",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#编程风格","aria-hidden":"true"},"#"),(0,a.Uk)(" 编程风格")],-1),l=(0,a._)("p",null,"本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。",-1),p=(0,a.Uk)("多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 "),i={href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("Airbnb"),b=(0,a.Uk)(" 公司的 JavaScript 风格规范。"),u=(0,a.uE)('<h2 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h2><ol><li><p><code>let</code> 取代 <code>var</code></p><p>ES6 提出了两个新的声明变量的命令: <code>let</code> 和 <code>const</code>。其中，<code>let</code> 完全可以取代 <code>var</code>，因为两者语义相同，而且 <code>let</code> 没有副作用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nif (true) {\n  let x = &quot;hello&quot;;\n}\n\nfor (let i = 0; i &lt; 10; i++) {\n  console.log(i);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码如果用 <code>var</code> 替代 <code>let</code>，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code> 命令做不到这一点。</p><p><code>var</code> 命令存在变量提升效用，<code>let</code> 命令没有这个问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>&quot;use strict&quot;;\n\nif (true) {\n  console.log(x); // ReferenceError\n  let x = &quot;hello&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码如果使用 <code>var</code> 替代 <code>let</code>，<code>console.log</code> 那一行就不会报错，而是会输出 <code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p><p>所以，建议不再使用 <code>var</code> 命令，而是使用 <code>let</code> 命令取代。</p></li><li><p>全局常量和线程安全</p><p>在 <code>let</code> 和 <code>const</code> 之间，建议优先使用 <code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</p><p><code>const</code> 优于 <code>let</code> 有几个原因。一个是 <code>const</code> 可以提醒阅读程序的人，这个变量不应该改变；另一个是 <code>const</code> 比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对 <code>const</code> 进行优化，所以多使用 <code>const</code>，有利于提高程序的运行效率，也就是说 <code>let</code> 和 <code>const</code> 的本质区别，其实是编译器内部的处理不同。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nvar a = 1,\n  b = 2,\n  c = 3;\n\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// best\nconst [a, b, c] = [1, 2, 3];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>const</code> 声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p><p>所有的函数都应该设置为常量。</p><p>长远来看，JavaScript 可能会有多线程的实现(比如 Intel 公司的 River Trail 那一类的项目)，这时 <code>let</code> 表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p></li></ol><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst a = &quot;foobar&quot;;\nconst b = &quot;foo&quot; + a + &quot;bar&quot;;\n\n// acceptable\nconst c = `foobar`;\n\n// good\nconst a = &quot;foobar&quot;;\nconst b = `foo${a}bar`;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a> 解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// good\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\n\nconst { left, right } = processInput(input);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst a = { k1: v1, k2: v2, };\nconst b = {\n  k1: v1,\n  k2: v2\n};\n\n// good\nconst a = { k1: v1, k2: v2 };\nconst b = {\n  k1: v1,\n  k2: v2,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用 <code>Object.assign</code> 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst a = {};\na.x = 3;\n\n// if reshape unavoidable\nconst a = {};\nObject.assign(a, { x: 3 });\n\n// good\nconst a = { x: null };\na.x = 3;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst obj = {\n  id: 5,\n  name: &quot;San Francisco&quot;,\n};\nobj[getKey(&quot;enabled&quot;)] = true;\n\n// good\nconst obj = {\n  id: 5,\n  name: &quot;San Francisco&quot;,\n  [getKey(&quot;enabled&quot;)]: true,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面代码中，对象 <code>obj</code> 的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建 <code>obj</code> 的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p><p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var ref = &quot;some value&quot;;\n\n// bad\nconst atom = {\n  ref: ref,\n\n  value: 1,\n\n  addValue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good\nconst atom = {\n  ref,\n\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>使用扩展运算符(...)拷贝数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i &lt; len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用 Array.from 方法，将类似数组的对象转为数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const foo = document.querySelectorAll(&quot;.foo&quot;);\nconst nodes = Array.from(foo);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>立即执行函数可以写成箭头函数的形式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>(() =&gt; {\n  console.log(&quot;Welcome to the Internet.&quot;);\n})();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\n[1, 2, 3].map(function (x) {\n  return x * x;\n});\n\n// good\n[1, 2, 3].map((x) =&gt; {\n  return x * x;\n});\n\n// best\n[1, 2, 3].map((x) =&gt; x * x);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>箭头函数取代 <code>Function.prototype.bind</code>，不应再用 self/_this/that 绑定 this。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst self = this;\nconst boundMethod = function (...params) {\n  return method.apply(self, params);\n};\n\n// acceptable\nconst boundMethod = method.bind(this);\n\n// best\nconst boundMethod = (...params) =&gt; method.apply(this, params);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nfunction divide(a, b, option = false) {}\n\n// good\nfunction divide(a, b, { option = false } = {}) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不要在函数体内使用 arguments 变量，使用 rest 运算符 <code>...</code> 代替。因为 rest 运算符显式表明您想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join(&quot;&quot;);\n}\n\n// good\nfunction concatenateAll(...args) {\n  return args.join(&quot;&quot;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用默认值语法设置函数参数的默认值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nfunction handleThings(opts) {\n  opts = opts || {};\n}\n\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="map-结构" tabindex="-1"><a class="header-anchor" href="#map-结构" aria-hidden="true">#</a> Map 结构</h2><p>注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要 <code>key: value</code> 的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>let map = new Map(arr);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h2><p>总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nfunction Queue(contents = []) {\n  this._queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this._queue[0];\n  this._queue.splice(0, 1);\n  return value;\n};\n\n// good\nclass Queue {\n  constructor(contents = []) {\n    this._queue = [...contents];\n  }\n  pop() {\n    const value = this._queue[0];\n    this._queue.splice(0, 1);\n    return value;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>使用 <code>extends</code> 实现继承，因为这样更简单，不会有破坏 <code>instanceof</code> 运算的危险。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst inherits = require(&quot;inherits&quot;);\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function () {\n  return this._queue[0];\n};\n\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this._queue[0];\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><p>首先，Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用 <code>import</code> 取代 <code>require</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nconst moduleA = require(&quot;moduleA&quot;);\nconst func1 = moduleA.func1;\nconst func2 = moduleA.func2;\n\n// good\nimport { func1, func2 } from &quot;moduleA&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 <code>export</code> 取代 <code>module.exports</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// commonJS的写法\nvar React = require(&quot;react&quot;);\n\nvar Breadcrumbs = React.createClass({\n  render() {\n    return &lt;nav /&gt;;\n  },\n});\n\nmodule.exports = Breadcrumbs;\n\n// ES6的写法\nimport React from &quot;react&quot;;\n\nclass Breadcrumbs extends React.Component {\n  render() {\n    return &lt;nav /&gt;;\n  }\n}\n\nexport default Breadcrumbs;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>如果模块只有一个输出值，就使用 <code>export default</code>，如果模块有多个输出值，就不使用 <code>export default</code>，<code>export default</code> 与普通的 <code>export</code> 不要同时使用。</p><p>不要在模块输入中使用通配符。因为这样可以确保您的模块之中，有一个默认输出(export default)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// bad\nimport * as myObject from &quot;./importModule&quot;;\n\n// good\nimport myObject from &quot;./importModule&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function makeStyleGuide() {}\n\nexport default makeStyleGuide;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const StyleGuide = {\n  es6: {},\n};\n\nexport default StyleGuide;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="eslint-的使用" tabindex="-1"><a class="header-anchor" href="#eslint-的使用" aria-hidden="true">#</a> ESLint 的使用</h2><p>ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p><p>首先，安装 ESLint。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm i -g eslint\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，安装 Airbnb 语法规则，以及 import、a11y、react 插件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npm i -g eslint-config-airbnb\nnpm i -g eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后，在项目的根目录下新建一个 <code>.eslintrc</code> 文件，配置 ESLint。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>{\n  &quot;extends&quot;: &quot;eslint-config-airbnb&quot;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在就可以检查，当前项目的代码是否符合预设的规则。</p><p><code>index.js</code> 文件的代码如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var unusued = &quot;I have no purpose!&quot;;\n\nfunction greet() {\n  var message = &quot;Hello, World!&quot;;\n  alert(message);\n}\n\ngreet();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用 ESLint 检查这个文件，就会报出错误。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ eslint index.js\nindex.js\n  1:1  error  Unexpected var, use let or const instead          no-var\n  1:5  error  unusued is defined but never used                 no-unused-vars\n  4:5  error  Expected indentation of 2 characters but found 4  indent\n  4:5  error  Unexpected var, use let or const instead          no-var\n  5:5  error  Expected indentation of 2 characters but found 4  indent\n\n✖ 5 problems (5 errors, 0 warnings)\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码说明，原文件有五个错误，其中两个是不应该使用 <code>var</code> 命令，而要使用 <code>let</code> 或 <code>const</code>；一个是定义了变量，却没有使用；另外两个是行首缩进为 4 个空格，而不是规定的 2 个空格。</p>',75),t={},o=(0,e(82831).Z)(t,[["render",function(n,s){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,l,(0,a._)("p",null,[p,(0,a._)("a",i,[c,(0,a.Wm)(e)]),b]),u],64)}]])},82831:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},80549:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-32817272",path:"/code/language/js/es6/style.html",title:"编程风格",lang:"zh-CN",frontmatter:{icon:"style",author:"阮一峰",date:"2019-10-23T00:00:00.000Z",category:["JavaScript"],copyright:'此部分博客采用 <a href="http://creativecommons.org/licenses/by-nc/4.0/" rel="noopener noreferrer" target="_blank">“保持署名—非商用”创意共享4.0许可证</a>',summary:"编程风格 本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。 多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 Airbnb 公司的 JavaScript 风格规范。 块级作用域 1. let 取代 var ES6 提出了两个新的声明变量的命令: let 和 c",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/es6/style.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"编程风格"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-12T05:50:30.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:author",content:"阮一峰"}],["meta",{property:"article:published_time",content:"2019-10-23T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-12T05:50:30.000Z"}]]},excerpt:"",headers:[{level:2,title:"块级作用域",slug:"块级作用域",children:[]},{level:2,title:"字符串",slug:"字符串",children:[]},{level:2,title:"解构赋值",slug:"解构赋值",children:[]},{level:2,title:"对象",slug:"对象",children:[]},{level:2,title:"数组",slug:"数组",children:[]},{level:2,title:"函数",slug:"函数",children:[]},{level:2,title:"Map 结构",slug:"map-结构",children:[]},{level:2,title:"Class",slug:"class",children:[]},{level:2,title:"模块",slug:"模块",children:[]},{level:2,title:"ESLint 的使用",slug:"eslint-的使用",children:[]}],git:{createdTime:1591204114e3,updatedTime:164464503e4,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:6}]},readingTime:{minutes:7.92,words:2375},filePathRelative:"code/language/js/es6/style.md"}}}]);