"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[96746],{52281:(n,e,s)=>{s.r(e),s.d(e,{default:()=>_});var a=s(34086);const r=(0,a._)("p",null,"在 TypeScript 中，我们使用接口(Interfaces)来定义对象的类型。",-1),p=(0,a._)("h2",{id:"什么是接口",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#什么是接口","aria-hidden":"true"},"#"),(0,a.Uk)(" 什么是接口")],-1),l=(0,a._)("p",null,"在面向对象语言中，接口(Interfaces)是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类(classes)去实现(implement)。",-1),i=(0,a.Uk)("TypeScript 中的接口是一个非常灵活的概念，除了可用于"),t=(0,a.Uk)("对类的一部分行为进行抽象"),c=(0,a.Uk)("以外，也常用于对「对象的形状(Shape)」进行描述。"),b=(0,a.uE)('<h2 id="简单的例子" tabindex="-1"><a class="header-anchor" href="#简单的例子" aria-hidden="true">#</a> 简单的例子</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age: number;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  age: 25,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面的例子中，我们定义了一个接口 <code>Person</code>，接着定义了一个变量 <code>tom</code>，它的类型是 <code>Person</code>。这样，我们就约束了 <code>tom</code> 的形状必须和接口 <code>Person</code> 一致。</p>',3),o=(0,a.Uk)("接口一般首字母大写。"),m={href:"https://msdn.microsoft.com/en-us/library/8bc1fexb%28v=vs.71%29.aspx",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("有的编程语言中会建议接口的名称加上 "),d=(0,a._)("code",null,"I",-1),g=(0,a.Uk)(" 前缀"),y=(0,a.Uk)("。"),h=(0,a.uE)('<p>定义的变量比接口少了一些属性是不允许的:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age: number;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n};\n\n// index.ts(6,5): error TS2322: Type &#39;{ name: string; }&#39; is not assignable to type &#39;Person&#39;.\n//   Property &#39;age&#39; is missing in type &#39;{ name: string; }&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>多一些属性也是不允许的:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age: number;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  age: 25,\n  gender: &quot;male&quot;,\n};\n\n// index.ts(9,5): error TS2322: Type &#39;{ name: string; age: number; gender: string; }&#39; is not assignable to type &#39;Person&#39;.\n//   Object literal may only specify known properties, and &#39;gender&#39; does not exist in type &#39;Person&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>可见，<strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong>。</p><h2 id="可选属性" tabindex="-1"><a class="header-anchor" href="#可选属性" aria-hidden="true">#</a> 可选属性</h2><p>有时我们希望不要完全匹配一个形状，那么可以用可选属性:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age?: number;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age?: number;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  age: 25,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可选属性的含义是该属性可以不存在。</p><p>这时<strong>仍然不允许添加未定义的属性</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age?: number;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  age: 25,\n  gender: &quot;male&quot;,\n};\n\n// examples/playground/index.ts(9,5): error TS2322: Type &#39;{ name: string; age: number; gender: string; }&#39; is not assignable to type &#39;Person&#39;.\n//   Object literal may only specify known properties, and &#39;gender&#39; does not exist in type &#39;Person&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="任意属性" tabindex="-1"><a class="header-anchor" href="#任意属性" aria-hidden="true">#</a> 任意属性</h2><p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  gender: &quot;male&quot;,\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。</p><p>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  name: string;\n  age?: number;\n  [propName: string]: string;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  age: 25,\n  gender: &quot;male&quot;,\n};\n\n// index.ts(3,5): error TS2411: Property &#39;age&#39; of type &#39;number&#39; is not assignable to string index type &#39;string&#39;.\n// index.ts(7,5): error TS2322: Type &#39;{ [x: string]: string | number; name: string; age: number; gender: string; }&#39; is not assignable to type &#39;Person&#39;.\n//   Index signatures are incompatible.\n//     Type &#39;string | number&#39; is not assignable to type &#39;string&#39;.\n//       Type &#39;number&#39; is not assignable to type &#39;string&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p><p>另外，在报错信息中可以看出，此时 <code>{ name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; }</code> 的类型被推断成了 <code>{ [x: string]: string | number; name: string; age: number; gender: string; }</code>，这是联合类型和接口的结合。</p><h2 id="只读属性" tabindex="-1"><a class="header-anchor" href="#只读属性" aria-hidden="true">#</a> 只读属性</h2><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet tom: Person = {\n  id: 89757,\n  name: &quot;Tom&quot;,\n  gender: &quot;male&quot;,\n};\n\ntom.id = 9527;\n\n// index.ts(14,5): error TS2540: Cannot assign to &#39;id&#39; because it is a constant or a read-only property.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了。</p><p><strong>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</strong>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Person {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet tom: Person = {\n  name: &quot;Tom&quot;,\n  gender: &quot;male&quot;,\n};\n\ntom.id = 89757;\n\n// index.ts(8,5): error TS2322: Type &#39;{ name: string; gender: string; }&#39; is not assignable to type &#39;Person&#39;.\n//   Property &#39;id&#39; is missing in type &#39;{ name: string; gender: string; }&#39;.\n// index.ts(13,5): error TS2540: Cannot assign to &#39;id&#39; because it is a constant or a read-only property.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</p><p>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',29),v={href:"http://www.typescriptlang.org/docs/handbook/interfaces.html",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("Interfaces"),T=(0,a.Uk)("("),x={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html",target:"_blank",rel:"noopener noreferrer"},P=(0,a.Uk)("中文版"),q=(0,a.Uk)(")"),k={},_=(0,s(82831).Z)(k,[["render",function(n,e){const s=(0,a.up)("RouterLink"),k=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a.kq)(" more "),p,l,(0,a._)("p",null,[i,(0,a.Wm)(s,{to:"/code/language/typescript/advanced/class-and-interfaces.html#%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3"},{default:(0,a.w5)((()=>[t])),_:1}),c]),b,(0,a._)("p",null,[o,(0,a._)("a",m,[u,d,g,(0,a.Wm)(k)]),y]),h,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",v,[f,(0,a.Wm)(k)]),T,(0,a._)("a",x,[P,(0,a.Wm)(k)]),q])])],64)}]])},82831:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}},45020:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-76bd067c",path:"/code/language/typescript/basics/type-of-object-interfaces.html",title:"对象的类型——接口",lang:"zh-CN",frontmatter:{title:"对象的类型——接口",icon:"api",category:["TypeScript"],summary:"在 TypeScript 中，我们使用接口(Interfaces)来定义对象的类型。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/type-of-object-interfaces.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"对象的类型——接口"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-06-03T17:08:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-06-03T17:08:34.000Z"}]]},excerpt:"<p>在 TypeScript 中，我们使用接口(Interfaces)来定义对象的类型。</p>\n",headers:[{level:2,title:"什么是接口",slug:"什么是接口",children:[]},{level:2,title:"简单的例子",slug:"简单的例子",children:[]},{level:2,title:"可选属性",slug:"可选属性",children:[]},{level:2,title:"任意属性",slug:"任意属性",children:[]},{level:2,title:"只读属性",slug:"只读属性",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1591204114e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:3.64,words:1093},filePathRelative:"code/language/typescript/basics/type-of-object-interfaces.md"}}}]);