"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[20684],{38779:(e,n,a)=>{a.r(n),a.d(n,{default:()=>qe});var s=a(34086);const r=(0,s.Uk)("该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 "),l=(0,s.Uk)("Dart 概要"),i=(0,s.Uk)("。"),t=(0,s.uE)('<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h2><p>每个应用都有 <code>main()</code> 函数。要在控制台上显示文本，可以使用顶级 <code>print()</code> 函数:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>void main() {\n  print(&#39;Hello, World!&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>即使在类型安全的 Dart 代码中，由于类型推断，大多数变量也不需要显式类型:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>var name = &#39;Voyager I&#39;;\nvar year = 1977;\nvar antennaDiameter = 3.7;\nvar flybyObjects = [&#39;Jupiter&#39;, &#39;Saturn&#39;, &#39;Uranus&#39;, &#39;Neptune&#39;];\nvar image = {\n  &#39;tags&#39;: [&#39;saturn&#39;],\n  &#39;url&#39;: &#39;//path/to/saturn.jpg&#39;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',6),c={href:"https://dart.dev/guides/language/language-tour#variables",target:"_blank",rel:"noopener noreferrer"},d=(0,s.Uk)("阅读有关 Dart 中变量的更多信息"),p=(0,s.Uk)("，包括默认值，"),u=(0,s._)("code",null,"final",-1),b=(0,s.Uk)(" 和 "),o=(0,s._)("code",null,"const",-1),m=(0,s.Uk)(" 关键字以及静态类型。"),g=(0,s.uE)('<h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句" aria-hidden="true">#</a> 控制语句</h2><p>Dart 支持通常的控制语句:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>if (year &gt;= 2001) {\n  print(&#39;21st century&#39;);\n} else if (year &gt;= 1901) {\n  print(&#39;20th century&#39;);\n}\n\nfor (var object in flybyObjects) {\n  print(object);\n}\n\nfor (int month = 1; month &lt;= 12; month++) {\n  print(month);\n}\n\nwhile (year &lt; 2016) {\n  year += 1;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',3),h={href:"https://dart.dev/guides/language/language-tour#control-flow-statements",target:"_blank",rel:"noopener noreferrer"},v=(0,s.Uk)("阅读有关 Dart 中控制流语句的更多信息"),f=(0,s.Uk)("，包括 "),k=(0,s._)("code",null,"break",-1),y=(0,s.Uk)(" 和 "),_=(0,s._)("code",null,"continue",-1),U=(0,s.Uk)("，"),x=(0,s._)("code",null,"switch",-1),w=(0,s.Uk)(" 和 "),D=(0,s._)("code",null,"case",-1),S=(0,s.Uk)("，和 "),W=(0,s._)("code",null,"assert",-1),j=(0,s.Uk)("。"),E=(0,s._)("h2",{id:"函数",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),(0,s.Uk)(" 函数")],-1),I={href:"https://dart.dev/guides/language/effective-dart/design#types",target:"_blank",rel:"noopener noreferrer"},T=(0,s.Uk)("我们建议"),$=(0,s.Uk)(" 指定每个函数的参数和返回值的类型:"),C=(0,s.uE)('<div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>int fibonacci(int n) {\n  if (n == 0 || n == 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvar result = fibonacci(20);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>简写 <code>=&gt;</code>(箭头)语法对于包含单个语句的函数很方便。当将匿名函数作为参数传递时，此语法特别有用:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>flybyObjects.where((name) =&gt; name.contains(&#39;turn&#39;)).forEach(print);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>除了显示匿名函数(<code>where()</code> 的参数)之外，此代码还显示您可以将函数用作参数: 顶级 <code>print()</code> 函数是 <code>forEach()</code> 的参数。</p>',4),F={href:"https://dart.dev/guides/language/language-tour#functions",target:"_blank",rel:"noopener noreferrer"},O=(0,s.Uk)("阅读有关"),P=(0,s.Uk)(" Dart 中函数的更多信息，包括可选参数，默认参数值和词法范围。"),H=(0,s.uE)('<h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>Dart 注释通常以开头 <code>//</code>。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dartdoc treat\n/// doc comments specially.\n\n/*Comments like these are also supported.*/\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',3),M={href:"https://dart.dev/guides/language/language-tour#comments",target:"_blank",rel:"noopener noreferrer"},N=(0,s.Uk)("阅读有关"),Z=(0,s.Uk)(" Dart 中注释的更多信息，包括文档工具的工作方式。"),L=(0,s.uE)('<h2 id="导入" tabindex="-1"><a class="header-anchor" href="#导入" aria-hidden="true">#</a> 导入</h2><p>要访问其他库中定义的 API，请使用 <code>import</code>。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>// Importing core libraries\nimport &#39;dart:math&#39;;\n\n// Importing libraries from external packages\nimport &#39;package:test/test.dart&#39;;\n\n// Importing files\nimport &#39;path/to/my_other_file.dart&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',3),z={href:"https://dart.dev/guides/language/language-tour#libraries-and-visibility",target:"_blank",rel:"noopener noreferrer"},A=(0,s.Uk)("阅读有关"),R=(0,s.Uk)(" Dart 中库和可见性的更多信息，包括库前缀 "),V=(0,s._)("code",null,"show",-1),Y=(0,s.Uk)(" 和 "),q=(0,s._)("code",null,"hide",-1),J=(0,s.Uk)("，以及通过 "),B=(0,s._)("code",null,"deferred",-1),G=(0,s.Uk)(" 关键字的延迟加载。"),K=(0,s.uE)('<h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><p>这是一个具有三个属性，两个构造函数和一个方法的类的示例。其中一个属性不能直接设置，因此是使用 <code>getter</code> 方法(而不是变量)定义的。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class Spacecraft {\n  String name;\n  DateTime launchDate;\n\n  // Constructor, with syntactic sugar for assignment to members.\n  Spacecraft(this.name, this.launchDate) {\n    // Initialization code goes here.\n  }\n\n  // Named constructor that forwards to the default one.\n  Spacecraft.unlaunched(String name) : this(name, null);\n\n  int get launchYear =&gt;\n      launchDate?.year; // read-only non-final property\n\n  // Method.\n  void describe() {\n    print(&#39;Spacecraft: $name&#39;);\n    if (launchDate != null) {\n      int years =\n          DateTime.now().difference(launchDate).inDays ~/\n              365;\n      print(&#39;Launched: $launchYear ($years years ago)&#39;);\n    } else {\n      print(&#39;Unlaunched&#39;);\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>您可以使用这样的 <code>Spacecraft</code> 类:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>var voyager = Spacecraft(&#39;Voyager I&#39;, DateTime(1977, 9, 5));\nvoyager.describe();\n\nvar voyager3 = Spacecraft.unlaunched(&#39;Voyager III&#39;);\nvoyager3.describe();\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',5),Q={href:"https://dart.dev/guides/language/language-tour#classes",target:"_blank",rel:"noopener noreferrer"},X=(0,s.Uk)("阅读有关"),ee=(0,s.Uk)(" Dart 中类的更多信息，包括初始化列表，可选 "),ne=(0,s._)("code",null,"new",-1),ae=(0,s.Uk)(" 和 "),se=(0,s._)("code",null,"const",-1),re=(0,s.Uk)("，重定向构造函数，"),le=(0,s._)("code",null,"factory",-1),ie=(0,s.Uk)(" 构造函数，getter，setter 等。"),te=(0,s.uE)('<h2 id="遗产" tabindex="-1"><a class="header-anchor" href="#遗产" aria-hidden="true">#</a> 遗产</h2><p>Dart 具有单一继承。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class Orbiter extends Spacecraft {\n  double altitude;\n  Orbiter(String name, DateTime launchDate, this.altitude)\n      : super(name, launchDate);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',3),ce={href:"https://dart.dev/guides/language/language-tour#extending-a-class",target:"_blank",rel:"noopener noreferrer"},de=(0,s.Uk)("阅读有关"),pe=(0,s.Uk)(" 扩展类，可选 "),ue=(0,s._)("code",null,"@override",-1),be=(0,s.Uk)(" 注释等的更多信息。"),oe=(0,s.uE)('<h2 id="混入" tabindex="-1"><a class="header-anchor" href="#混入" aria-hidden="true">#</a> 混入</h2><p>Mixins 是在多个类层次结构中重用代码的一种方式。以下类可以充当 mixin:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class Piloted {\n  int astronauts = 1;\n  void describeCrew() {\n    print(&#39;Number of astronauts: $astronauts&#39;);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要将 mixin 的功能添加到类中，只需使用 mixin 扩展类即可。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class PilotedCraft extends Spacecraft with Piloted {\n  // ···\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>PilotedCraft</code> 现在具有 <code>astronauts</code> 字段和 <code>describeCrew()</code> 方法。</p>',6),me={href:"https://dart.dev/guides/language/language-tour#adding-features-to-a-class-mixins",target:"_blank",rel:"noopener noreferrer"},ge=(0,s.Uk)("阅读有关"),he=(0,s.Uk)(" mixin 的更多信息。"),ve=(0,s.uE)('<h2 id="接口和抽象类" tabindex="-1"><a class="header-anchor" href="#接口和抽象类" aria-hidden="true">#</a> 接口和抽象类</h2><p>Dart 没有 <code>interface</code> 关键字。相反，所有类都隐式定义一个接口。因此，您可以实现任何类。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>class MockSpaceship implements Spacecraft {\n  // ···\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),fe={href:"https://dart.dev/guides/language/language-tour#implicit-interfaces",target:"_blank",rel:"noopener noreferrer"},ke=(0,s.Uk)("阅读有关"),ye=(0,s.Uk)(" 隐式接口的更多信息。"),_e=(0,s.uE)('<p>您可以创建要由具体类扩展(或实现)的抽象类。抽象类可以包含抽象方法(具有空主体)。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>abstract class Describable {\n  void describe();\n\n  void describeWithEmphasis() {\n    print(&#39;=========&#39;);\n    describe();\n    print(&#39;=========&#39;);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>任何扩展类 <code>Describable</code> 都具有 <code>describeWithEmphasis()</code> 方法，该方法调用扩展程序的实现 <code>describe()</code>。</p>',3),Ue={href:"https://dart.dev/guides/language/language-tour#abstract-classes",target:"_blank",rel:"noopener noreferrer"},xe=(0,s.Uk)("阅读有关"),we=(0,s.Uk)(" 抽象类和方法的更多信息。"),De=(0,s.uE)('<h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><p>避免陷入回调地狱，您可以使用 <code>async</code> 和 <code>await</code> 来提高代码的可读性。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>const oneSecond = Duration(seconds: 1);\n// ···\nFuture&lt;void&gt; printWithDelay(String message) async {\n  await Future.delayed(oneSecond);\n  print(message);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的方法等效于:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>Future&lt;void&gt; printWithDelay(String message) {\n  return Future.delayed(oneSecond).then((_) {\n    print(message);\n  });\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如下例所示，<code>async</code> 和 <code>await</code> 有助于使异步代码易于阅读。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>Future&lt;void&gt; createDescriptions(Iterable&lt;String&gt; objects) async {\n  for (var object in objects) {\n    try {\n      var file = File(&#39;$object.txt&#39;);\n      if (await file.exists()) {\n        var modified = await file.lastModified();\n        print(\n            &#39;File for $object already exists. It was modified on $modified.&#39;);\n        continue;\n      }\n      await file.create();\n      await file.writeAsString(&#39;Start describing $object in this file.&#39;);\n    } on IOException catch (e) {\n      print(&#39;Cannot create description for $object: $e&#39;);\n    }\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>您还可以使用 <code>async*</code>，它为您提供了一种很好的，易于阅读的方式来构建流。</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>Stream&lt;String&gt; report(Spacecraft craft, Iterable&lt;String&gt; objects) async* {\n  for (var object in objects) {\n    await Future.delayed(oneSecond);\n    yield &#39;${craft.name} flies by $object&#39;;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',9),Se={href:"https://dart.dev/guides/language/language-tour#asynchrony-support",target:"_blank",rel:"noopener noreferrer"},We=(0,s.Uk)("阅读更多"),je=(0,s.Uk)(" 关于异步支持，包括 "),Ee=(0,s._)("code",null,"async",-1),Ie=(0,s.Uk)(" 功能 "),Te=(0,s._)("code",null,"Future",-1),$e=(0,s.Uk)("，"),Ce=(0,s._)("code",null,"Stream",-1),Fe=(0,s.Uk)(" 和异步循环(await for)。"),Oe=(0,s.uE)('<h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><p>要引发异常，请使用 <code>throw</code>:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>if (astronauts == 0) {\n  throw StateError(&#39;No astronauts.&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>要捕获异常，请使用 <code>try</code> 带有 <code>on</code> 或 <code>catch</code>(或两者)的语句:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>try {\n  for (var object in flybyObjects) {\n    var description = await File(&#39;$object.txt&#39;).readAsString();\n    print(description);\n  }\n} on IOException catch (e) {\n  print(&#39;Could not describe object: $e&#39;);\n} finally {\n  flybyObjects.clear();\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意上面的代码是异步的； <code>try</code> 适用于同步代码和 <code>async</code> 函数中的代码。</p><p>阅读有关异常的更多信息，包括堆栈跟踪 <code>rethrow</code>，和错误与异常之间的区别。</p><h2 id="其他话题" tabindex="-1"><a class="header-anchor" href="#其他话题" aria-hidden="true">#</a> 其他话题</h2>',8),Pe=(0,s.Uk)("更多的代码示例在 "),He={href:"https://dart.dev/guides/language/language-tour",target:"_blank",rel:"noopener noreferrer"},Me=(0,s.Uk)("语言示例"),Ne=(0,s.Uk)(" 和 "),Ze={href:"https://dart.dev/guides/libraries/library-tour",target:"_blank",rel:"noopener noreferrer"},Le=(0,s.Uk)("库示例"),ze=(0,s.Uk)(" 中。另请参阅 "),Ae={href:"https://api.dart.dev/",target:"_blank",rel:"noopener noreferrer"},Re=(0,s.Uk)("Dart API 参考"),Ve=(0,s.Uk)("， 其中通常包含示例。"),Ye={},qe=(0,a(82831).Z)(Ye,[["render",function(e,n){const a=(0,s.up)("RouterLink"),Ye=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[(0,s._)("p",null,[r,(0,s.Wm)(a,{to:"/code/language/dart/samples/cheatsheet.html"},{default:(0,s.w5)((()=>[l])),_:1}),i]),(0,s.kq)(" more "),t,(0,s._)("p",null,[(0,s._)("a",c,[d,(0,s.Wm)(Ye)]),p,u,b,o,m]),g,(0,s._)("p",null,[(0,s._)("a",h,[v,(0,s.Wm)(Ye)]),f,k,y,_,U,x,w,D,S,W,j]),E,(0,s._)("p",null,[(0,s._)("a",I,[T,(0,s.Wm)(Ye)]),$]),C,(0,s._)("p",null,[(0,s._)("a",F,[O,(0,s.Wm)(Ye)]),P]),H,(0,s._)("p",null,[(0,s._)("a",M,[N,(0,s.Wm)(Ye)]),Z]),L,(0,s._)("p",null,[(0,s._)("a",z,[A,(0,s.Wm)(Ye)]),R,V,Y,q,J,B,G]),K,(0,s._)("p",null,[(0,s._)("a",Q,[X,(0,s.Wm)(Ye)]),ee,ne,ae,se,re,le,ie]),te,(0,s._)("p",null,[(0,s._)("a",ce,[de,(0,s.Wm)(Ye)]),pe,ue,be]),oe,(0,s._)("p",null,[(0,s._)("a",me,[ge,(0,s.Wm)(Ye)]),he]),ve,(0,s._)("p",null,[(0,s._)("a",fe,[ke,(0,s.Wm)(Ye)]),ye]),_e,(0,s._)("p",null,[(0,s._)("a",Ue,[xe,(0,s.Wm)(Ye)]),we]),De,(0,s._)("p",null,[(0,s._)("a",Se,[We,(0,s.Wm)(Ye)]),je,Ee,Ie,Te,$e,Ce,Fe]),Oe,(0,s._)("p",null,[Pe,(0,s._)("a",He,[Me,(0,s.Wm)(Ye)]),Ne,(0,s._)("a",Ze,[Le,(0,s.Wm)(Ye)]),ze,(0,s._)("a",Ae,[Re,(0,s.Wm)(Ye)]),Ve])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},70876:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-7c7974d0",path:"/code/language/dart/samples/samples.html",title:"dart 语言范例",lang:"zh-CN",frontmatter:{title:"dart 语言范例",icon:"discover",date:"2020-05-30T00:00:00.000Z",category:["dart"],summary:"该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 Dart 概要。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/dart/samples/samples.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"dart 语言范例"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2020-05-30T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:'<p>该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 <RouterLink to="/code/language/dart/samples/cheatsheet.html">Dart 概要</RouterLink>。</p>\n',headers:[{level:2,title:"Hello World",slug:"hello-world",children:[]},{level:2,title:"变量",slug:"变量",children:[]},{level:2,title:"控制语句",slug:"控制语句",children:[]},{level:2,title:"函数",slug:"函数",children:[]},{level:2,title:"注释",slug:"注释",children:[]},{level:2,title:"导入",slug:"导入",children:[]},{level:2,title:"类",slug:"类",children:[]},{level:2,title:"遗产",slug:"遗产",children:[]},{level:2,title:"混入",slug:"混入",children:[]},{level:2,title:"接口和抽象类",slug:"接口和抽象类",children:[]},{level:2,title:"异步",slug:"异步",children:[]},{level:2,title:"异常",slug:"异常",children:[]},{level:2,title:"其他话题",slug:"其他话题",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3}]},readingTime:{minutes:5.07,words:1521},filePathRelative:"code/language/dart/samples/samples.md"}}}]);