"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[33115],{29696:(n,a,e)=>{e.r(a),e.d(a,{default:()=>f});var s=e(34086);const r=(0,s._)("p",null,"数组(array)是按次序排列的一组值。每个值的位置都有编号(从 0 开始)，整个数组用方括号表示。",-1),l=(0,s._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,s._)("pre",{class:"language-javascript"},[(0,s._)("code",null,'const arr = ["a", "b", "c"];\n')]),(0,s._)("div",{class:"line-numbers","aria-hidden":"true"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br")])],-1),c=(0,s.uE)('<p>上面代码中的 <code>a</code>、<code>b</code>、<code>c</code> 就构成一个数组，两端的方括号是数组的标志。<code>a</code> 是 0 号位置，<code>b</code> 是 1 号位置，<code>c</code> 是 2 号位置。</p><p>除了在定义时赋值，数组也可以先定义后赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [];\n\narr[0] = &quot;a&quot;;\narr[1] = &quot;b&quot;;\narr[2] = &quot;c&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>任何类型的数据，都可以放入数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [\n  { a: 1 },\n  [1, 2, 3],\n  function () {\n    return true;\n  },\n];\n\narr[0]; // Object {a: 1}\narr[1]; // [1, 2, 3]\narr[2]; // function (){return true;}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面数组 <code>arr</code> 的 3 个成员依次是对象、数组、函数。</p><p>如果数组的元素还是数组，就形成了多维数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [\n  [1, 2],\n  [3, 4],\n];\n\na[0][1]; // 2\na[1][1]; // 4\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="数组的本质" tabindex="-1"><a class="header-anchor" href="#数组的本质" aria-hidden="true">#</a> 数组的本质</h2><p>本质上，数组属于一种特殊的对象。<code>typeof</code> 运算符会返回数组的类型是 <code>object</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>typeof [1, 2, 3]; // &quot;object&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码表明，<code>typeof</code> 运算符认为数组的类型就是对象。</p><p>数组的特殊性体现在，它的键名是按次序排列的一组整数 (0，1，2...)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n\nObject.keys(arr);\n// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码中，<code>Object.keys</code> 方法返回数组的所有键名。可以看到数组的键名就是整数 0、1、2。</p><p>由于数组成员的键名是固定的(默认总是 0、1、2...)，因此数组不用为每个元素指定键名，而对象的每个成员都必须指定键名。JavaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n\narr[&quot;0&quot;]; // &#39;a&#39;\narr[0]; // &#39;a&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码分别用数值和字符串作为键名，结果都能读取数组。原因是数值键名被自动转为了字符串。</p><p>注意，这点在赋值时也成立。一个值总是先转成字符串，再作为键名进行赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [];\n\na[1.0] = 6;\na[1]; // 6\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码中，由于 <code>1.00</code> 转成字符串是 <code>1</code>，所以通过数字键 <code>1</code> 可以读取值。</p><p>上一章说过，对象有两种读取成员的方法: 点结构 (<code>object.key</code>) 和方括号结构 (<code>object[key]</code>)。但是，对于数值的键名，不能使用点结构。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [1, 2, 3];\n\narr.0 // SyntaxError\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码中，<code>arr.0</code> 的写法不合法，因为单独的数值不能作为标识符(identifier)。所以，数组成员只能用方括号 <code>arr[0]</code> 表示(方括号是运算符，可以接受数值)。</p><h2 id="length-属性" tabindex="-1"><a class="header-anchor" href="#length-属性" aria-hidden="true">#</a> length 属性</h2><p>数组的 <code>length</code> 属性，返回数组的成员数量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].length; // 3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>JavaScript 使用一个 32 位整数，保存数组的元素个数。这意味着，数组成员最多只有 4294967295 个(2<sup>32</sup> - 1)个，也就是说 <code>length</code> 属性的最大值就是 4294967295。</p><p>只要是数组，就一定有 <code>length</code> 属性。该属性是一个动态的值，等于键名中的最大整数加上 <code>1</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;];\n\narr.length; // 2\n\narr[2] = &quot;c&quot;;\narr.length; // 3\n\narr[9] = &quot;d&quot;;\narr.length; // 10\n\narr[1000] = &quot;e&quot;;\narr.length; // 1001\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码表示，数组的数字键不需要连续，<code>length</code> 属性的值总是比最大的那个整数键大 <code>1</code>。另外，这也表明数组是一种动态的数据结构，可以随时增减数组的成员。</p><p><code>length</code> 属性是可写的。如果人为设置一个小于当前成员个数的值，该数组的成员会自动减少到 <code>length</code> 设置的值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n\narr.length; // 3\n\narr.length = 2;\narr; // [&quot;a&quot;, &quot;b&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码表示，当数组的 <code>length</code> 属性设为 2(即最大的整数键只能是 1)那么整数键 2(值为 <code>c</code>)就已经不在数组中了，被自动删除了。</p><p>清空数组的一个有效方法，就是将 <code>length</code> 属性设为 0。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n\narr.length = 0;\narr; // []\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果人为设置 <code>length</code> 大于当前元素个数，则数组的成员数量会增加到这个值，新增的位置都是空位。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [&quot;a&quot;];\n\na.length = 3;\na[1]; // undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码表示，当 <code>length</code> 属性设为大于数组个数时，读取新增的位置都会返回 <code>undefined</code>。</p><p>如果人为设置 <code>length</code> 为不合法的值，JavaScript 会报错。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// 设置负值\n[].length = -1\n// RangeError: Invalid array length\n\n// 数组元素个数大于等于2的32次方\n[].length = Math.pow(2, 32)\n// RangeError: Invalid array length\n\n// 设置字符串\n[].length = &#39;abc&#39;\n// RangeError: Invalid array length\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>值得注意的是，由于数组本质上是一种对象，所以可以为数组添加属性，但是这不影响 <code>length</code> 属性的值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [];\n\na[&quot;p&quot;] = &quot;abc&quot;;\na.length; // 0\n\na[2.1] = &quot;abc&quot;;\na.length; // 0\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码将数组的键分别设为字符串和小数，结果都不影响 <code>length</code> 属性。因为，<code>length</code> 属性的值就是等于最大的数字键加 1，而这个数组没有整数键，所以 <code>length</code> 属性保持为 <code>0</code>。</p><p>如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [];\n\narr[-1] = &quot;a&quot;;\narr[Math.pow(2, 32)] = &quot;b&quot;;\n\narr.length; // 0\narr[-1]; // &quot;a&quot;\narr[4294967296]; // &quot;b&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，我们为数组 <code>arr</code> 添加了两个不合法的数字键，结果 <code>length</code> 属性没有发生变化。这些数字键都变成了字符串键名。最后两行之所以会取到值，是因为取键值时，数字键名会默认转为字符串。</p><h2 id="in-运算符" tabindex="-1"><a class="header-anchor" href="#in-运算符" aria-hidden="true">#</a> in 运算符</h2><p>检查某个键名是否存在的运算符 <code>in</code>，适用于对象，也适用于数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n\n2 in arr; // true\n&quot;2&quot; in arr; // true\n4 in arr; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码表明，数组存在键名为 <code>2</code> 的键。由于键名都是字符串，所以数值 <code>2</code> 会自动转成字符串。</p><p>注意，如果数组的某个位置是空位，<code>in</code> 运算符返回 <code>false</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = [];\n\narr[100] = &quot;a&quot;;\n\n100 in arr; // true\n1 in arr; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，数组 <code>arr</code> 只有一个成员 <code>arr[100]</code>，其他位置的键名都会返回 <code>false</code>。</p><h2 id="for-in-循环和数组的遍历" tabindex="-1"><a class="header-anchor" href="#for-in-循环和数组的遍历" aria-hidden="true">#</a> <code>for...in</code> 循环和数组的遍历</h2><p><code>for...in</code> 循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [1, 2, 3];\n\nfor (let i in a) {\n  console.log(a[i]);\n}\n// 1\n// 2\n// 3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但是，<code>for...in</code> 不仅会遍历数组所有的数字键，还会遍历非数字键。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [1, 2, 3];\n\na.foo = true;\n\nfor (let key in a) {\n  console.log(key);\n}\n// 0\n// 1\n// 2\n// foo\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码在遍历数组时，也遍历到了非整数键 <code>foo</code>。所以，不推荐使用 <code>for...in</code> 遍历数组。</p><p>数组的遍历可以考虑使用 <code>for</code> 循环或 <code>while</code> 循环。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [1, 2, 3];\n\n// for循环\nfor (let i = 0; i &lt; a.length; i++) {\n  console.log(a[i]);\n}\n\n// while循环\nlet i = 0;\nwhile (i &lt; a.length) {\n  console.log(a[i]);\n  i++;\n}\n\nlet l = a.length;\nwhile (l--) {\n  console.log(a[l]);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>上面代码是三种遍历数组的写法。最后一种写法是逆向遍历，即从最后一个元素向第一个元素遍历。</p><p>数组的 <code>forEach</code> 方法，也可以用来遍历数组，详见《标准库》的 Array 对象一章。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];\ncolors.forEach(function (color) {\n  console.log(color);\n});\n// red\n// green\n// blue\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="数组的空位" tabindex="-1"><a class="header-anchor" href="#数组的空位" aria-hidden="true">#</a> 数组的空位</h2><p>当数组的某个位置是空元素，即两个逗号之间没有任何值，我们称该数组存在空位(hole)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [1, , 1];\n\na.length; // 3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面代码表明，数组的空位不影响 <code>length</code> 属性。</p><p>需要注意的是，如果最后一个元素后面有逗号，并不会产生空位。也就是说，有没有这个逗号，结果都是一样的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [1, 2, 3];\n\na.length; // 3\na; // [1, 2, 3]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码中，数组最后一个成员后面有一个逗号，这不影响 <code>length</code> 属性的值，与没有这个逗号时效果一样。</p><p>数组的空位是可以读取的，返回 <code>undefined</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [, , ,];\n\na[1]; // undefined\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用 <code>delete</code> 命令删除一个数组成员，会形成空位，并且不会影响 <code>length</code> 属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [1, 2, 3];\n\ndelete a[1];\n\na[1]; // undefined\na.length; // 3\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码用 <code>delete</code> 命令删除了数组的第二个元素，这个位置就形成了空位，但是对 <code>length</code> 属性没有影响。也就是说，<code>length</code> 属性不过滤空位。所以，使用 <code>length</code> 属性进行数组遍历，一定要非常小心。</p><p>数组的某个位置是空位，与某个位置是 <code>undefined</code>，是不一样的。如果是空位，使用数组的 <code>forEach</code> 方法、<code>for...in</code> 结构、以及 <code>Object.keys</code> 方法进行遍历，空位都会被跳过。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [, , ,];\n\na.forEach(function (x, i) {\n  console.log(i + &quot;. &quot; + x);\n});\n// 不产生任何输出\n\nfor (let i in a) {\n  console.log(i);\n}\n// 不产生任何输出\n\nObject.keys(a);\n// []\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果某个位置是 <code>undefined</code>，遍历的时候就不会被跳过。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const a = [undefined, undefined, undefined];\n\na.forEach(function (x, i) {\n  console.log(i + &quot;. &quot; + x);\n});\n// 0. undefined\n// 1. undefined\n// 2. undefined\n\nfor (let i in a) {\n  console.log(i);\n}\n// 0\n// 1\n// 2\n\nObject.keys(a);\n// [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;]\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这就是说，空位就是数组没有这个元素，所以不会被遍历到，而 <code>undefined</code> 则表示数组有这个元素，值是 <code>undefined</code>，所以遍历不会跳过。</p><h2 id="类似数组的对象" tabindex="-1"><a class="header-anchor" href="#类似数组的对象" aria-hidden="true">#</a> 类似数组的对象</h2><p>如果一个对象的所有键名都是正整数或零，并且有 <code>length</code> 属性，那么这个对象就很像数组，语法上称为“类似数组的对象”(array-like object)。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const obj = {\n  0: &quot;a&quot;,\n  1: &quot;b&quot;,\n  2: &quot;c&quot;,\n  length: 3,\n};\n\nobj[0]; // &#39;a&#39;\nobj[1]; // &#39;b&#39;\nobj.length; // 3\nobj.push(&quot;d&quot;); // TypeError: obj.push is not a function\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，对象 <code>obj</code> 就是一个类似数组的对象。但是，“类似数组的对象”并不是数组，因为它们不具备数组特有的方法。对象 <code>obj</code> 没有数组的 <code>push</code> 方法，使用该方法就会报错。</p><p>“类似数组的对象”的根本特征，就是具有 <code>length</code> 属性。只要有 <code>length</code> 属性，就可以认为这个对象类似于数组。但是有一个问题，这种 <code>length</code> 属性不是动态值，不会随着成员的变化而变化。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const obj = {\n  length: 0,\n};\n\nobj[3] = &quot;d&quot;;\nobj.length; // 0\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码为对象 <code>obj</code> 添加了一个数字键，但是 <code>length</code> 属性没变。这就说明了 <code>obj</code> 不是数组。</p><p>典型的“类似数组的对象”是函数的 <code>arguments</code> 对象，以及大多数 DOM 元素集，还有字符串。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// arguments对象\nfunction args() {\n  return arguments;\n}\nconst arrayLike = args(&quot;a&quot;, &quot;b&quot;);\n\narrayLike[0]; // &#39;a&#39;\narrayLike.length; // 2\narrayLike instanceof Array; // false\n\n// DOM元素集\nconst elts = document.getElementsByTagName(&quot;h3&quot;);\n\nelts.length; // 3\nelts instanceof Array; // false\n\n// 字符串\n&quot;abc&quot;[1]; // &#39;b&#39;\n&quot;abc&quot;.length; // 3\n&quot;abc&quot; instanceof Array; // false\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>上面代码包含三个例子，它们都不是数组 (<code>instanceof</code> 运算符返回 <code>false</code>)，但是看上去都非常像数组。</p><p>数组的 <code>slice</code> 方法可以将“类似数组的对象”变成真正的数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = Array.prototype.slice.call(arrayLike);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>除了转为真正的数组，“类似数组的对象”还有一个办法可以使用数组的方法，就是通过 <code>call()</code> 把数组的方法放到对象上面。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>function print(value, index) {\n  console.log(index + &quot; : &quot; + value);\n}\n\nArray.prototype.forEach.call(arrayLike, print);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，<code>arrayLike</code> 代表一个类似数组的对象，本来是不可以使用数组的 <code>forEach()</code> 方法的，但是通过 <code>call()</code>，可以把 <code>forEach()</code> 嫁接到 <code>arrayLike</code> 上面调用。</p><p>下面的例子就是通过这种方法，在 <code>arguments</code> 对象上面调用 <code>forEach</code> 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>// forEach 方法\nfunction logArgs() {\n  Array.prototype.forEach.call(arguments, function (elem, i) {\n    console.log(i + &quot;. &quot; + elem);\n  });\n}\n\n// 等同于 for 循环\nfunction logArgs() {\n  for (let i = 0; i &lt; arguments.length; i++) {\n    console.log(i + &quot;. &quot; + arguments[i]);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>字符串也是类似数组的对象，所以也可以用 <code>Array.prototype.forEach.call</code> 遍历。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Array.prototype.forEach.call(&quot;abc&quot;, function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意，这种方法比直接使用数组原生的 <code>forEach</code> 要慢，所以最好还是先将“类似数组的对象”转为真正的数组，然后再直接调用数组的 <code>forEach</code> 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>const arr = Array.prototype.slice.call(&quot;abc&quot;);\n\narr.forEach(function (chr) {\n  console.log(chr);\n});\n// a\n// b\n// c\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',104),p=(0,s.Uk)("Axel Rauschmayer, "),i={href:"http://www.2ality.com/2012/12/arrays.html",target:"_blank",rel:"noopener noreferrer"},o=(0,s.Uk)("Arrays in JavaScript"),u=(0,s.Uk)("Axel Rauschmayer, "),b={href:"http://www.2ality.com/2012/06/dense-arrays.html",target:"_blank",rel:"noopener noreferrer"},d=(0,s.Uk)("JavaScript: sparse arrays vs. dense arrays"),t=(0,s.Uk)("Felix Bohm, "),m={href:"http://net.tutsplus.com/tutorials/javascript-ajax/what-they-didnt-tell-you-about-es5s-array-extras/",target:"_blank",rel:"noopener noreferrer"},g=(0,s.Uk)("What They Didn’t Tell You About ES5′s Array Extras"),v=(0,s.Uk)("Juriy Zaytsev, "),h={href:"http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/",target:"_blank",rel:"noopener noreferrer"},j=(0,s.Uk)("How ECMAScript 5 still does not allow to subclass an array"),q={},f=(0,e(82831).Z)(q,[["render",function(n,a){const e=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[r,l,(0,s.kq)(" more "),c,(0,s._)("ul",null,[(0,s._)("li",null,[p,(0,s._)("a",i,[o,(0,s.Wm)(e)])]),(0,s._)("li",null,[u,(0,s._)("a",b,[d,(0,s.Wm)(e)])]),(0,s._)("li",null,[t,(0,s._)("a",m,[g,(0,s.Wm)(e)])]),(0,s._)("li",null,[v,(0,s._)("a",h,[j,(0,s.Wm)(e)])])])],64)}]])},82831:(n,a)=>{a.Z=(n,a)=>{const e=n.__vccOpts||n;for(const[n,s]of a)e[n]=s;return e}},72979:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-5d22fd4e",path:"/code/language/js/types/array.html",title:"数组",lang:"zh-CN",frontmatter:{title:"数组",icon:"array",date:"2019-09-25T00:00:00.000Z",category:["JavaScript"],summary:"数组(array)是按次序排列的一组值。每个值的位置都有编号(从 0 开始)，整个数组用方括号表示。\nconst arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n1",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/js/types/array.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"数组"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-02-06T16:46:58.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:published_time",content:"2019-09-25T00:00:00.000Z"}],["meta",{property:"article:modified_time",content:"2022-02-06T16:46:58.000Z"}]]},excerpt:'<p>数组(array)是按次序排列的一组值。每个值的位置都有编号(从 0 开始)，整个数组用方括号表示。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>const arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>',headers:[{level:2,title:"数组的本质",slug:"数组的本质",children:[]},{level:2,title:"length 属性",slug:"length-属性",children:[]},{level:2,title:"in 运算符",slug:"in-运算符",children:[]},{level:2,title:"for...in 循环和数组的遍历",slug:"for-in-循环和数组的遍历",children:[]},{level:2,title:"数组的空位",slug:"数组的空位",children:[]},{level:2,title:"类似数组的对象",slug:"类似数组的对象",children:[]},{level:2,title:"参考链接",slug:"参考链接",children:[]}],git:{createdTime:1591204114e3,updatedTime:1644166018e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:3}]},readingTime:{minutes:10.29,words:3088},filePathRelative:"code/language/js/types/array.md"}}}]);