"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[65838],{65240:(e,n,a)=>{a.r(n),a.d(n,{default:()=>X});var s=a(34086);const r=(0,s.Uk)("JavaScript 的类型分为两种: 原始数据类型("),l={href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"},i=(0,s.Uk)("Primitive data types"),t=(0,s.Uk)(")和对象类型(Object types)。"),p=(0,s.Uk)("原始数据类型包括: 布尔值、数值、字符串、"),o=(0,s._)("code",null,"null",-1),c=(0,s.Uk)("、"),d=(0,s._)("code",null,"undefined",-1),u=(0,s.Uk)(" 以及 "),b={href:"http://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"},m=(0,s.Uk)("ES6 中的新类型 "),g=(0,s._)("code",null,"Symbol",-1),v=(0,s.Uk)("。"),y=(0,s._)("p",null,[(0,s.Uk)("本节主要介绍"),(0,s._)("strong",null,"前五种"),(0,s.Uk)("原始数据类型在 TypeScript 中的应用。")],-1),h=(0,s.uE)('<h2 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h2><p>布尔值是最基础的数据类型，在 TypeScript 中，使用 <code>boolean</code> 定义布尔值类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let isDone: boolean = false;\n\n// 编译通过\n// 后面约定，未强调编译错误的代码片段，默认为编译通过\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let createdByNewBoolean: boolean = new Boolean(1);\n\n// Type &#39;Boolean&#39; is not assignable to type &#39;boolean&#39;.\n//   &#39;boolean&#39; is a primitive, but &#39;Boolean&#39; is a wrapper object. Prefer using &#39;boolean&#39; when possible.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>事实上 <code>new Boolean()</code> 返回的是一个 <code>Boolean</code> 对象:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let createdByNewBoolean: Boolean = new Boolean(1);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>直接调用 <code>Boolean</code> 也可以返回一个 <code>boolean</code> 类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let createdByBoolean: boolean = Boolean(1);\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 TypeScript 中，<code>boolean</code> 是 JavaScript 中的基本类型，而 <code>Boolean</code> 是 JavaScript 中的构造函数。其他基本类型(除了 <code>null</code> 和 <code>undefined</code>)一样，不再赘述。</p><h2 id="数值" tabindex="-1"><a class="header-anchor" href="#数值" aria-hidden="true">#</a> 数值</h2><p>使用 <code>number</code> 定义数值类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\n// ES6 中的二进制表示法\nlet binaryLiteral: number = 0b1010;\n// ES6 中的八进制表示法\nlet octalLiteral: number = 0o744;\nlet notANumber: number = NaN;\nlet infinityNumber: number = Infinity;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编译结果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var decLiteral = 6;\nvar hexLiteral = 0xf00d;\n// ES6 中的二进制表示法\nvar binaryLiteral = 10;\n// ES6 中的八进制表示法\nvar octalLiteral = 484;\nvar notANumber = NaN;\nvar infinityNumber = Infinity;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',15),f=(0,s.Uk)("其中 "),k=(0,s._)("code",null,"0b1010",-1),E=(0,s.Uk)(" 和 "),B=(0,s._)("code",null,"0o744",-1),_=(0,s.Uk)(" 是 "),S={href:"http://es6.ruanyifeng.com/#docs/number#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},U=(0,s.Uk)("ES6 中的二进制和八进制表示法"),x=(0,s.Uk)("，它们会被编译为十进制数字。"),A=(0,s.uE)('<h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>使用 <code>string</code> 定义字符串类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let myName: string = &quot;Tom&quot;;\nlet myAge: number = 25;\n\n// 模板字符串\nlet sentence: string = `Hello, my name is ${myName}.\nI&#39;ll be ${myAge + 1} years old next month.`;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>编译结果:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>var myName = &quot;Tom&quot;;\nvar myAge = 25;\n// 模板字符串\nvar sentence =\n  &quot;Hello, my name is &quot; +\n  myName +\n  &quot;.\\nI&#39;ll be &quot; +\n  (myAge + 1) +\n  &quot; years old next month.&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',5),T=(0,s.Uk)("其中 "),N=(0,s._)("code",null,"`",-1),w=(0,s.Uk)(" 用来定义 "),q={href:"http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"},j=(0,s.Uk)("ES6 中的模板字符串"),C=(0,s.Uk)("，"),W=(0,s._)("code",null,"${expr}",-1),L=(0,s.Uk)(" 用来在模板字符串中嵌入表达式。"),P=(0,s.uE)('<h2 id="空值" tabindex="-1"><a class="header-anchor" href="#空值" aria-hidden="true">#</a> 空值</h2><p>JavaScript 没有空值(Void)的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>function alertName(): void {\n  alert(&quot;My name is Tom&quot;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>声明一个 <code>void</code> 类型的变量没有什么用，因为您只能将它赋值为 <code>undefined</code> 和 <code>null</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let unusable: void = undefined;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> Null 和 Undefined</h2><p>在 TypeScript 中，可以使用 <code>null</code> 和 <code>undefined</code> 来定义这两个原始数据类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let u: undefined = undefined;\nlet n: null = null;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// 这样不会报错\nlet num: number = undefined;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>// 这样也不会报错\nlet u: undefined;\nlet num: number = u;\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>let u: void;\nlet num: number = u;\n\n// Type &#39;void&#39; is not assignable to type &#39;number&#39;.\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',14),z={href:"http://www.typescriptlang.org/docs/handbook/basic-types.html",target:"_blank",rel:"noopener noreferrer"},D=(0,s.Uk)("Basic Types"),F=(0,s.Uk)("("),J={href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html",target:"_blank",rel:"noopener noreferrer"},H=(0,s.Uk)("中文版"),I=(0,s.Uk)(")"),O={href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"},Z=(0,s.Uk)("Primitive data types"),M={href:"http://es6.ruanyifeng.com/#docs/symbol",target:"_blank",rel:"noopener noreferrer"},$=(0,s.Uk)("ES6 中的新类型 "),G=(0,s._)("code",null,"Symbol",-1),R={href:"http://es6.ruanyifeng.com/#docs/number#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},V=(0,s.Uk)("ES6 中的二进制和八进制表示法"),Y={href:"http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"},K=(0,s.Uk)("ES6 中的模板字符串"),Q={},X=(0,a(82831).Z)(Q,[["render",function(e,n){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)(s.HY,null,[(0,s._)("p",null,[r,(0,s._)("a",l,[i,(0,s.Wm)(a)]),t]),(0,s._)("p",null,[p,o,c,d,u,(0,s._)("a",b,[m,g,(0,s.Wm)(a)]),v]),y,(0,s.kq)(" more "),h,(0,s._)("p",null,[f,k,E,B,_,(0,s._)("a",S,[U,(0,s.Wm)(a)]),x]),A,(0,s._)("p",null,[T,N,w,(0,s._)("a",q,[j,(0,s.Wm)(a)]),C,W,L]),P,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",z,[D,(0,s.Wm)(a)]),F,(0,s._)("a",J,[H,(0,s.Wm)(a)]),I]),(0,s._)("li",null,[(0,s._)("a",O,[Z,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",M,[$,G,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",R,[V,(0,s.Wm)(a)])]),(0,s._)("li",null,[(0,s._)("a",Y,[K,(0,s.Wm)(a)])])])],64)}]])},82831:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},37181:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-85f3d8a2",path:"/code/language/typescript/basics/primitive-data-types.html",title:"原始数据类型",lang:"zh-CN",frontmatter:{title:"原始数据类型",icon:"type",category:["TypeScript"],summary:"JavaScript 的类型分为两种: 原始数据类型([Primitive data types][])和对象类型(Object types)。\n原始数据类型包括: 布尔值、数值、字符串、null、undefined 以及 [ES6 中的新类型 Symbol][]。\n本节主要介绍前五种原始数据类型在 TypeScript 中的应用。\n",head:[["meta",{property:"og:url",content:"https://mrhope.site/code/language/typescript/basics/primitive-data-types.html"}],["meta",{property:"og:site_name",content:"Mr.Hope"}],["meta",{property:"og:title",content:"原始数据类型"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2020-06-03T17:08:34.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2020-06-03T17:08:34.000Z"}]]},excerpt:"<p>JavaScript 的类型分为两种: 原始数据类型([Primitive data types][])和对象类型(Object types)。</p>\n<p>原始数据类型包括: 布尔值、数值、字符串、<code v-pre>null</code>、<code v-pre>undefined</code> 以及 [ES6 中的新类型 <code v-pre>Symbol</code>][]。</p>\n<p>本节主要介绍<strong>前五种</strong>原始数据类型在 TypeScript 中的应用。</p>\n",headers:[{level:2,title:"布尔值",slug:"布尔值",children:[]},{level:2,title:"数值",slug:"数值",children:[]},{level:2,title:"字符串",slug:"字符串",children:[]},{level:2,title:"空值",slug:"空值",children:[]},{level:2,title:"Null 和 Undefined",slug:"null-和-undefined",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],git:{createdTime:1591204114e3,updatedTime:1591204114e3,contributors:[{name:"Mr.Hope",email:"zhangbowang1998@gmail.com",commits:1}]},readingTime:{minutes:2.74,words:821},filePathRelative:"code/language/typescript/basics/primitive-data-types.md"}}}]);